                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8804 (Aug  6 2013) (Linux)
                                      4 ; This file was generated Mon Aug 25 04:16:28 2014
                                      5 ;--------------------------------------------------------
                                      6 	.module elfloader
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _symtab_lookup
                                     13 	.globl _elfloader_arch_write_rom
                                     14 	.globl _elfloader_arch_relocate
                                     15 	.globl _elfloader_arch_allocate_rom
                                     16 	.globl _elfloader_arch_allocate_ram
                                     17 	.globl _cfs_seek
                                     18 	.globl _cfs_read
                                     19 	.globl _memset
                                     20 	.globl _strncmp
                                     21 	.globl _strcmp
                                     22 	.globl _memcmp
                                     23 	.globl _memcpy
                                     24 	.globl _ACTIVE
                                     25 	.globl _TX_BYTE
                                     26 	.globl _RX_BYTE
                                     27 	.globl _ERR
                                     28 	.globl _FE
                                     29 	.globl _SLAVE
                                     30 	.globl _RE
                                     31 	.globl _MODE
                                     32 	.globl _T3OVFIF
                                     33 	.globl _T3CH0IF
                                     34 	.globl _T3CH1IF
                                     35 	.globl _T4OVFIF
                                     36 	.globl _T4CH0IF
                                     37 	.globl _T4CH1IF
                                     38 	.globl _OVFIM
                                     39 	.globl _B_0
                                     40 	.globl _B_1
                                     41 	.globl _B_2
                                     42 	.globl _B_3
                                     43 	.globl _B_4
                                     44 	.globl _B_5
                                     45 	.globl _B_6
                                     46 	.globl _B_7
                                     47 	.globl _P2IF
                                     48 	.globl _UTX0IF
                                     49 	.globl _UTX1IF
                                     50 	.globl _P1IF
                                     51 	.globl _WDTIF
                                     52 	.globl _ACC_0
                                     53 	.globl _ACC_1
                                     54 	.globl _ACC_2
                                     55 	.globl _ACC_3
                                     56 	.globl _ACC_4
                                     57 	.globl _ACC_5
                                     58 	.globl _ACC_6
                                     59 	.globl _ACC_7
                                     60 	.globl _P
                                     61 	.globl _F1
                                     62 	.globl _OV
                                     63 	.globl _RS0
                                     64 	.globl _RS1
                                     65 	.globl _F0
                                     66 	.globl _AC
                                     67 	.globl _CY
                                     68 	.globl _DMAIF
                                     69 	.globl _T1IF
                                     70 	.globl _T2IF
                                     71 	.globl _T3IF
                                     72 	.globl _T4IF
                                     73 	.globl _P0IF
                                     74 	.globl _STIF
                                     75 	.globl _DMAIE
                                     76 	.globl _T1IE
                                     77 	.globl _T2IE
                                     78 	.globl _T3IE
                                     79 	.globl _T4IE
                                     80 	.globl _P0IE
                                     81 	.globl _RFERRIE
                                     82 	.globl _ADCIE
                                     83 	.globl _URX0IE
                                     84 	.globl _URX1IE
                                     85 	.globl _ENCIE
                                     86 	.globl _STIE
                                     87 	.globl _EA
                                     88 	.globl _P2_0
                                     89 	.globl _P2_1
                                     90 	.globl _P2_2
                                     91 	.globl _P2_3
                                     92 	.globl _P2_4
                                     93 	.globl _P2_5
                                     94 	.globl _P2_6
                                     95 	.globl _P2_7
                                     96 	.globl _ENCIF_0
                                     97 	.globl _ENCIF_1
                                     98 	.globl _P1_0
                                     99 	.globl _P1_1
                                    100 	.globl _P1_2
                                    101 	.globl _P1_3
                                    102 	.globl _P1_4
                                    103 	.globl _P1_5
                                    104 	.globl _P1_6
                                    105 	.globl _P1_7
                                    106 	.globl _IT0
                                    107 	.globl _RFERRIF
                                    108 	.globl _IT1
                                    109 	.globl _URX0IF
                                    110 	.globl _ADCIF
                                    111 	.globl _URX1IF
                                    112 	.globl _P0_0
                                    113 	.globl _P0_1
                                    114 	.globl _P0_2
                                    115 	.globl _P0_3
                                    116 	.globl _P0_4
                                    117 	.globl _P0_5
                                    118 	.globl _P0_6
                                    119 	.globl _P0_7
                                    120 	.globl _WDCTL
                                    121 	.globl _U1GCR
                                    122 	.globl _U1UCR
                                    123 	.globl _U1BAUD
                                    124 	.globl _U1DBUF
                                    125 	.globl _U1CSR
                                    126 	.globl _U0GCR
                                    127 	.globl _U0UCR
                                    128 	.globl _U0BAUD
                                    129 	.globl _U0DBUF
                                    130 	.globl _U0CSR
                                    131 	.globl _TIMIF
                                    132 	.globl _T4CC1
                                    133 	.globl _T4CCTL1
                                    134 	.globl _T4CC0
                                    135 	.globl _T4CCTL0
                                    136 	.globl _T4CTL
                                    137 	.globl _T4CNT
                                    138 	.globl _T3CC1
                                    139 	.globl _T3CCTL1
                                    140 	.globl _T3CC0
                                    141 	.globl _T3CCTL0
                                    142 	.globl _T3CTL
                                    143 	.globl _T3CNT
                                    144 	.globl _T2MSEL
                                    145 	.globl _T2IRQM
                                    146 	.globl _T2MOVF2
                                    147 	.globl _T2MOVF1
                                    148 	.globl _T2MOVF0
                                    149 	.globl _T2M1
                                    150 	.globl _T2M0
                                    151 	.globl _T2IRQF
                                    152 	.globl _T2EVTCFG
                                    153 	.globl _T2CTRL
                                    154 	.globl _T1STAT
                                    155 	.globl _T1CCTL2
                                    156 	.globl _T1CCTL1
                                    157 	.globl _T1CCTL0
                                    158 	.globl _T1CTL
                                    159 	.globl _T1CNTH
                                    160 	.globl _T1CNTL
                                    161 	.globl _T1CC2H
                                    162 	.globl _T1CC2L
                                    163 	.globl _T1CC1H
                                    164 	.globl _T1CC1L
                                    165 	.globl _T1CC0H
                                    166 	.globl _T1CC0L
                                    167 	.globl _CLKCONSTA
                                    168 	.globl _CLKCONCMD
                                    169 	.globl _SLEEPSTA
                                    170 	.globl _SLEEPCMD
                                    171 	.globl _STLOAD
                                    172 	.globl _ST2
                                    173 	.globl _ST1
                                    174 	.globl _ST0
                                    175 	.globl _RFERRF
                                    176 	.globl _RFIRQF0
                                    177 	.globl _RFST
                                    178 	.globl _RFD
                                    179 	.globl _RFIRQF1
                                    180 	.globl _PSBANK
                                    181 	.globl _FMAP
                                    182 	.globl _MEMCTR
                                    183 	.globl __XPAGE
                                    184 	.globl _MPAGE
                                    185 	.globl _PMUX
                                    186 	.globl _P2DIR
                                    187 	.globl _P1DIR
                                    188 	.globl _P0DIR
                                    189 	.globl _P2INP
                                    190 	.globl _P1INP
                                    191 	.globl _P2SEL
                                    192 	.globl _P1SEL
                                    193 	.globl _P0SEL
                                    194 	.globl _APCFG
                                    195 	.globl _PERCFG
                                    196 	.globl _P0INP
                                    197 	.globl _P2IEN
                                    198 	.globl _P1IEN
                                    199 	.globl _P0IEN
                                    200 	.globl _PICTL
                                    201 	.globl _P2IFG
                                    202 	.globl _P1IFG
                                    203 	.globl _P0IFG
                                    204 	.globl _DMAREQ
                                    205 	.globl _DMAARM
                                    206 	.globl _DMA0CFGH
                                    207 	.globl _DMA0CFGL
                                    208 	.globl _DMA1CFGH
                                    209 	.globl _DMA1CFGL
                                    210 	.globl _DMAIRQ
                                    211 	.globl _ENCCS
                                    212 	.globl _ENCDO
                                    213 	.globl _ENCDI
                                    214 	.globl _RNDH
                                    215 	.globl _RNDL
                                    216 	.globl _ADCH
                                    217 	.globl _ADCL
                                    218 	.globl _ADCCON3
                                    219 	.globl _ADCCON2
                                    220 	.globl _ADCCON1
                                    221 	.globl _B
                                    222 	.globl _IRCON2
                                    223 	.globl _ACC
                                    224 	.globl _PSW
                                    225 	.globl _IRCON
                                    226 	.globl _IP1
                                    227 	.globl _IEN1
                                    228 	.globl _IP0
                                    229 	.globl _IEN0
                                    230 	.globl _P2
                                    231 	.globl _S1CON
                                    232 	.globl _IEN2
                                    233 	.globl _S0CON
                                    234 	.globl _DPS
                                    235 	.globl _P1
                                    236 	.globl _TCON
                                    237 	.globl _PCON
                                    238 	.globl _DPH1
                                    239 	.globl _DPL1
                                    240 	.globl _DPH0
                                    241 	.globl _DPL0
                                    242 	.globl _SP
                                    243 	.globl _P0
                                    244 	.globl _elfloader_autostart_processes
                                    245 	.globl _elfloader_unknown
                                    246 	.globl _X_IEEE_ADDR
                                    247 	.globl _X_INFOPAGE
                                    248 	.globl _X_P2DIR
                                    249 	.globl _X_P1DIR
                                    250 	.globl _X_P0DIR
                                    251 	.globl _X_U1GCR
                                    252 	.globl _X_U1UCR
                                    253 	.globl _X_U1BAUD
                                    254 	.globl _X_U1DBUF
                                    255 	.globl _X_U1CSR
                                    256 	.globl _X_P2INP
                                    257 	.globl _X_P1INP
                                    258 	.globl _X_P2SEL
                                    259 	.globl _X_P1SEL
                                    260 	.globl _X_P0SEL
                                    261 	.globl _X_APCFG
                                    262 	.globl _X_PERCFG
                                    263 	.globl _X_T4CC1
                                    264 	.globl _X_T4CCTL1
                                    265 	.globl _X_T4CC0
                                    266 	.globl _X_T4CCTL0
                                    267 	.globl _X_T4CTL
                                    268 	.globl _X_T4CNT
                                    269 	.globl _X_RFIRQF0
                                    270 	.globl _X_T1CCTL2
                                    271 	.globl _X_T1CCTL1
                                    272 	.globl _X_T1CCTL0
                                    273 	.globl _X_T1CTL
                                    274 	.globl _X_T1CNTH
                                    275 	.globl _X_T1CNTL
                                    276 	.globl _X_RFST
                                    277 	.globl _X_T1CC2H
                                    278 	.globl _X_T1CC2L
                                    279 	.globl _X_T1CC1H
                                    280 	.globl _X_T1CC1L
                                    281 	.globl _X_T1CC0H
                                    282 	.globl _X_T1CC0L
                                    283 	.globl _X_RFD
                                    284 	.globl _X_TIMIF
                                    285 	.globl _X_DMAREQ
                                    286 	.globl _X_DMAARM
                                    287 	.globl _X_DMA0CFGH
                                    288 	.globl _X_DMA0CFGL
                                    289 	.globl _X_DMA1CFGH
                                    290 	.globl _X_DMA1CFGL
                                    291 	.globl _X_DMAIRQ
                                    292 	.globl _X_T3CC1
                                    293 	.globl _X_T3CCTL1
                                    294 	.globl _X_T3CC0
                                    295 	.globl _X_T3CCTL0
                                    296 	.globl _X_T3CTL
                                    297 	.globl _X_T3CNT
                                    298 	.globl _X_WDCTL
                                    299 	.globl _X_MEMCTR
                                    300 	.globl _X_CLKCONCMD
                                    301 	.globl _X_U0GCR
                                    302 	.globl _X_U0UCR
                                    303 	.globl _X_T2MSEL
                                    304 	.globl _X_U0BAUD
                                    305 	.globl _X_U0DBUF
                                    306 	.globl _X_RFERRF
                                    307 	.globl _X_SLEEPCMD
                                    308 	.globl _X_RNDH
                                    309 	.globl _X_RNDL
                                    310 	.globl _X_ADCH
                                    311 	.globl _X_ADCL
                                    312 	.globl _X_ADCCON3
                                    313 	.globl _X_ADCCON2
                                    314 	.globl _X_ADCCON1
                                    315 	.globl _X_ENCCS
                                    316 	.globl _X_ENCDO
                                    317 	.globl _X_ENCDI
                                    318 	.globl _X_T1STAT
                                    319 	.globl _X_PMUX
                                    320 	.globl _X_STLOAD
                                    321 	.globl _X_P2IEN
                                    322 	.globl _X_P0IEN
                                    323 	.globl _X_T2IRQM
                                    324 	.globl _X_T2MOVF2
                                    325 	.globl _X_T2MOVF1
                                    326 	.globl _X_T2MOVF0
                                    327 	.globl _X_T2M1
                                    328 	.globl _X_T2M0
                                    329 	.globl _X_T2IRQF
                                    330 	.globl _X_P2
                                    331 	.globl _X_PSBANK
                                    332 	.globl _X_FMAP
                                    333 	.globl _X_CLKCONSTA
                                    334 	.globl _X_SLEEPSTA
                                    335 	.globl _X_T2EVTCFG
                                    336 	.globl _X_ST2
                                    337 	.globl _X_ST1
                                    338 	.globl _X_ST0
                                    339 	.globl _X_T2CTRL
                                    340 	.globl _X__XPAGE
                                    341 	.globl _X_MPAGE
                                    342 	.globl _X_RFIRQF1
                                    343 	.globl _X_P1
                                    344 	.globl _X_P0INP
                                    345 	.globl _X_P1IEN
                                    346 	.globl _X_PICTL
                                    347 	.globl _X_P2IFG
                                    348 	.globl _X_P1IFG
                                    349 	.globl _X_P0IFG
                                    350 	.globl _X_U0CSR
                                    351 	.globl _X_P0
                                    352 	.globl _USBF5
                                    353 	.globl _USBF4
                                    354 	.globl _USBF3
                                    355 	.globl _USBF2
                                    356 	.globl _USBF1
                                    357 	.globl _USBF0
                                    358 	.globl _USBCNTH
                                    359 	.globl _USBCNTL
                                    360 	.globl _USBCNT0
                                    361 	.globl _USBCSOH
                                    362 	.globl _USBCSOL
                                    363 	.globl _USBMAXO
                                    364 	.globl _USBCSIH
                                    365 	.globl _USBCSIL
                                    366 	.globl _USBCS0
                                    367 	.globl _USBMAXI
                                    368 	.globl _USBCTRL
                                    369 	.globl _USBINDEX
                                    370 	.globl _USBFRMH
                                    371 	.globl _USBFRML
                                    372 	.globl _USBCIE
                                    373 	.globl _USBOIE
                                    374 	.globl _USBIIE
                                    375 	.globl _USBCIF
                                    376 	.globl _USBOIF
                                    377 	.globl _USBIIF
                                    378 	.globl _USBPOW
                                    379 	.globl _USBADDR
                                    380 	.globl _CSPT
                                    381 	.globl _CSPZ
                                    382 	.globl _CSPY
                                    383 	.globl _CSPX
                                    384 	.globl _CSPSTAT
                                    385 	.globl _CSPCTRL
                                    386 	.globl _CSPPROG23
                                    387 	.globl _CSPPROG22
                                    388 	.globl _CSPPROG21
                                    389 	.globl _CSPPROG20
                                    390 	.globl _CSPPROG19
                                    391 	.globl _CSPPROG18
                                    392 	.globl _CSPPROG17
                                    393 	.globl _CSPPROG16
                                    394 	.globl _CSPPROG15
                                    395 	.globl _CSPPROG14
                                    396 	.globl _CSPPROG13
                                    397 	.globl _CSPPROG12
                                    398 	.globl _CSPPROG11
                                    399 	.globl _CSPPROG10
                                    400 	.globl _CSPPROG9
                                    401 	.globl _CSPPROG8
                                    402 	.globl _CSPPROG7
                                    403 	.globl _CSPPROG6
                                    404 	.globl _CSPPROG5
                                    405 	.globl _CSPPROG4
                                    406 	.globl _CSPPROG3
                                    407 	.globl _CSPPROG2
                                    408 	.globl _CSPPROG1
                                    409 	.globl _CSPPROG0
                                    410 	.globl _RFC_OBS_CTRL2
                                    411 	.globl _RFC_OBS_CTRL1
                                    412 	.globl _RFC_OBS_CTRL0
                                    413 	.globl _TXFILTCFG
                                    414 	.globl _PTEST1
                                    415 	.globl _PTEST0
                                    416 	.globl _ATEST
                                    417 	.globl _DACTEST2
                                    418 	.globl _DACTEST1
                                    419 	.globl _DACTEST0
                                    420 	.globl _MDMTEST1
                                    421 	.globl _MDMTEST0
                                    422 	.globl _ADCTEST2
                                    423 	.globl _ADCTEST1
                                    424 	.globl _ADCTEST0
                                    425 	.globl _AGCCTRL3
                                    426 	.globl _AGCCTRL2
                                    427 	.globl _AGCCTRL1
                                    428 	.globl _AGCCTRL0
                                    429 	.globl _FSCAL3
                                    430 	.globl _FSCAL2
                                    431 	.globl _FSCAL1
                                    432 	.globl _FSCAL0
                                    433 	.globl _FSCTRL
                                    434 	.globl _RXCTRL
                                    435 	.globl _FREQEST
                                    436 	.globl _MDMCTRL1
                                    437 	.globl _MDMCTRL0
                                    438 	.globl _RFRND
                                    439 	.globl _RFERRM
                                    440 	.globl _RFIRQM1
                                    441 	.globl _RFIRQM0
                                    442 	.globl _TXLAST_PTR
                                    443 	.globl _TXFIRST_PTR
                                    444 	.globl _RXP1_PTR
                                    445 	.globl _RXLAST_PTR
                                    446 	.globl _RXFIRST_PTR
                                    447 	.globl _TXFIFOCNT
                                    448 	.globl _RXFIFOCNT
                                    449 	.globl _RXFIRST
                                    450 	.globl _RSSISTAT
                                    451 	.globl _RSSI
                                    452 	.globl _CCACTRL1
                                    453 	.globl _CCACTRL0
                                    454 	.globl _FSMCTRL
                                    455 	.globl _FIFOPCTRL
                                    456 	.globl _FSMSTAT1
                                    457 	.globl _FSMSTAT0
                                    458 	.globl _TXCTRL
                                    459 	.globl _TXPOWER
                                    460 	.globl _FREQCTRL
                                    461 	.globl _FREQTUNE
                                    462 	.globl _RXMASKCLR
                                    463 	.globl _RXMASKSET
                                    464 	.globl _RXENABLE
                                    465 	.globl _FRMCTRL1
                                    466 	.globl _FRMCTRL0
                                    467 	.globl _SRCEXTEN2
                                    468 	.globl _SRCEXTEN1
                                    469 	.globl _SRCEXTEN0
                                    470 	.globl _SRCSHORTEN2
                                    471 	.globl _SRCSHORTEN1
                                    472 	.globl _SRCSHORTEN0
                                    473 	.globl _SRCMATCH
                                    474 	.globl _FRMFILT1
                                    475 	.globl _FRMFILT0
                                    476 	.globl _SHORT_ADDR1
                                    477 	.globl _SHORT_ADDR0
                                    478 	.globl _PAN_ID1
                                    479 	.globl _PAN_ID0
                                    480 	.globl _EXT_ADDR7
                                    481 	.globl _EXT_ADDR6
                                    482 	.globl _EXT_ADDR5
                                    483 	.globl _EXT_ADDR4
                                    484 	.globl _EXT_ADDR3
                                    485 	.globl _EXT_ADDR2
                                    486 	.globl _EXT_ADDR1
                                    487 	.globl _EXT_ADDR0
                                    488 	.globl _SRCSHORTPENDEN2
                                    489 	.globl _SRCSHORTPENDEN1
                                    490 	.globl _SRCSHORTPENDEN0
                                    491 	.globl _SRCEXTPENDEN2
                                    492 	.globl _SRCEXTPENDEN1
                                    493 	.globl _SRCEXTPENDEN0
                                    494 	.globl _SRCRESINDEX
                                    495 	.globl _SRCRESMASK2
                                    496 	.globl _SRCRESMASK1
                                    497 	.globl _SRCRESMASK0
                                    498 	.globl _SRC_ADDR_TABLE
                                    499 	.globl _TXFIFO
                                    500 	.globl _RXFIFO
                                    501 	.globl _RFCORE_RAM
                                    502 	.globl _CMPCTL
                                    503 	.globl _OPAMPS
                                    504 	.globl _OPAMPC
                                    505 	.globl _STCV2
                                    506 	.globl _STCV1
                                    507 	.globl _STCV0
                                    508 	.globl _STCS
                                    509 	.globl _STCC
                                    510 	.globl _T1CC4H
                                    511 	.globl _T1CC4L
                                    512 	.globl _T1CC3H
                                    513 	.globl _T1CC3L
                                    514 	.globl _XX_T1CC2H
                                    515 	.globl _XX_T1CC2L
                                    516 	.globl _XX_T1CC1H
                                    517 	.globl _XX_T1CC1L
                                    518 	.globl _XX_T1CC0H
                                    519 	.globl _XX_T1CC0L
                                    520 	.globl _T1CCTL4
                                    521 	.globl _T1CCTL3
                                    522 	.globl _XX_T1CCTL2
                                    523 	.globl _XX_T1CCTL1
                                    524 	.globl _XX_T1CCTL0
                                    525 	.globl _CLD
                                    526 	.globl _IRCTL
                                    527 	.globl _CHIPINFO1
                                    528 	.globl _CHIPINFO0
                                    529 	.globl _FWDATA
                                    530 	.globl _FADDRH
                                    531 	.globl _FADDRL
                                    532 	.globl _FCTL
                                    533 	.globl _IVCTRL
                                    534 	.globl _BATTMON
                                    535 	.globl _SRCRC
                                    536 	.globl _DBGDATA
                                    537 	.globl _TESTREG0
                                    538 	.globl _CHIPID
                                    539 	.globl _CHVER
                                    540 	.globl _OBSSEL5
                                    541 	.globl _OBSSEL4
                                    542 	.globl _OBSSEL3
                                    543 	.globl _OBSSEL2
                                    544 	.globl _OBSSEL1
                                    545 	.globl _OBSSEL0
                                    546 	.globl _I2CIO
                                    547 	.globl _I2CWC
                                    548 	.globl _I2CADDR
                                    549 	.globl _I2CDATA
                                    550 	.globl _I2CSTAT
                                    551 	.globl _I2CCFG
                                    552 	.globl _OPAMPMC
                                    553 	.globl _MONMUX
                                    554 	.globl _elfloader_init
                                    555 	.globl _elfloader_load
                                    556 ;--------------------------------------------------------
                                    557 ; special function registers
                                    558 ;--------------------------------------------------------
                                    559 	.area RSEG    (ABS,DATA)
      000000                        560 	.org 0x0000
                           000080   561 _P0	=	0x0080
                           000081   562 _SP	=	0x0081
                           000082   563 _DPL0	=	0x0082
                           000083   564 _DPH0	=	0x0083
                           000084   565 _DPL1	=	0x0084
                           000085   566 _DPH1	=	0x0085
                           000087   567 _PCON	=	0x0087
                           000088   568 _TCON	=	0x0088
                           000090   569 _P1	=	0x0090
                           000092   570 _DPS	=	0x0092
                           000098   571 _S0CON	=	0x0098
                           00009A   572 _IEN2	=	0x009a
                           00009B   573 _S1CON	=	0x009b
                           0000A0   574 _P2	=	0x00a0
                           0000A8   575 _IEN0	=	0x00a8
                           0000A9   576 _IP0	=	0x00a9
                           0000B8   577 _IEN1	=	0x00b8
                           0000B9   578 _IP1	=	0x00b9
                           0000C0   579 _IRCON	=	0x00c0
                           0000D0   580 _PSW	=	0x00d0
                           0000E0   581 _ACC	=	0x00e0
                           0000E8   582 _IRCON2	=	0x00e8
                           0000F0   583 _B	=	0x00f0
                           0000B4   584 _ADCCON1	=	0x00b4
                           0000B5   585 _ADCCON2	=	0x00b5
                           0000B6   586 _ADCCON3	=	0x00b6
                           0000BA   587 _ADCL	=	0x00ba
                           0000BB   588 _ADCH	=	0x00bb
                           0000BC   589 _RNDL	=	0x00bc
                           0000BD   590 _RNDH	=	0x00bd
                           0000B1   591 _ENCDI	=	0x00b1
                           0000B2   592 _ENCDO	=	0x00b2
                           0000B3   593 _ENCCS	=	0x00b3
                           0000D1   594 _DMAIRQ	=	0x00d1
                           0000D2   595 _DMA1CFGL	=	0x00d2
                           0000D3   596 _DMA1CFGH	=	0x00d3
                           0000D4   597 _DMA0CFGL	=	0x00d4
                           0000D5   598 _DMA0CFGH	=	0x00d5
                           0000D6   599 _DMAARM	=	0x00d6
                           0000D7   600 _DMAREQ	=	0x00d7
                           000089   601 _P0IFG	=	0x0089
                           00008A   602 _P1IFG	=	0x008a
                           00008B   603 _P2IFG	=	0x008b
                           00008C   604 _PICTL	=	0x008c
                           0000AB   605 _P0IEN	=	0x00ab
                           00008D   606 _P1IEN	=	0x008d
                           0000AC   607 _P2IEN	=	0x00ac
                           00008F   608 _P0INP	=	0x008f
                           0000F1   609 _PERCFG	=	0x00f1
                           0000F2   610 _APCFG	=	0x00f2
                           0000F3   611 _P0SEL	=	0x00f3
                           0000F4   612 _P1SEL	=	0x00f4
                           0000F5   613 _P2SEL	=	0x00f5
                           0000F6   614 _P1INP	=	0x00f6
                           0000F7   615 _P2INP	=	0x00f7
                           0000FD   616 _P0DIR	=	0x00fd
                           0000FE   617 _P1DIR	=	0x00fe
                           0000FF   618 _P2DIR	=	0x00ff
                           0000AE   619 _PMUX	=	0x00ae
                           000093   620 _MPAGE	=	0x0093
                           000093   621 __XPAGE	=	0x0093
                           0000C7   622 _MEMCTR	=	0x00c7
                           00009F   623 _FMAP	=	0x009f
                           00009F   624 _PSBANK	=	0x009f
                           000091   625 _RFIRQF1	=	0x0091
                           0000D9   626 _RFD	=	0x00d9
                           0000E1   627 _RFST	=	0x00e1
                           0000E9   628 _RFIRQF0	=	0x00e9
                           0000BF   629 _RFERRF	=	0x00bf
                           000095   630 _ST0	=	0x0095
                           000096   631 _ST1	=	0x0096
                           000097   632 _ST2	=	0x0097
                           0000AD   633 _STLOAD	=	0x00ad
                           0000BE   634 _SLEEPCMD	=	0x00be
                           00009D   635 _SLEEPSTA	=	0x009d
                           0000C6   636 _CLKCONCMD	=	0x00c6
                           00009E   637 _CLKCONSTA	=	0x009e
                           0000DA   638 _T1CC0L	=	0x00da
                           0000DB   639 _T1CC0H	=	0x00db
                           0000DC   640 _T1CC1L	=	0x00dc
                           0000DD   641 _T1CC1H	=	0x00dd
                           0000DE   642 _T1CC2L	=	0x00de
                           0000DF   643 _T1CC2H	=	0x00df
                           0000E2   644 _T1CNTL	=	0x00e2
                           0000E3   645 _T1CNTH	=	0x00e3
                           0000E4   646 _T1CTL	=	0x00e4
                           0000E5   647 _T1CCTL0	=	0x00e5
                           0000E6   648 _T1CCTL1	=	0x00e6
                           0000E7   649 _T1CCTL2	=	0x00e7
                           0000AF   650 _T1STAT	=	0x00af
                           000094   651 _T2CTRL	=	0x0094
                           00009C   652 _T2EVTCFG	=	0x009c
                           0000A1   653 _T2IRQF	=	0x00a1
                           0000A2   654 _T2M0	=	0x00a2
                           0000A3   655 _T2M1	=	0x00a3
                           0000A4   656 _T2MOVF0	=	0x00a4
                           0000A5   657 _T2MOVF1	=	0x00a5
                           0000A6   658 _T2MOVF2	=	0x00a6
                           0000A7   659 _T2IRQM	=	0x00a7
                           0000C3   660 _T2MSEL	=	0x00c3
                           0000CA   661 _T3CNT	=	0x00ca
                           0000CB   662 _T3CTL	=	0x00cb
                           0000CC   663 _T3CCTL0	=	0x00cc
                           0000CD   664 _T3CC0	=	0x00cd
                           0000CE   665 _T3CCTL1	=	0x00ce
                           0000CF   666 _T3CC1	=	0x00cf
                           0000EA   667 _T4CNT	=	0x00ea
                           0000EB   668 _T4CTL	=	0x00eb
                           0000EC   669 _T4CCTL0	=	0x00ec
                           0000ED   670 _T4CC0	=	0x00ed
                           0000EE   671 _T4CCTL1	=	0x00ee
                           0000EF   672 _T4CC1	=	0x00ef
                           0000D8   673 _TIMIF	=	0x00d8
                           000086   674 _U0CSR	=	0x0086
                           0000C1   675 _U0DBUF	=	0x00c1
                           0000C2   676 _U0BAUD	=	0x00c2
                           0000C4   677 _U0UCR	=	0x00c4
                           0000C5   678 _U0GCR	=	0x00c5
                           0000F8   679 _U1CSR	=	0x00f8
                           0000F9   680 _U1DBUF	=	0x00f9
                           0000FA   681 _U1BAUD	=	0x00fa
                           0000FB   682 _U1UCR	=	0x00fb
                           0000FC   683 _U1GCR	=	0x00fc
                           0000C9   684 _WDCTL	=	0x00c9
                                    685 ;--------------------------------------------------------
                                    686 ; special function bits
                                    687 ;--------------------------------------------------------
                                    688 	.area RSEG    (ABS,DATA)
      000000                        689 	.org 0x0000
                           000087   690 _P0_7	=	0x0087
                           000086   691 _P0_6	=	0x0086
                           000085   692 _P0_5	=	0x0085
                           000084   693 _P0_4	=	0x0084
                           000083   694 _P0_3	=	0x0083
                           000082   695 _P0_2	=	0x0082
                           000081   696 _P0_1	=	0x0081
                           000080   697 _P0_0	=	0x0080
                           00008F   698 _URX1IF	=	0x008f
                           00008D   699 _ADCIF	=	0x008d
                           00008B   700 _URX0IF	=	0x008b
                           00008A   701 _IT1	=	0x008a
                           000089   702 _RFERRIF	=	0x0089
                           000088   703 _IT0	=	0x0088
                           000097   704 _P1_7	=	0x0097
                           000096   705 _P1_6	=	0x0096
                           000095   706 _P1_5	=	0x0095
                           000094   707 _P1_4	=	0x0094
                           000093   708 _P1_3	=	0x0093
                           000092   709 _P1_2	=	0x0092
                           000091   710 _P1_1	=	0x0091
                           000090   711 _P1_0	=	0x0090
                           000099   712 _ENCIF_1	=	0x0099
                           000098   713 _ENCIF_0	=	0x0098
                           0000A7   714 _P2_7	=	0x00a7
                           0000A6   715 _P2_6	=	0x00a6
                           0000A5   716 _P2_5	=	0x00a5
                           0000A4   717 _P2_4	=	0x00a4
                           0000A3   718 _P2_3	=	0x00a3
                           0000A2   719 _P2_2	=	0x00a2
                           0000A1   720 _P2_1	=	0x00a1
                           0000A0   721 _P2_0	=	0x00a0
                           0000AF   722 _EA	=	0x00af
                           0000AD   723 _STIE	=	0x00ad
                           0000AC   724 _ENCIE	=	0x00ac
                           0000AB   725 _URX1IE	=	0x00ab
                           0000AA   726 _URX0IE	=	0x00aa
                           0000A9   727 _ADCIE	=	0x00a9
                           0000A8   728 _RFERRIE	=	0x00a8
                           0000BD   729 _P0IE	=	0x00bd
                           0000BC   730 _T4IE	=	0x00bc
                           0000BB   731 _T3IE	=	0x00bb
                           0000BA   732 _T2IE	=	0x00ba
                           0000B9   733 _T1IE	=	0x00b9
                           0000B8   734 _DMAIE	=	0x00b8
                           0000C7   735 _STIF	=	0x00c7
                           0000C5   736 _P0IF	=	0x00c5
                           0000C4   737 _T4IF	=	0x00c4
                           0000C3   738 _T3IF	=	0x00c3
                           0000C2   739 _T2IF	=	0x00c2
                           0000C1   740 _T1IF	=	0x00c1
                           0000C0   741 _DMAIF	=	0x00c0
                           0000D7   742 _CY	=	0x00d7
                           0000D6   743 _AC	=	0x00d6
                           0000D5   744 _F0	=	0x00d5
                           0000D4   745 _RS1	=	0x00d4
                           0000D3   746 _RS0	=	0x00d3
                           0000D2   747 _OV	=	0x00d2
                           0000D1   748 _F1	=	0x00d1
                           0000D0   749 _P	=	0x00d0
                           0000E7   750 _ACC_7	=	0x00e7
                           0000E6   751 _ACC_6	=	0x00e6
                           0000E5   752 _ACC_5	=	0x00e5
                           0000E4   753 _ACC_4	=	0x00e4
                           0000E3   754 _ACC_3	=	0x00e3
                           0000E2   755 _ACC_2	=	0x00e2
                           0000E1   756 _ACC_1	=	0x00e1
                           0000E0   757 _ACC_0	=	0x00e0
                           0000EC   758 _WDTIF	=	0x00ec
                           0000EB   759 _P1IF	=	0x00eb
                           0000EA   760 _UTX1IF	=	0x00ea
                           0000E9   761 _UTX0IF	=	0x00e9
                           0000E8   762 _P2IF	=	0x00e8
                           0000F7   763 _B_7	=	0x00f7
                           0000F6   764 _B_6	=	0x00f6
                           0000F5   765 _B_5	=	0x00f5
                           0000F4   766 _B_4	=	0x00f4
                           0000F3   767 _B_3	=	0x00f3
                           0000F2   768 _B_2	=	0x00f2
                           0000F1   769 _B_1	=	0x00f1
                           0000F0   770 _B_0	=	0x00f0
                           0000DE   771 _OVFIM	=	0x00de
                           0000DD   772 _T4CH1IF	=	0x00dd
                           0000DC   773 _T4CH0IF	=	0x00dc
                           0000DB   774 _T4OVFIF	=	0x00db
                           0000DA   775 _T3CH1IF	=	0x00da
                           0000D9   776 _T3CH0IF	=	0x00d9
                           0000D8   777 _T3OVFIF	=	0x00d8
                           0000FF   778 _MODE	=	0x00ff
                           0000FE   779 _RE	=	0x00fe
                           0000FD   780 _SLAVE	=	0x00fd
                           0000FC   781 _FE	=	0x00fc
                           0000FB   782 _ERR	=	0x00fb
                           0000FA   783 _RX_BYTE	=	0x00fa
                           0000F9   784 _TX_BYTE	=	0x00f9
                           0000F8   785 _ACTIVE	=	0x00f8
                                    786 ;--------------------------------------------------------
                                    787 ; overlayable register banks
                                    788 ;--------------------------------------------------------
                                    789 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        790 	.ds 8
                                    791 ;--------------------------------------------------------
                                    792 ; internal ram data
                                    793 ;--------------------------------------------------------
                                    794 	.area DSEG    (DATA)
                                    795 ;--------------------------------------------------------
                                    796 ; overlayable items in internal ram 
                                    797 ;--------------------------------------------------------
                                    798 ;--------------------------------------------------------
                                    799 ; indirectly addressable internal ram data
                                    800 ;--------------------------------------------------------
                                    801 	.area ISEG    (DATA)
                                    802 ;--------------------------------------------------------
                                    803 ; absolute internal ram data
                                    804 ;--------------------------------------------------------
                                    805 	.area IABS    (ABS,DATA)
                                    806 	.area IABS    (ABS,DATA)
                                    807 ;--------------------------------------------------------
                                    808 ; bit data
                                    809 ;--------------------------------------------------------
                                    810 	.area BSEG    (BIT)
                                    811 ;--------------------------------------------------------
                                    812 ; paged external ram data
                                    813 ;--------------------------------------------------------
                                    814 	.area PSEG    (PAG,XDATA)
                                    815 ;--------------------------------------------------------
                                    816 ; external ram data
                                    817 ;--------------------------------------------------------
                                    818 	.area XSEG    (XDATA)
                           0061A6   819 _MONMUX	=	0x61a6
                           0061A6   820 _OPAMPMC	=	0x61a6
                           006230   821 _I2CCFG	=	0x6230
                           006231   822 _I2CSTAT	=	0x6231
                           006232   823 _I2CDATA	=	0x6232
                           006233   824 _I2CADDR	=	0x6233
                           006234   825 _I2CWC	=	0x6234
                           006235   826 _I2CIO	=	0x6235
                           006243   827 _OBSSEL0	=	0x6243
                           006244   828 _OBSSEL1	=	0x6244
                           006245   829 _OBSSEL2	=	0x6245
                           006246   830 _OBSSEL3	=	0x6246
                           006247   831 _OBSSEL4	=	0x6247
                           006248   832 _OBSSEL5	=	0x6248
                           006249   833 _CHVER	=	0x6249
                           00624A   834 _CHIPID	=	0x624a
                           00624B   835 _TESTREG0	=	0x624b
                           006260   836 _DBGDATA	=	0x6260
                           006262   837 _SRCRC	=	0x6262
                           006264   838 _BATTMON	=	0x6264
                           006265   839 _IVCTRL	=	0x6265
                           006270   840 _FCTL	=	0x6270
                           006271   841 _FADDRL	=	0x6271
                           006272   842 _FADDRH	=	0x6272
                           006273   843 _FWDATA	=	0x6273
                           006276   844 _CHIPINFO0	=	0x6276
                           006277   845 _CHIPINFO1	=	0x6277
                           006281   846 _IRCTL	=	0x6281
                           006290   847 _CLD	=	0x6290
                           0062A0   848 _XX_T1CCTL0	=	0x62a0
                           0062A1   849 _XX_T1CCTL1	=	0x62a1
                           0062A2   850 _XX_T1CCTL2	=	0x62a2
                           0062A3   851 _T1CCTL3	=	0x62a3
                           0062A4   852 _T1CCTL4	=	0x62a4
                           0062A6   853 _XX_T1CC0L	=	0x62a6
                           0062A7   854 _XX_T1CC0H	=	0x62a7
                           0062A8   855 _XX_T1CC1L	=	0x62a8
                           0062A9   856 _XX_T1CC1H	=	0x62a9
                           0062AA   857 _XX_T1CC2L	=	0x62aa
                           0062AB   858 _XX_T1CC2H	=	0x62ab
                           0062AC   859 _T1CC3L	=	0x62ac
                           0062AD   860 _T1CC3H	=	0x62ad
                           0062AE   861 _T1CC4L	=	0x62ae
                           0062AF   862 _T1CC4H	=	0x62af
                           0062B0   863 _STCC	=	0x62b0
                           0062B1   864 _STCS	=	0x62b1
                           0062B2   865 _STCV0	=	0x62b2
                           0062B3   866 _STCV1	=	0x62b3
                           0062B4   867 _STCV2	=	0x62b4
                           0062C0   868 _OPAMPC	=	0x62c0
                           0062C1   869 _OPAMPS	=	0x62c1
                           0062D0   870 _CMPCTL	=	0x62d0
                           006000   871 _RFCORE_RAM	=	0x6000
                           006000   872 _RXFIFO	=	0x6000
                           006080   873 _TXFIFO	=	0x6080
                           006100   874 _SRC_ADDR_TABLE	=	0x6100
                           006160   875 _SRCRESMASK0	=	0x6160
                           006161   876 _SRCRESMASK1	=	0x6161
                           006162   877 _SRCRESMASK2	=	0x6162
                           006163   878 _SRCRESINDEX	=	0x6163
                           006164   879 _SRCEXTPENDEN0	=	0x6164
                           006165   880 _SRCEXTPENDEN1	=	0x6165
                           006166   881 _SRCEXTPENDEN2	=	0x6166
                           006167   882 _SRCSHORTPENDEN0	=	0x6167
                           006168   883 _SRCSHORTPENDEN1	=	0x6168
                           006169   884 _SRCSHORTPENDEN2	=	0x6169
                           00616A   885 _EXT_ADDR0	=	0x616a
                           00616B   886 _EXT_ADDR1	=	0x616b
                           00616C   887 _EXT_ADDR2	=	0x616c
                           00616D   888 _EXT_ADDR3	=	0x616d
                           00616E   889 _EXT_ADDR4	=	0x616e
                           00616F   890 _EXT_ADDR5	=	0x616f
                           006170   891 _EXT_ADDR6	=	0x6170
                           006171   892 _EXT_ADDR7	=	0x6171
                           006172   893 _PAN_ID0	=	0x6172
                           006173   894 _PAN_ID1	=	0x6173
                           006174   895 _SHORT_ADDR0	=	0x6174
                           006175   896 _SHORT_ADDR1	=	0x6175
                           006180   897 _FRMFILT0	=	0x6180
                           006181   898 _FRMFILT1	=	0x6181
                           006182   899 _SRCMATCH	=	0x6182
                           006183   900 _SRCSHORTEN0	=	0x6183
                           006184   901 _SRCSHORTEN1	=	0x6184
                           006185   902 _SRCSHORTEN2	=	0x6185
                           006186   903 _SRCEXTEN0	=	0x6186
                           006187   904 _SRCEXTEN1	=	0x6187
                           006188   905 _SRCEXTEN2	=	0x6188
                           006189   906 _FRMCTRL0	=	0x6189
                           00618A   907 _FRMCTRL1	=	0x618a
                           00618B   908 _RXENABLE	=	0x618b
                           00618C   909 _RXMASKSET	=	0x618c
                           00618D   910 _RXMASKCLR	=	0x618d
                           00618E   911 _FREQTUNE	=	0x618e
                           00618F   912 _FREQCTRL	=	0x618f
                           006190   913 _TXPOWER	=	0x6190
                           006191   914 _TXCTRL	=	0x6191
                           006192   915 _FSMSTAT0	=	0x6192
                           006193   916 _FSMSTAT1	=	0x6193
                           006194   917 _FIFOPCTRL	=	0x6194
                           006195   918 _FSMCTRL	=	0x6195
                           006196   919 _CCACTRL0	=	0x6196
                           006197   920 _CCACTRL1	=	0x6197
                           006198   921 _RSSI	=	0x6198
                           006199   922 _RSSISTAT	=	0x6199
                           00619A   923 _RXFIRST	=	0x619a
                           00619B   924 _RXFIFOCNT	=	0x619b
                           00619C   925 _TXFIFOCNT	=	0x619c
                           00619D   926 _RXFIRST_PTR	=	0x619d
                           00619E   927 _RXLAST_PTR	=	0x619e
                           00619F   928 _RXP1_PTR	=	0x619f
                           0061A1   929 _TXFIRST_PTR	=	0x61a1
                           0061A2   930 _TXLAST_PTR	=	0x61a2
                           0061A3   931 _RFIRQM0	=	0x61a3
                           0061A4   932 _RFIRQM1	=	0x61a4
                           0061A5   933 _RFERRM	=	0x61a5
                           0061A7   934 _RFRND	=	0x61a7
                           0061A8   935 _MDMCTRL0	=	0x61a8
                           0061A9   936 _MDMCTRL1	=	0x61a9
                           0061AA   937 _FREQEST	=	0x61aa
                           0061AB   938 _RXCTRL	=	0x61ab
                           0061AC   939 _FSCTRL	=	0x61ac
                           0061AD   940 _FSCAL0	=	0x61ad
                           0061AE   941 _FSCAL1	=	0x61ae
                           0061AF   942 _FSCAL2	=	0x61af
                           0061B0   943 _FSCAL3	=	0x61b0
                           0061B1   944 _AGCCTRL0	=	0x61b1
                           0061B2   945 _AGCCTRL1	=	0x61b2
                           0061B3   946 _AGCCTRL2	=	0x61b3
                           0061B4   947 _AGCCTRL3	=	0x61b4
                           0061B5   948 _ADCTEST0	=	0x61b5
                           0061B6   949 _ADCTEST1	=	0x61b6
                           0061B7   950 _ADCTEST2	=	0x61b7
                           0061B8   951 _MDMTEST0	=	0x61b8
                           0061B9   952 _MDMTEST1	=	0x61b9
                           0061BA   953 _DACTEST0	=	0x61ba
                           0061BB   954 _DACTEST1	=	0x61bb
                           0061BC   955 _DACTEST2	=	0x61bc
                           0061BD   956 _ATEST	=	0x61bd
                           0061BE   957 _PTEST0	=	0x61be
                           0061BF   958 _PTEST1	=	0x61bf
                           0061FA   959 _TXFILTCFG	=	0x61fa
                           0061EB   960 _RFC_OBS_CTRL0	=	0x61eb
                           0061EC   961 _RFC_OBS_CTRL1	=	0x61ec
                           0061ED   962 _RFC_OBS_CTRL2	=	0x61ed
                           0061C0   963 _CSPPROG0	=	0x61c0
                           0061C1   964 _CSPPROG1	=	0x61c1
                           0061C2   965 _CSPPROG2	=	0x61c2
                           0061C3   966 _CSPPROG3	=	0x61c3
                           0061C4   967 _CSPPROG4	=	0x61c4
                           0061C5   968 _CSPPROG5	=	0x61c5
                           0061C6   969 _CSPPROG6	=	0x61c6
                           0061C7   970 _CSPPROG7	=	0x61c7
                           0061C8   971 _CSPPROG8	=	0x61c8
                           0061C9   972 _CSPPROG9	=	0x61c9
                           0061CA   973 _CSPPROG10	=	0x61ca
                           0061CB   974 _CSPPROG11	=	0x61cb
                           0061CC   975 _CSPPROG12	=	0x61cc
                           0061CD   976 _CSPPROG13	=	0x61cd
                           0061CE   977 _CSPPROG14	=	0x61ce
                           0061CF   978 _CSPPROG15	=	0x61cf
                           0061D0   979 _CSPPROG16	=	0x61d0
                           0061D1   980 _CSPPROG17	=	0x61d1
                           0061D2   981 _CSPPROG18	=	0x61d2
                           0061D3   982 _CSPPROG19	=	0x61d3
                           0061D4   983 _CSPPROG20	=	0x61d4
                           0061D5   984 _CSPPROG21	=	0x61d5
                           0061D6   985 _CSPPROG22	=	0x61d6
                           0061D7   986 _CSPPROG23	=	0x61d7
                           0061E0   987 _CSPCTRL	=	0x61e0
                           0061E1   988 _CSPSTAT	=	0x61e1
                           0061E2   989 _CSPX	=	0x61e2
                           0061E3   990 _CSPY	=	0x61e3
                           0061E4   991 _CSPZ	=	0x61e4
                           0061E5   992 _CSPT	=	0x61e5
                           006200   993 _USBADDR	=	0x6200
                           006201   994 _USBPOW	=	0x6201
                           006202   995 _USBIIF	=	0x6202
                           006204   996 _USBOIF	=	0x6204
                           006206   997 _USBCIF	=	0x6206
                           006207   998 _USBIIE	=	0x6207
                           006209   999 _USBOIE	=	0x6209
                           00620B  1000 _USBCIE	=	0x620b
                           00620C  1001 _USBFRML	=	0x620c
                           00620D  1002 _USBFRMH	=	0x620d
                           00620E  1003 _USBINDEX	=	0x620e
                           00620F  1004 _USBCTRL	=	0x620f
                           006210  1005 _USBMAXI	=	0x6210
                           006211  1006 _USBCS0	=	0x6211
                           006211  1007 _USBCSIL	=	0x6211
                           006212  1008 _USBCSIH	=	0x6212
                           006213  1009 _USBMAXO	=	0x6213
                           006214  1010 _USBCSOL	=	0x6214
                           006215  1011 _USBCSOH	=	0x6215
                           006216  1012 _USBCNT0	=	0x6216
                           006216  1013 _USBCNTL	=	0x6216
                           006217  1014 _USBCNTH	=	0x6217
                           006220  1015 _USBF0	=	0x6220
                           006222  1016 _USBF1	=	0x6222
                           006224  1017 _USBF2	=	0x6224
                           006226  1018 _USBF3	=	0x6226
                           006228  1019 _USBF4	=	0x6228
                           00622A  1020 _USBF5	=	0x622a
                           007080  1021 _X_P0	=	0x7080
                           007086  1022 _X_U0CSR	=	0x7086
                           007089  1023 _X_P0IFG	=	0x7089
                           00708A  1024 _X_P1IFG	=	0x708a
                           00708B  1025 _X_P2IFG	=	0x708b
                           00708C  1026 _X_PICTL	=	0x708c
                           00708D  1027 _X_P1IEN	=	0x708d
                           00708F  1028 _X_P0INP	=	0x708f
                           007090  1029 _X_P1	=	0x7090
                           007091  1030 _X_RFIRQF1	=	0x7091
                           007093  1031 _X_MPAGE	=	0x7093
                           007093  1032 _X__XPAGE	=	0x7093
                           007094  1033 _X_T2CTRL	=	0x7094
                           007095  1034 _X_ST0	=	0x7095
                           007096  1035 _X_ST1	=	0x7096
                           007097  1036 _X_ST2	=	0x7097
                           00709C  1037 _X_T2EVTCFG	=	0x709c
                           00709D  1038 _X_SLEEPSTA	=	0x709d
                           00709E  1039 _X_CLKCONSTA	=	0x709e
                           00709F  1040 _X_FMAP	=	0x709f
                           00709F  1041 _X_PSBANK	=	0x709f
                           0070A0  1042 _X_P2	=	0x70a0
                           0070A1  1043 _X_T2IRQF	=	0x70a1
                           0070A2  1044 _X_T2M0	=	0x70a2
                           0070A3  1045 _X_T2M1	=	0x70a3
                           0070A4  1046 _X_T2MOVF0	=	0x70a4
                           0070A5  1047 _X_T2MOVF1	=	0x70a5
                           0070A6  1048 _X_T2MOVF2	=	0x70a6
                           0070A7  1049 _X_T2IRQM	=	0x70a7
                           0070AB  1050 _X_P0IEN	=	0x70ab
                           0070AC  1051 _X_P2IEN	=	0x70ac
                           0070AD  1052 _X_STLOAD	=	0x70ad
                           0070AE  1053 _X_PMUX	=	0x70ae
                           0070AF  1054 _X_T1STAT	=	0x70af
                           0070B1  1055 _X_ENCDI	=	0x70b1
                           0070B2  1056 _X_ENCDO	=	0x70b2
                           0070B3  1057 _X_ENCCS	=	0x70b3
                           0070B4  1058 _X_ADCCON1	=	0x70b4
                           0070B5  1059 _X_ADCCON2	=	0x70b5
                           0070B6  1060 _X_ADCCON3	=	0x70b6
                           0070BA  1061 _X_ADCL	=	0x70ba
                           0070BB  1062 _X_ADCH	=	0x70bb
                           0070BC  1063 _X_RNDL	=	0x70bc
                           0070BD  1064 _X_RNDH	=	0x70bd
                           0070BE  1065 _X_SLEEPCMD	=	0x70be
                           0070BF  1066 _X_RFERRF	=	0x70bf
                           0070C1  1067 _X_U0DBUF	=	0x70c1
                           0070C2  1068 _X_U0BAUD	=	0x70c2
                           0070C3  1069 _X_T2MSEL	=	0x70c3
                           0070C4  1070 _X_U0UCR	=	0x70c4
                           0070C5  1071 _X_U0GCR	=	0x70c5
                           0070C6  1072 _X_CLKCONCMD	=	0x70c6
                           0070C7  1073 _X_MEMCTR	=	0x70c7
                           0070C9  1074 _X_WDCTL	=	0x70c9
                           0070CA  1075 _X_T3CNT	=	0x70ca
                           0070CB  1076 _X_T3CTL	=	0x70cb
                           0070CC  1077 _X_T3CCTL0	=	0x70cc
                           0070CD  1078 _X_T3CC0	=	0x70cd
                           0070CE  1079 _X_T3CCTL1	=	0x70ce
                           0070CF  1080 _X_T3CC1	=	0x70cf
                           0070D1  1081 _X_DMAIRQ	=	0x70d1
                           0070D2  1082 _X_DMA1CFGL	=	0x70d2
                           0070D3  1083 _X_DMA1CFGH	=	0x70d3
                           0070D4  1084 _X_DMA0CFGL	=	0x70d4
                           0070D5  1085 _X_DMA0CFGH	=	0x70d5
                           0070D6  1086 _X_DMAARM	=	0x70d6
                           0070D7  1087 _X_DMAREQ	=	0x70d7
                           0070D8  1088 _X_TIMIF	=	0x70d8
                           0070D9  1089 _X_RFD	=	0x70d9
                           0070DA  1090 _X_T1CC0L	=	0x70da
                           0070DB  1091 _X_T1CC0H	=	0x70db
                           0070DC  1092 _X_T1CC1L	=	0x70dc
                           0070DD  1093 _X_T1CC1H	=	0x70dd
                           0070DE  1094 _X_T1CC2L	=	0x70de
                           0070DF  1095 _X_T1CC2H	=	0x70df
                           0070E1  1096 _X_RFST	=	0x70e1
                           0070E2  1097 _X_T1CNTL	=	0x70e2
                           0070E3  1098 _X_T1CNTH	=	0x70e3
                           0070E4  1099 _X_T1CTL	=	0x70e4
                           0070E5  1100 _X_T1CCTL0	=	0x70e5
                           0070E6  1101 _X_T1CCTL1	=	0x70e6
                           0070E7  1102 _X_T1CCTL2	=	0x70e7
                           0070E9  1103 _X_RFIRQF0	=	0x70e9
                           0070EA  1104 _X_T4CNT	=	0x70ea
                           0070EB  1105 _X_T4CTL	=	0x70eb
                           0070EC  1106 _X_T4CCTL0	=	0x70ec
                           0070ED  1107 _X_T4CC0	=	0x70ed
                           0070EE  1108 _X_T4CCTL1	=	0x70ee
                           0070EF  1109 _X_T4CC1	=	0x70ef
                           0070F1  1110 _X_PERCFG	=	0x70f1
                           0070F2  1111 _X_APCFG	=	0x70f2
                           0070F3  1112 _X_P0SEL	=	0x70f3
                           0070F4  1113 _X_P1SEL	=	0x70f4
                           0070F5  1114 _X_P2SEL	=	0x70f5
                           0070F6  1115 _X_P1INP	=	0x70f6
                           0070F7  1116 _X_P2INP	=	0x70f7
                           0070F8  1117 _X_U1CSR	=	0x70f8
                           0070F9  1118 _X_U1DBUF	=	0x70f9
                           0070FA  1119 _X_U1BAUD	=	0x70fa
                           0070FB  1120 _X_U1UCR	=	0x70fb
                           0070FC  1121 _X_U1GCR	=	0x70fc
                           0070FD  1122 _X_P0DIR	=	0x70fd
                           0070FE  1123 _X_P1DIR	=	0x70fe
                           0070FF  1124 _X_P2DIR	=	0x70ff
                           007800  1125 _X_INFOPAGE	=	0x7800
                           00780C  1126 _X_IEEE_ADDR	=	0x780c
      000000                       1127 _elfloader_unknown::
      000000                       1128 	.ds 30
      00001E                       1129 _elfloader_autostart_processes::
      00001E                       1130 	.ds 3
      000021                       1131 _bss:
      000021                       1132 	.ds 6
      000027                       1133 _data:
      000027                       1134 	.ds 6
      00002D                       1135 _rodata:
      00002D                       1136 	.ds 6
      000033                       1137 _text:
      000033                       1138 	.ds 6
                                   1139 ;--------------------------------------------------------
                                   1140 ; absolute external ram data
                                   1141 ;--------------------------------------------------------
                                   1142 	.area XABS    (ABS,XDATA)
                                   1143 ;--------------------------------------------------------
                                   1144 ; external initialized ram data
                                   1145 ;--------------------------------------------------------
                                   1146 	.area XISEG   (XDATA)
                                   1147 	.area HOME    (CODE)
                                   1148 	.area GSINIT0 (CODE)
                                   1149 	.area GSINIT1 (CODE)
                                   1150 	.area GSINIT2 (CODE)
                                   1151 	.area GSINIT3 (CODE)
                                   1152 	.area GSINIT4 (CODE)
                                   1153 	.area GSINIT5 (CODE)
                                   1154 	.area GSINIT  (CODE)
                                   1155 	.area GSFINAL (CODE)
                                   1156 	.area CSEG    (CODE)
                                   1157 ;--------------------------------------------------------
                                   1158 ; global & static initialisations
                                   1159 ;--------------------------------------------------------
                                   1160 	.area HOME    (CODE)
                                   1161 	.area GSINIT  (CODE)
                                   1162 	.area GSFINAL (CODE)
                                   1163 	.area GSINIT  (CODE)
                                   1164 ;--------------------------------------------------------
                                   1165 ; Home
                                   1166 ;--------------------------------------------------------
                                   1167 	.area HOME    (CODE)
                                   1168 	.area HOME    (CODE)
                                   1169 ;--------------------------------------------------------
                                   1170 ; code
                                   1171 ;--------------------------------------------------------
                                   1172 	.area BANK1   (CODE)
                                   1173 ;------------------------------------------------------------
                                   1174 ;Allocation info for local variables in function 'seek_read'
                                   1175 ;------------------------------------------------------------
                                   1176 ;offset                    Allocated to stack - sp -4
                                   1177 ;buf                       Allocated to stack - sp -7
                                   1178 ;len                       Allocated to stack - sp -9
                                   1179 ;fd                        Allocated to registers r6 r7 
                                   1180 ;------------------------------------------------------------
                                   1181 ;	../../../../core/loader/elfloader.c:149: seek_read(int fd, unsigned int offset, char *buf, int len)
                                   1182 ;	-----------------------------------------
                                   1183 ;	 function seek_read
                                   1184 ;	-----------------------------------------
      000000                       1185 _seek_read:
                           000007  1186 	ar7 = 0x07
                           000006  1187 	ar6 = 0x06
                           000005  1188 	ar5 = 0x05
                           000004  1189 	ar4 = 0x04
                           000003  1190 	ar3 = 0x03
                           000002  1191 	ar2 = 0x02
                           000001  1192 	ar1 = 0x01
                           000000  1193 	ar0 = 0x00
      000000 AE 82            [24] 1194 	mov	r6,dpl
      000002 AF 83            [24] 1195 	mov	r7,dph
                                   1196 ;	../../../../core/loader/elfloader.c:151: cfs_seek(fd, offset, CFS_SEEK_SET);
      000004 C0 07            [24] 1197 	push	ar7
      000006 C0 06            [24] 1198 	push	ar6
      000008 E4               [12] 1199 	clr	a
      000009 C0 E0            [24] 1200 	push	acc
      00000B C0 E0            [24] 1201 	push	acc
      00000D E5 81            [12] 1202 	mov	a,sp
      00000F 24 F8            [12] 1203 	add	a,#0xf8
      000011 F8               [12] 1204 	mov	r0,a
      000012 E6               [12] 1205 	mov	a,@r0
      000013 C0 E0            [24] 1206 	push	acc
      000015 08               [12] 1207 	inc	r0
      000016 E6               [12] 1208 	mov	a,@r0
      000017 C0 E0            [24] 1209 	push	acc
      000019 8E 82            [24] 1210 	mov	dpl,r6
      00001B 8F 83            [24] 1211 	mov	dph,r7
      00001D 78r00            [12] 1212 	mov	r0,#_cfs_seek
      00001F 79s00            [12] 1213 	mov	r1,#(_cfs_seek >> 8)
      000021 7As00            [12] 1214 	mov	r2,#(_cfs_seek >> 16)
      000023 12r00r00         [24] 1215 	lcall	__sdcc_banked_call
      000026 E5 81            [12] 1216 	mov	a,sp
      000028 24 FC            [12] 1217 	add	a,#0xfc
      00002A F5 81            [12] 1218 	mov	sp,a
      00002C D0 06            [24] 1219 	pop	ar6
      00002E D0 07            [24] 1220 	pop	ar7
                                   1221 ;	../../../../core/loader/elfloader.c:152: cfs_read(fd, buf, len);
      000030 E5 81            [12] 1222 	mov	a,sp
      000032 24 F9            [12] 1223 	add	a,#0xf9
      000034 F8               [12] 1224 	mov	r0,a
      000035 86 03            [24] 1225 	mov	ar3,@r0
      000037 08               [12] 1226 	inc	r0
      000038 86 04            [24] 1227 	mov	ar4,@r0
      00003A 08               [12] 1228 	inc	r0
      00003B 86 05            [24] 1229 	mov	ar5,@r0
      00003D E5 81            [12] 1230 	mov	a,sp
      00003F 24 F7            [12] 1231 	add	a,#0xf7
      000041 F8               [12] 1232 	mov	r0,a
      000042 E6               [12] 1233 	mov	a,@r0
      000043 C0 E0            [24] 1234 	push	acc
      000045 08               [12] 1235 	inc	r0
      000046 E6               [12] 1236 	mov	a,@r0
      000047 C0 E0            [24] 1237 	push	acc
      000049 C0 03            [24] 1238 	push	ar3
      00004B C0 04            [24] 1239 	push	ar4
      00004D C0 05            [24] 1240 	push	ar5
      00004F 8E 82            [24] 1241 	mov	dpl,r6
      000051 8F 83            [24] 1242 	mov	dph,r7
      000053 78r00            [12] 1243 	mov	r0,#_cfs_read
      000055 79s00            [12] 1244 	mov	r1,#(_cfs_read >> 8)
      000057 7As00            [12] 1245 	mov	r2,#(_cfs_read >> 16)
      000059 12r00r00         [24] 1246 	lcall	__sdcc_banked_call
      00005C E5 81            [12] 1247 	mov	a,sp
      00005E 24 FB            [12] 1248 	add	a,#0xfb
      000060 F5 81            [12] 1249 	mov	sp,a
      000062 02r00r00         [24] 1250 	ljmp	__sdcc_banked_ret
                                   1251 ;------------------------------------------------------------
                                   1252 ;Allocation info for local variables in function 'find_local_symbol'
                                   1253 ;------------------------------------------------------------
                                   1254 ;symbol                    Allocated to stack - sp -64
                                   1255 ;symtab                    Allocated to stack - sp -66
                                   1256 ;symtabsize                Allocated to stack - sp -68
                                   1257 ;strtab                    Allocated to stack - sp -70
                                   1258 ;fd                        Allocated to stack - sp -58
                                   1259 ;s                         Allocated to stack - sp -45
                                   1260 ;a                         Allocated to registers r4 r5 
                                   1261 ;name                      Allocated to stack - sp -29
                                   1262 ;sect                      Allocated to registers r5 r6 r7 
                                   1263 ;sloc0                     Allocated to stack - sp -56
                                   1264 ;sloc1                     Allocated to stack - sp -54
                                   1265 ;sloc2                     Allocated to stack - sp -50
                                   1266 ;sloc3                     Allocated to stack - sp -49
                                   1267 ;sloc4                     Allocated to stack - sp -46
                                   1268 ;------------------------------------------------------------
                                   1269 ;	../../../../core/loader/elfloader.c:176: find_local_symbol(int fd, const char *symbol,
                                   1270 ;	-----------------------------------------
                                   1271 ;	 function find_local_symbol
                                   1272 ;	-----------------------------------------
      000065                       1273 _find_local_symbol:
      000065 C0 82            [24] 1274 	push	dpl
      000067 C0 83            [24] 1275 	push	dph
      000069 E5 81            [12] 1276 	mov	a,sp
      00006B 24 39            [12] 1277 	add	a,#0x39
                                   1278 ;	../../../../core/loader/elfloader.c:185: for(a = symtab; a < symtab + symtabsize; a += sizeof(s)) {
      00006D F5 81            [12] 1279 	mov	sp,a
      00006F 24 BE            [12] 1280 	add	a,#0xbe
      000071 F8               [12] 1281 	mov	r0,a
      000072 86 04            [24] 1282 	mov	ar4,@r0
      000074 08               [12] 1283 	inc	r0
      000075 86 05            [24] 1284 	mov	ar5,@r0
      000077 E5 81            [12] 1285 	mov	a,sp
      000079 24 D2            [12] 1286 	add	a,#0xd2
      00007B F8               [12] 1287 	mov	r0,a
      00007C E5 81            [12] 1288 	mov	a,sp
      00007E 24 E3            [12] 1289 	add	a,#0xE3
      000080 F6               [12] 1290 	mov	@r0,a
      000081 E5 81            [12] 1291 	mov	a,sp
      000083 24 D2            [12] 1292 	add	a,#0xd2
      000085 F8               [12] 1293 	mov	r0,a
      000086 E5 81            [12] 1294 	mov	a,sp
      000088 24 CE            [12] 1295 	add	a,#0xce
      00008A F9               [12] 1296 	mov	r1,a
      00008B E6               [12] 1297 	mov	a,@r0
      00008C F7               [12] 1298 	mov	@r1,a
      00008D E5 81            [12] 1299 	mov	a,sp
      00008F 24 BC            [12] 1300 	add	a,#0xbc
      000091 F8               [12] 1301 	mov	r0,a
      000092 E5 81            [12] 1302 	mov	a,sp
      000094 24 C8            [12] 1303 	add	a,#0xc8
      000096 F9               [12] 1304 	mov	r1,a
      000097 E6               [12] 1305 	mov	a,@r0
      000098 2C               [12] 1306 	add	a,r4
      000099 F7               [12] 1307 	mov	@r1,a
      00009A 08               [12] 1308 	inc	r0
      00009B E6               [12] 1309 	mov	a,@r0
      00009C 3D               [12] 1310 	addc	a,r5
      00009D 09               [12] 1311 	inc	r1
      00009E F7               [12] 1312 	mov	@r1,a
      00009F                       1313 00116$:
      00009F E5 81            [12] 1314 	mov	a,sp
      0000A1 24 C8            [12] 1315 	add	a,#0xc8
      0000A3 F8               [12] 1316 	mov	r0,a
      0000A4 C3               [12] 1317 	clr	c
      0000A5 EC               [12] 1318 	mov	a,r4
      0000A6 96               [12] 1319 	subb	a,@r0
      0000A7 ED               [12] 1320 	mov	a,r5
      0000A8 08               [12] 1321 	inc	r0
      0000A9 96               [12] 1322 	subb	a,@r0
      0000AA 40 03            [24] 1323 	jc	00141$
      0000AC 02r02r7E         [24] 1324 	ljmp	00114$
      0000AF                       1325 00141$:
                                   1326 ;	../../../../core/loader/elfloader.c:186: seek_read(fd, a, (char *)&s, sizeof(s));
      0000AF E5 81            [12] 1327 	mov	a,sp
      0000B1 24 D3            [12] 1328 	add	a,#0xD3
      0000B3 F9               [12] 1329 	mov	r1,a
      0000B4 FA               [12] 1330 	mov	r2,a
      0000B5 7E 00            [12] 1331 	mov	r6,#0x00
      0000B7 7F 40            [12] 1332 	mov	r7,#0x40
      0000B9 C0 05            [24] 1333 	push	ar5
      0000BB C0 04            [24] 1334 	push	ar4
      0000BD C0 01            [24] 1335 	push	ar1
      0000BF 74 10            [12] 1336 	mov	a,#0x10
      0000C1 C0 E0            [24] 1337 	push	acc
      0000C3 E4               [12] 1338 	clr	a
      0000C4 C0 E0            [24] 1339 	push	acc
      0000C6 C0 02            [24] 1340 	push	ar2
      0000C8 C0 06            [24] 1341 	push	ar6
      0000CA C0 07            [24] 1342 	push	ar7
      0000CC C0 04            [24] 1343 	push	ar4
      0000CE C0 05            [24] 1344 	push	ar5
      0000D0 E5 81            [12] 1345 	mov	a,sp
      0000D2 24 BC            [12] 1346 	add	a,#0xbc
      0000D4 F8               [12] 1347 	mov	r0,a
      0000D5 86 82            [24] 1348 	mov	dpl,@r0
      0000D7 08               [12] 1349 	inc	r0
      0000D8 86 83            [24] 1350 	mov	dph,@r0
      0000DA 78r00            [12] 1351 	mov	r0,#_seek_read
      0000DC 79s00            [12] 1352 	mov	r1,#(_seek_read >> 8)
      0000DE 7As00            [12] 1353 	mov	r2,#(_seek_read >> 16)
      0000E0 12r00r00         [24] 1354 	lcall	__sdcc_banked_call
      0000E3 E5 81            [12] 1355 	mov	a,sp
      0000E5 24 F9            [12] 1356 	add	a,#0xf9
      0000E7 F5 81            [12] 1357 	mov	sp,a
      0000E9 D0 01            [24] 1358 	pop	ar1
      0000EB D0 04            [24] 1359 	pop	ar4
      0000ED D0 05            [24] 1360 	pop	ar5
                                   1361 ;	../../../../core/loader/elfloader.c:188: if(s.st_name != 0) {
      0000EF E5 81            [12] 1362 	mov	a,sp
      0000F1 24 CA            [12] 1363 	add	a,#0xca
      0000F3 F8               [12] 1364 	mov	r0,a
      0000F4 E7               [12] 1365 	mov	a,@r1
      0000F5 F6               [12] 1366 	mov	@r0,a
      0000F6 09               [12] 1367 	inc	r1
      0000F7 E7               [12] 1368 	mov	a,@r1
      0000F8 08               [12] 1369 	inc	r0
      0000F9 F6               [12] 1370 	mov	@r0,a
      0000FA 09               [12] 1371 	inc	r1
      0000FB E7               [12] 1372 	mov	a,@r1
      0000FC 08               [12] 1373 	inc	r0
      0000FD F6               [12] 1374 	mov	@r0,a
      0000FE 09               [12] 1375 	inc	r1
      0000FF E7               [12] 1376 	mov	a,@r1
      000100 08               [12] 1377 	inc	r0
      000101 F6               [12] 1378 	mov	@r0,a
      000102 19               [12] 1379 	dec	r1
      000103 19               [12] 1380 	dec	r1
      000104 19               [12] 1381 	dec	r1
      000105 E5 81            [12] 1382 	mov	a,sp
      000107 24 CA            [12] 1383 	add	a,#0xca
      000109 F8               [12] 1384 	mov	r0,a
      00010A E6               [12] 1385 	mov	a,@r0
      00010B 08               [12] 1386 	inc	r0
      00010C 46               [12] 1387 	orl	a,@r0
      00010D 08               [12] 1388 	inc	r0
      00010E 46               [12] 1389 	orl	a,@r0
      00010F 08               [12] 1390 	inc	r0
      000110 46               [12] 1391 	orl	a,@r0
      000111 70 03            [24] 1392 	jnz	00142$
      000113 02r02r74         [24] 1393 	ljmp	00117$
      000116                       1394 00142$:
                                   1395 ;	../../../../core/loader/elfloader.c:189: seek_read(fd, strtab + s.st_name, name, sizeof(name));
      000116 C0 01            [24] 1396 	push	ar1
      000118 E5 81            [12] 1397 	mov	a,sp
      00011A 24 D1            [12] 1398 	add	a,#0xd1
      00011C F8               [12] 1399 	mov	r0,a
      00011D C0 01            [24] 1400 	push	ar1
      00011F E5 81            [12] 1401 	mov	a,sp
      000121 24 CD            [12] 1402 	add	a,#0xcd
      000123 F9               [12] 1403 	mov	r1,a
      000124 E6               [12] 1404 	mov	a,@r0
      000125 F7               [12] 1405 	mov	@r1,a
      000126 09               [12] 1406 	inc	r1
      000127 77 00            [12] 1407 	mov	@r1,#0x00
      000129 09               [12] 1408 	inc	r1
      00012A 77 40            [12] 1409 	mov	@r1,#0x40
      00012C D0 01            [24] 1410 	pop	ar1
      00012E E5 81            [12] 1411 	mov	a,sp
      000130 24 B9            [12] 1412 	add	a,#0xb9
      000132 F8               [12] 1413 	mov	r0,a
      000133 86 02            [24] 1414 	mov	ar2,@r0
      000135 08               [12] 1415 	inc	r0
      000136 86 03            [24] 1416 	mov	ar3,@r0
      000138 E4               [12] 1417 	clr	a
      000139 FE               [12] 1418 	mov	r6,a
      00013A FF               [12] 1419 	mov	r7,a
      00013B E5 81            [12] 1420 	mov	a,sp
      00013D 24 C9            [12] 1421 	add	a,#0xc9
      00013F F8               [12] 1422 	mov	r0,a
      000140 E6               [12] 1423 	mov	a,@r0
      000141 2A               [12] 1424 	add	a,r2
      000142 FA               [12] 1425 	mov	r2,a
      000143 08               [12] 1426 	inc	r0
      000144 E6               [12] 1427 	mov	a,@r0
      000145 3B               [12] 1428 	addc	a,r3
      000146 FB               [12] 1429 	mov	r3,a
      000147 08               [12] 1430 	inc	r0
      000148 E6               [12] 1431 	mov	a,@r0
      000149 3E               [12] 1432 	addc	a,r6
      00014A 08               [12] 1433 	inc	r0
      00014B E6               [12] 1434 	mov	a,@r0
      00014C 3F               [12] 1435 	addc	a,r7
      00014D C0 05            [24] 1436 	push	ar5
      00014F C0 04            [24] 1437 	push	ar4
      000151 C0 01            [24] 1438 	push	ar1
      000153 74 1E            [12] 1439 	mov	a,#0x1E
      000155 C0 E0            [24] 1440 	push	acc
      000157 E4               [12] 1441 	clr	a
      000158 C0 E0            [24] 1442 	push	acc
      00015A E5 81            [12] 1443 	mov	a,sp
      00015C 24 C9            [12] 1444 	add	a,#0xc9
      00015E F8               [12] 1445 	mov	r0,a
      00015F E6               [12] 1446 	mov	a,@r0
      000160 C0 E0            [24] 1447 	push	acc
      000162 08               [12] 1448 	inc	r0
      000163 E6               [12] 1449 	mov	a,@r0
      000164 C0 E0            [24] 1450 	push	acc
      000166 08               [12] 1451 	inc	r0
      000167 E6               [12] 1452 	mov	a,@r0
      000168 C0 E0            [24] 1453 	push	acc
      00016A C0 02            [24] 1454 	push	ar2
      00016C C0 03            [24] 1455 	push	ar3
      00016E E5 81            [12] 1456 	mov	a,sp
      000170 24 BB            [12] 1457 	add	a,#0xbb
      000172 F8               [12] 1458 	mov	r0,a
      000173 86 82            [24] 1459 	mov	dpl,@r0
      000175 08               [12] 1460 	inc	r0
      000176 86 83            [24] 1461 	mov	dph,@r0
      000178 78r00            [12] 1462 	mov	r0,#_seek_read
      00017A 79s00            [12] 1463 	mov	r1,#(_seek_read >> 8)
      00017C 7As00            [12] 1464 	mov	r2,#(_seek_read >> 16)
      00017E 12r00r00         [24] 1465 	lcall	__sdcc_banked_call
      000181 E5 81            [12] 1466 	mov	a,sp
      000183 24 F9            [12] 1467 	add	a,#0xf9
      000185 F5 81            [12] 1468 	mov	sp,a
      000187 D0 01            [24] 1469 	pop	ar1
      000189 D0 04            [24] 1470 	pop	ar4
      00018B D0 05            [24] 1471 	pop	ar5
                                   1472 ;	../../../../core/loader/elfloader.c:190: if(strcmp(name, symbol) == 0) {
      00018D E5 81            [12] 1473 	mov	a,sp
      00018F 24 CD            [12] 1474 	add	a,#0xcd
      000191 F8               [12] 1475 	mov	r0,a
      000192 86 02            [24] 1476 	mov	ar2,@r0
      000194 7E 00            [12] 1477 	mov	r6,#0x00
      000196 7F 40            [12] 1478 	mov	r7,#0x40
      000198 C0 05            [24] 1479 	push	ar5
      00019A C0 04            [24] 1480 	push	ar4
      00019C C0 01            [24] 1481 	push	ar1
      00019E E5 81            [12] 1482 	mov	a,sp
      0001A0 24 BC            [12] 1483 	add	a,#0xbc
      0001A2 F8               [12] 1484 	mov	r0,a
      0001A3 E6               [12] 1485 	mov	a,@r0
      0001A4 C0 E0            [24] 1486 	push	acc
      0001A6 08               [12] 1487 	inc	r0
      0001A7 E6               [12] 1488 	mov	a,@r0
      0001A8 C0 E0            [24] 1489 	push	acc
      0001AA 08               [12] 1490 	inc	r0
      0001AB E6               [12] 1491 	mov	a,@r0
      0001AC C0 E0            [24] 1492 	push	acc
      0001AE 8A 82            [24] 1493 	mov	dpl,r2
      0001B0 8E 83            [24] 1494 	mov	dph,r6
      0001B2 8F F0            [24] 1495 	mov	b,r7
      0001B4 78r00            [12] 1496 	mov	r0,#_strcmp
      0001B6 79s00            [12] 1497 	mov	r1,#(_strcmp >> 8)
      0001B8 7As00            [12] 1498 	mov	r2,#(_strcmp >> 16)
      0001BA 12r00r00         [24] 1499 	lcall	__sdcc_banked_call
      0001BD AE 82            [24] 1500 	mov	r6,dpl
      0001BF AF 83            [24] 1501 	mov	r7,dph
      0001C1 15 81            [12] 1502 	dec	sp
      0001C3 15 81            [12] 1503 	dec	sp
      0001C5 15 81            [12] 1504 	dec	sp
      0001C7 D0 01            [24] 1505 	pop	ar1
      0001C9 D0 04            [24] 1506 	pop	ar4
      0001CB D0 05            [24] 1507 	pop	ar5
      0001CD D0 01            [24] 1508 	pop	ar1
      0001CF EE               [12] 1509 	mov	a,r6
      0001D0 4F               [12] 1510 	orl	a,r7
      0001D1 60 03            [24] 1511 	jz	00143$
      0001D3 02r02r74         [24] 1512 	ljmp	00117$
      0001D6                       1513 00143$:
                                   1514 ;	../../../../core/loader/elfloader.c:191: if(s.st_shndx == bss.number) {
      0001D6 74 0E            [12] 1515 	mov	a,#0x0E
      0001D8 29               [12] 1516 	add	a,r1
      0001D9 F8               [12] 1517 	mov	r0,a
      0001DA 86 06            [24] 1518 	mov	ar6,@r0
      0001DC 08               [12] 1519 	inc	r0
      0001DD 86 07            [24] 1520 	mov	ar7,@r0
      0001DF 90r00r21         [24] 1521 	mov	dptr,#_bss
      0001E2 E0               [24] 1522 	movx	a,@dptr
      0001E3 FB               [12] 1523 	mov	r3,a
      0001E4 7A 00            [12] 1524 	mov	r2,#0x00
      0001E6 EE               [12] 1525 	mov	a,r6
      0001E7 B5 03 0C         [24] 1526 	cjne	a,ar3,00108$
      0001EA EF               [12] 1527 	mov	a,r7
      0001EB B5 02 08         [24] 1528 	cjne	a,ar2,00108$
                                   1529 ;	../../../../core/loader/elfloader.c:192: sect = &bss;
      0001EE 7Dr21            [12] 1530 	mov	r5,#_bss
      0001F0 7Es00            [12] 1531 	mov	r6,#(_bss >> 8)
      0001F2 7F 00            [12] 1532 	mov	r7,#0x00
      0001F4 80 36            [24] 1533 	sjmp	00109$
      0001F6                       1534 00108$:
                                   1535 ;	../../../../core/loader/elfloader.c:193: } else if(s.st_shndx == data.number) {
      0001F6 90r00r27         [24] 1536 	mov	dptr,#_data
      0001F9 E0               [24] 1537 	movx	a,@dptr
      0001FA FB               [12] 1538 	mov	r3,a
      0001FB 7A 00            [12] 1539 	mov	r2,#0x00
      0001FD EE               [12] 1540 	mov	a,r6
      0001FE B5 03 0C         [24] 1541 	cjne	a,ar3,00105$
      000201 EF               [12] 1542 	mov	a,r7
      000202 B5 02 08         [24] 1543 	cjne	a,ar2,00105$
                                   1544 ;	../../../../core/loader/elfloader.c:194: sect = &data;
      000205 7Dr27            [12] 1545 	mov	r5,#_data
      000207 7Es00            [12] 1546 	mov	r6,#(_data >> 8)
      000209 7F 00            [12] 1547 	mov	r7,#0x00
      00020B 80 1F            [24] 1548 	sjmp	00109$
      00020D                       1549 00105$:
                                   1550 ;	../../../../core/loader/elfloader.c:195: } else if(s.st_shndx == text.number) {
      00020D 90r00r33         [24] 1551 	mov	dptr,#_text
      000210 E0               [24] 1552 	movx	a,@dptr
      000211 FB               [12] 1553 	mov	r3,a
      000212 7A 00            [12] 1554 	mov	r2,#0x00
      000214 EE               [12] 1555 	mov	a,r6
      000215 B5 03 0C         [24] 1556 	cjne	a,ar3,00102$
      000218 EF               [12] 1557 	mov	a,r7
      000219 B5 02 08         [24] 1558 	cjne	a,ar2,00102$
                                   1559 ;	../../../../core/loader/elfloader.c:196: sect = &text;
      00021C 7Dr33            [12] 1560 	mov	r5,#_text
      00021E 7Es00            [12] 1561 	mov	r6,#(_text >> 8)
      000220 7F 00            [12] 1562 	mov	r7,#0x00
      000222 80 08            [24] 1563 	sjmp	00109$
      000224                       1564 00102$:
                                   1565 ;	../../../../core/loader/elfloader.c:198: return NULL;
      000224 90 00 00         [24] 1566 	mov	dptr,#0x0000
      000227 75 F0 00         [24] 1567 	mov	b,#0x00
      00022A 80 58            [24] 1568 	sjmp	00118$
      00022C                       1569 00109$:
                                   1570 ;	../../../../core/loader/elfloader.c:200: return &(sect->address[s.st_value]);
      00022C 74 03            [12] 1571 	mov	a,#0x03
      00022E 2D               [12] 1572 	add	a,r5
      00022F FB               [12] 1573 	mov	r3,a
      000230 E4               [12] 1574 	clr	a
      000231 3E               [12] 1575 	addc	a,r6
      000232 FE               [12] 1576 	mov	r6,a
      000233 8B 82            [24] 1577 	mov	dpl,r3
      000235 8E 83            [24] 1578 	mov	dph,r6
      000237 8F F0            [24] 1579 	mov	b,r7
      000239 E5 81            [12] 1580 	mov	a,sp
      00023B 24 CF            [12] 1581 	add	a,#0xcf
      00023D F8               [12] 1582 	mov	r0,a
      00023E 12r00r00         [24] 1583 	lcall	__gptrget
      000241 F6               [12] 1584 	mov	@r0,a
      000242 A3               [24] 1585 	inc	dptr
      000243 12r00r00         [24] 1586 	lcall	__gptrget
      000246 08               [12] 1587 	inc	r0
      000247 F6               [12] 1588 	mov	@r0,a
      000248 A3               [24] 1589 	inc	dptr
      000249 12r00r00         [24] 1590 	lcall	__gptrget
      00024C 08               [12] 1591 	inc	r0
      00024D F6               [12] 1592 	mov	@r0,a
      00024E E9               [12] 1593 	mov	a,r1
      00024F 24 04            [12] 1594 	add	a,#0x04
      000251 F9               [12] 1595 	mov	r1,a
      000252 87 02            [24] 1596 	mov	ar2,@r1
      000254 09               [12] 1597 	inc	r1
      000255 87 03            [24] 1598 	mov	ar3,@r1
      000257 09               [12] 1599 	inc	r1
      000258 87 06            [24] 1600 	mov	ar6,@r1
      00025A 09               [12] 1601 	inc	r1
      00025B 87 07            [24] 1602 	mov	ar7,@r1
      00025D E5 81            [12] 1603 	mov	a,sp
      00025F 24 CF            [12] 1604 	add	a,#0xcf
      000261 F8               [12] 1605 	mov	r0,a
      000262 EA               [12] 1606 	mov	a,r2
      000263 26               [12] 1607 	add	a,@r0
      000264 FA               [12] 1608 	mov	r2,a
      000265 EB               [12] 1609 	mov	a,r3
      000266 08               [12] 1610 	inc	r0
      000267 36               [12] 1611 	addc	a,@r0
      000268 FB               [12] 1612 	mov	r3,a
      000269 08               [12] 1613 	inc	r0
      00026A 86 06            [24] 1614 	mov	ar6,@r0
      00026C 8A 82            [24] 1615 	mov	dpl,r2
      00026E 8B 83            [24] 1616 	mov	dph,r3
      000270 8E F0            [24] 1617 	mov	b,r6
      000272 80 10            [24] 1618 	sjmp	00118$
      000274                       1619 00117$:
                                   1620 ;	../../../../core/loader/elfloader.c:185: for(a = symtab; a < symtab + symtabsize; a += sizeof(s)) {
      000274 74 10            [12] 1621 	mov	a,#0x10
      000276 2C               [12] 1622 	add	a,r4
      000277 FC               [12] 1623 	mov	r4,a
      000278 E4               [12] 1624 	clr	a
      000279 3D               [12] 1625 	addc	a,r5
      00027A FD               [12] 1626 	mov	r5,a
      00027B 02r00r9F         [24] 1627 	ljmp	00116$
      00027E                       1628 00114$:
                                   1629 ;	../../../../core/loader/elfloader.c:204: return NULL;
      00027E 90 00 00         [24] 1630 	mov	dptr,#0x0000
      000281 75 F0 00         [24] 1631 	mov	b,#0x00
      000284                       1632 00118$:
      000284 E5 81            [12] 1633 	mov	a,sp
      000286 24 C5            [12] 1634 	add	a,#0xC5
      000288 F5 81            [12] 1635 	mov	sp,a
      00028A 02r00r00         [24] 1636 	ljmp	__sdcc_banked_ret
                                   1637 ;------------------------------------------------------------
                                   1638 ;Allocation info for local variables in function 'relocate_section'
                                   1639 ;------------------------------------------------------------
                                   1640 ;section                   Allocated to stack - sp -86
                                   1641 ;size                      Allocated to stack - sp -88
                                   1642 ;sectionaddr               Allocated to stack - sp -90
                                   1643 ;sectionbase               Allocated to stack - sp -93
                                   1644 ;strs                      Allocated to stack - sp -95
                                   1645 ;strtab                    Allocated to stack - sp -97
                                   1646 ;symtab                    Allocated to stack - sp -99
                                   1647 ;symtabsize                Allocated to stack - sp -101
                                   1648 ;using_relas               Allocated to stack - sp -102
                                   1649 ;fd                        Allocated to stack - sp -81
                                   1650 ;rela                      Allocated to stack - sp -64
                                   1651 ;rel_size                  Allocated to stack - sp -52
                                   1652 ;s                         Allocated to stack - sp -50
                                   1653 ;a                         Allocated to stack - sp -34
                                   1654 ;name                      Allocated to stack - sp -32
                                   1655 ;addr                      Allocated to stack - sp -2
                                   1656 ;sect                      Allocated to registers r2 r3 r4 
                                   1657 ;sloc0                     Allocated to stack - sp -79
                                   1658 ;sloc1                     Allocated to stack - sp -9
                                   1659 ;sloc2                     Allocated to stack - sp -77
                                   1660 ;sloc3                     Allocated to stack - sp -74
                                   1661 ;sloc4                     Allocated to stack - sp -70
                                   1662 ;sloc5                     Allocated to stack - sp -69
                                   1663 ;sloc6                     Allocated to stack - sp -68
                                   1664 ;------------------------------------------------------------
                                   1665 ;	../../../../core/loader/elfloader.c:208: relocate_section(int fd,
                                   1666 ;	-----------------------------------------
                                   1667 ;	 function relocate_section
                                   1668 ;	-----------------------------------------
      00028D                       1669 _relocate_section:
      00028D C0 82            [24] 1670 	push	dpl
      00028F C0 83            [24] 1671 	push	dph
      000291 E5 81            [12] 1672 	mov	a,sp
      000293 24 50            [12] 1673 	add	a,#0x50
                                   1674 ;	../../../../core/loader/elfloader.c:227: if(using_relas) {
      000295 F5 81            [12] 1675 	mov	sp,a
      000297 24 9A            [12] 1676 	add	a,#0x9a
      000299 F8               [12] 1677 	mov	r0,a
      00029A E6               [12] 1678 	mov	a,@r0
      00029B 60 0C            [24] 1679 	jz	00102$
                                   1680 ;	../../../../core/loader/elfloader.c:228: rel_size = sizeof(struct elf32_rela);
      00029D E5 81            [12] 1681 	mov	a,sp
      00029F 24 CC            [12] 1682 	add	a,#0xcc
      0002A1 F8               [12] 1683 	mov	r0,a
      0002A2 76 0C            [12] 1684 	mov	@r0,#0x0C
      0002A4 08               [12] 1685 	inc	r0
      0002A5 76 00            [12] 1686 	mov	@r0,#0x00
      0002A7 80 0A            [24] 1687 	sjmp	00103$
      0002A9                       1688 00102$:
                                   1689 ;	../../../../core/loader/elfloader.c:230: rel_size = sizeof(struct elf32_rel);
      0002A9 E5 81            [12] 1690 	mov	a,sp
      0002AB 24 CC            [12] 1691 	add	a,#0xcc
      0002AD F8               [12] 1692 	mov	r0,a
      0002AE 76 08            [12] 1693 	mov	@r0,#0x08
      0002B0 08               [12] 1694 	inc	r0
      0002B1 76 00            [12] 1695 	mov	@r0,#0x00
      0002B3                       1696 00103$:
                                   1697 ;	../../../../core/loader/elfloader.c:233: for(a = section; a < section + size; a += rel_size) {
      0002B3 E5 81            [12] 1698 	mov	a,sp
      0002B5 24 AA            [12] 1699 	add	a,#0xaa
      0002B7 F8               [12] 1700 	mov	r0,a
      0002B8 E5 81            [12] 1701 	mov	a,sp
      0002BA 24 DE            [12] 1702 	add	a,#0xde
      0002BC F9               [12] 1703 	mov	r1,a
      0002BD E6               [12] 1704 	mov	a,@r0
      0002BE F7               [12] 1705 	mov	@r1,a
      0002BF 08               [12] 1706 	inc	r0
      0002C0 09               [12] 1707 	inc	r1
      0002C1 E6               [12] 1708 	mov	a,@r0
      0002C2 F7               [12] 1709 	mov	@r1,a
      0002C3 E5 81            [12] 1710 	mov	a,sp
      0002C5 24 BA            [12] 1711 	add	a,#0xba
      0002C7 F8               [12] 1712 	mov	r0,a
      0002C8 E5 81            [12] 1713 	mov	a,sp
      0002CA 24 CE            [12] 1714 	add	a,#0xCE
      0002CC F6               [12] 1715 	mov	@r0,a
      0002CD E5 81            [12] 1716 	mov	a,sp
      0002CF 24 BA            [12] 1717 	add	a,#0xba
      0002D1 F9               [12] 1718 	mov	r1,a
      0002D2 74 0E            [12] 1719 	mov	a,#0x0E
      0002D4 27               [12] 1720 	add	a,@r1
      0002D5 F8               [12] 1721 	mov	r0,a
      0002D6 E5 81            [12] 1722 	mov	a,sp
      0002D8 24 DE            [12] 1723 	add	a,#0xde
      0002DA F9               [12] 1724 	mov	r1,a
      0002DB C0 00            [24] 1725 	push	ar0
      0002DD E5 81            [12] 1726 	mov	a,sp
      0002DF 24 A7            [12] 1727 	add	a,#0xa7
      0002E1 F8               [12] 1728 	mov	r0,a
      0002E2 E6               [12] 1729 	mov	a,@r0
      0002E3 27               [12] 1730 	add	a,@r1
      0002E4 C0 E0            [24] 1731 	push	acc
      0002E6 08               [12] 1732 	inc	r0
      0002E7 E6               [12] 1733 	mov	a,@r0
      0002E8 09               [12] 1734 	inc	r1
      0002E9 37               [12] 1735 	addc	a,@r1
      0002EA C0 E0            [24] 1736 	push	acc
      0002EC E5 81            [12] 1737 	mov	a,sp
      0002EE 24 AF            [12] 1738 	add	a,#0xaf
      0002F0 F9               [12] 1739 	mov	r1,a
      0002F1 D0 E0            [24] 1740 	pop	acc
      0002F3 F7               [12] 1741 	mov	@r1,a
      0002F4 19               [12] 1742 	dec	r1
      0002F5 D0 E0            [24] 1743 	pop	acc
      0002F7 F7               [12] 1744 	mov	@r1,a
      0002F8 D0 00            [24] 1745 	pop	ar0
      0002FA                       1746 00147$:
      0002FA E5 81            [12] 1747 	mov	a,sp
      0002FC 24 DE            [12] 1748 	add	a,#0xde
      0002FE F9               [12] 1749 	mov	r1,a
      0002FF C0 00            [24] 1750 	push	ar0
      000301 E5 81            [12] 1751 	mov	a,sp
      000303 24 B0            [12] 1752 	add	a,#0xb0
      000305 F8               [12] 1753 	mov	r0,a
      000306 C3               [12] 1754 	clr	c
      000307 E7               [12] 1755 	mov	a,@r1
      000308 96               [12] 1756 	subb	a,@r0
      000309 09               [12] 1757 	inc	r1
      00030A E7               [12] 1758 	mov	a,@r1
      00030B 08               [12] 1759 	inc	r0
      00030C 96               [12] 1760 	subb	a,@r0
      00030D D0 00            [24] 1761 	pop	ar0
      00030F 40 03            [24] 1762 	jc	00197$
      000311 02r08r19         [24] 1763 	ljmp	00145$
      000314                       1764 00197$:
                                   1765 ;	../../../../core/loader/elfloader.c:234: seek_read(fd, a, (char *)&rela, rel_size);
      000314 C0 00            [24] 1766 	push	ar0
      000316 E5 81            [12] 1767 	mov	a,sp
      000318 24 BF            [12] 1768 	add	a,#0xBF
      00031A F9               [12] 1769 	mov	r1,a
      00031B FB               [12] 1770 	mov	r3,a
      00031C 7C 00            [12] 1771 	mov	r4,#0x00
      00031E 7D 40            [12] 1772 	mov	r5,#0x40
      000320 C0 01            [24] 1773 	push	ar1
      000322 C0 00            [24] 1774 	push	ar0
      000324 85 00 F0         [24] 1775 	mov	b,ar0
      000327 E5 81            [12] 1776 	mov	a,sp
      000329 24 C9            [12] 1777 	add	a,#0xc9
      00032B F8               [12] 1778 	mov	r0,a
      00032C E6               [12] 1779 	mov	a,@r0
      00032D C0 E0            [24] 1780 	push	acc
      00032F 08               [12] 1781 	inc	r0
      000330 E6               [12] 1782 	mov	a,@r0
      000331 C0 E0            [24] 1783 	push	acc
      000333 A8 F0            [24] 1784 	mov	r0,b
      000335 C0 03            [24] 1785 	push	ar3
      000337 C0 04            [24] 1786 	push	ar4
      000339 C0 05            [24] 1787 	push	ar5
      00033B 85 00 F0         [24] 1788 	mov	b,ar0
      00033E E5 81            [12] 1789 	mov	a,sp
      000340 24 D6            [12] 1790 	add	a,#0xd6
      000342 F8               [12] 1791 	mov	r0,a
      000343 E6               [12] 1792 	mov	a,@r0
      000344 C0 E0            [24] 1793 	push	acc
      000346 08               [12] 1794 	inc	r0
      000347 E6               [12] 1795 	mov	a,@r0
      000348 C0 E0            [24] 1796 	push	acc
      00034A A8 F0            [24] 1797 	mov	r0,b
      00034C C0 00            [24] 1798 	push	ar0
      00034E E5 81            [12] 1799 	mov	a,sp
      000350 24 A4            [12] 1800 	add	a,#0xa4
      000352 F8               [12] 1801 	mov	r0,a
      000353 86 82            [24] 1802 	mov	dpl,@r0
      000355 08               [12] 1803 	inc	r0
      000356 86 83            [24] 1804 	mov	dph,@r0
      000358 D0 00            [24] 1805 	pop	ar0
      00035A 78r00            [12] 1806 	mov	r0,#_seek_read
      00035C 79s00            [12] 1807 	mov	r1,#(_seek_read >> 8)
      00035E 7As00            [12] 1808 	mov	r2,#(_seek_read >> 16)
      000360 12r00r00         [24] 1809 	lcall	__sdcc_banked_call
      000363 E5 81            [12] 1810 	mov	a,sp
      000365 24 F9            [12] 1811 	add	a,#0xf9
      000367 F5 81            [12] 1812 	mov	sp,a
      000369 D0 00            [24] 1813 	pop	ar0
      00036B D0 01            [24] 1814 	pop	ar1
                                   1815 ;	../../../../core/loader/elfloader.c:237: (char *)&s, sizeof(s));
      00036D C0 00            [24] 1816 	push	ar0
      00036F E5 81            [12] 1817 	mov	a,sp
      000371 24 B8            [12] 1818 	add	a,#0xb8
      000373 F8               [12] 1819 	mov	r0,a
      000374 86 05            [24] 1820 	mov	ar5,@r0
      000376 E5 81            [12] 1821 	mov	a,sp
      000378 24 B1            [12] 1822 	add	a,#0xb1
      00037A F8               [12] 1823 	mov	r0,a
      00037B A6 05            [24] 1824 	mov	@r0,ar5
      00037D 08               [12] 1825 	inc	r0
      00037E 76 00            [12] 1826 	mov	@r0,#0x00
      000380 08               [12] 1827 	inc	r0
      000381 76 40            [12] 1828 	mov	@r0,#0x40
      000383 D0 00            [24] 1829 	pop	ar0
                                   1830 ;	../../../../core/loader/elfloader.c:236: symtab + sizeof(struct elf32_sym) * ELF32_R_SYM(rela.r_info),
      000385 74 04            [12] 1831 	mov	a,#0x04
      000387 29               [12] 1832 	add	a,r1
      000388 F8               [12] 1833 	mov	r0,a
      000389 86 02            [24] 1834 	mov	ar2,@r0
      00038B 08               [12] 1835 	inc	r0
      00038C 86 05            [24] 1836 	mov	ar5,@r0
      00038E 08               [12] 1837 	inc	r0
      00038F 86 06            [24] 1838 	mov	ar6,@r0
      000391 08               [12] 1839 	inc	r0
      000392 86 07            [24] 1840 	mov	ar7,@r0
      000394 18               [12] 1841 	dec	r0
      000395 18               [12] 1842 	dec	r0
      000396 18               [12] 1843 	dec	r0
      000397 8D 02            [24] 1844 	mov	ar2,r5
      000399 8E 05            [24] 1845 	mov	ar5,r6
      00039B ED               [12] 1846 	mov	a,r5
      00039C C4               [12] 1847 	swap	a
      00039D 54 F0            [12] 1848 	anl	a,#0xF0
      00039F CA               [12] 1849 	xch	a,r2
      0003A0 C4               [12] 1850 	swap	a
      0003A1 CA               [12] 1851 	xch	a,r2
      0003A2 6A               [12] 1852 	xrl	a,r2
      0003A3 CA               [12] 1853 	xch	a,r2
      0003A4 54 F0            [12] 1854 	anl	a,#0xF0
      0003A6 CA               [12] 1855 	xch	a,r2
      0003A7 6A               [12] 1856 	xrl	a,r2
      0003A8 FD               [12] 1857 	mov	r5,a
      0003A9 C0 00            [24] 1858 	push	ar0
      0003AB E5 81            [12] 1859 	mov	a,sp
      0003AD 24 9B            [12] 1860 	add	a,#0x9b
      0003AF F8               [12] 1861 	mov	r0,a
      0003B0 EA               [12] 1862 	mov	a,r2
      0003B1 26               [12] 1863 	add	a,@r0
      0003B2 FA               [12] 1864 	mov	r2,a
      0003B3 ED               [12] 1865 	mov	a,r5
      0003B4 08               [12] 1866 	inc	r0
      0003B5 36               [12] 1867 	addc	a,@r0
      0003B6 FD               [12] 1868 	mov	r5,a
      0003B7 D0 00            [24] 1869 	pop	ar0
                                   1870 ;	../../../../core/loader/elfloader.c:235: seek_read(fd,
      0003B9 C0 01            [24] 1871 	push	ar1
      0003BB C0 00            [24] 1872 	push	ar0
      0003BD 74 10            [12] 1873 	mov	a,#0x10
      0003BF C0 E0            [24] 1874 	push	acc
      0003C1 E4               [12] 1875 	clr	a
      0003C2 C0 E0            [24] 1876 	push	acc
      0003C4 85 00 F0         [24] 1877 	mov	b,ar0
      0003C7 E5 81            [12] 1878 	mov	a,sp
      0003C9 24 AE            [12] 1879 	add	a,#0xae
      0003CB F8               [12] 1880 	mov	r0,a
      0003CC E6               [12] 1881 	mov	a,@r0
      0003CD C0 E0            [24] 1882 	push	acc
      0003CF 08               [12] 1883 	inc	r0
      0003D0 E6               [12] 1884 	mov	a,@r0
      0003D1 C0 E0            [24] 1885 	push	acc
      0003D3 08               [12] 1886 	inc	r0
      0003D4 E6               [12] 1887 	mov	a,@r0
      0003D5 C0 E0            [24] 1888 	push	acc
      0003D7 A8 F0            [24] 1889 	mov	r0,b
      0003D9 C0 02            [24] 1890 	push	ar2
      0003DB C0 05            [24] 1891 	push	ar5
      0003DD C0 00            [24] 1892 	push	ar0
      0003DF E5 81            [12] 1893 	mov	a,sp
      0003E1 24 A4            [12] 1894 	add	a,#0xa4
      0003E3 F8               [12] 1895 	mov	r0,a
      0003E4 86 82            [24] 1896 	mov	dpl,@r0
      0003E6 08               [12] 1897 	inc	r0
      0003E7 86 83            [24] 1898 	mov	dph,@r0
      0003E9 D0 00            [24] 1899 	pop	ar0
      0003EB 78r00            [12] 1900 	mov	r0,#_seek_read
      0003ED 79s00            [12] 1901 	mov	r1,#(_seek_read >> 8)
      0003EF 7As00            [12] 1902 	mov	r2,#(_seek_read >> 16)
      0003F1 12r00r00         [24] 1903 	lcall	__sdcc_banked_call
      0003F4 E5 81            [12] 1904 	mov	a,sp
      0003F6 24 F9            [12] 1905 	add	a,#0xf9
      0003F8 F5 81            [12] 1906 	mov	sp,a
      0003FA D0 00            [24] 1907 	pop	ar0
      0003FC D0 01            [24] 1908 	pop	ar1
                                   1909 ;	../../../../core/loader/elfloader.c:238: if(s.st_name != 0) {
      0003FE C0 00            [24] 1910 	push	ar0
      000400 E5 81            [12] 1911 	mov	a,sp
      000402 24 B8            [12] 1912 	add	a,#0xb8
      000404 F8               [12] 1913 	mov	r0,a
      000405 C0 01            [24] 1914 	push	ar1
      000407 E5 81            [12] 1915 	mov	a,sp
      000409 24 B3            [12] 1916 	add	a,#0xb3
      00040B F9               [12] 1917 	mov	r1,a
      00040C 86 00            [24] 1918 	mov	ar0,@r0
      00040E E6               [12] 1919 	mov	a,@r0
      00040F F7               [12] 1920 	mov	@r1,a
      000410 08               [12] 1921 	inc	r0
      000411 E6               [12] 1922 	mov	a,@r0
      000412 09               [12] 1923 	inc	r1
      000413 F7               [12] 1924 	mov	@r1,a
      000414 08               [12] 1925 	inc	r0
      000415 E6               [12] 1926 	mov	a,@r0
      000416 09               [12] 1927 	inc	r1
      000417 F7               [12] 1928 	mov	@r1,a
      000418 08               [12] 1929 	inc	r0
      000419 E6               [12] 1930 	mov	a,@r0
      00041A 09               [12] 1931 	inc	r1
      00041B F7               [12] 1932 	mov	@r1,a
      00041C 18               [12] 1933 	dec	r0
      00041D 18               [12] 1934 	dec	r0
      00041E 18               [12] 1935 	dec	r0
      00041F D0 01            [24] 1936 	pop	ar1
      000421 D0 00            [24] 1937 	pop	ar0
      000423 E5 81            [12] 1938 	mov	a,sp
      000425 24 B5            [12] 1939 	add	a,#0xb5
      000427 F8               [12] 1940 	mov	r0,a
      000428 E6               [12] 1941 	mov	a,@r0
      000429 08               [12] 1942 	inc	r0
      00042A 46               [12] 1943 	orl	a,@r0
      00042B 08               [12] 1944 	inc	r0
      00042C 46               [12] 1945 	orl	a,@r0
      00042D 08               [12] 1946 	inc	r0
      00042E 46               [12] 1947 	orl	a,@r0
      00042F D0 00            [24] 1948 	pop	ar0
      000431 70 03            [24] 1949 	jnz	00198$
      000433 02r06r71         [24] 1950 	ljmp	00141$
      000436                       1951 00198$:
                                   1952 ;	../../../../core/loader/elfloader.c:239: seek_read(fd, strtab + s.st_name, name, sizeof(name));
      000436 C0 00            [24] 1953 	push	ar0
      000438 C0 00            [24] 1954 	push	ar0
      00043A E5 81            [12] 1955 	mov	a,sp
      00043C 24 B9            [12] 1956 	add	a,#0xb9
      00043E F8               [12] 1957 	mov	r0,a
      00043F E5 81            [12] 1958 	mov	a,sp
      000441 24 DE            [12] 1959 	add	a,#0xDE
      000443 F6               [12] 1960 	mov	@r0,a
      000444 E5 81            [12] 1961 	mov	a,sp
      000446 24 B9            [12] 1962 	add	a,#0xb9
      000448 F8               [12] 1963 	mov	r0,a
      000449 C0 01            [24] 1964 	push	ar1
      00044B E5 81            [12] 1965 	mov	a,sp
      00044D 24 B0            [12] 1966 	add	a,#0xb0
      00044F F9               [12] 1967 	mov	r1,a
      000450 E6               [12] 1968 	mov	a,@r0
      000451 F7               [12] 1969 	mov	@r1,a
      000452 09               [12] 1970 	inc	r1
      000453 77 00            [12] 1971 	mov	@r1,#0x00
      000455 09               [12] 1972 	inc	r1
      000456 77 40            [12] 1973 	mov	@r1,#0x40
      000458 D0 01            [24] 1974 	pop	ar1
      00045A E5 81            [12] 1975 	mov	a,sp
      00045C 24 9D            [12] 1976 	add	a,#0x9d
      00045E F8               [12] 1977 	mov	r0,a
      00045F 86 02            [24] 1978 	mov	ar2,@r0
      000461 08               [12] 1979 	inc	r0
      000462 86 03            [24] 1980 	mov	ar3,@r0
      000464 E4               [12] 1981 	clr	a
      000465 FD               [12] 1982 	mov	r5,a
      000466 FE               [12] 1983 	mov	r6,a
      000467 E5 81            [12] 1984 	mov	a,sp
      000469 24 B4            [12] 1985 	add	a,#0xb4
      00046B F8               [12] 1986 	mov	r0,a
      00046C E6               [12] 1987 	mov	a,@r0
      00046D 2A               [12] 1988 	add	a,r2
      00046E FA               [12] 1989 	mov	r2,a
      00046F 08               [12] 1990 	inc	r0
      000470 E6               [12] 1991 	mov	a,@r0
      000471 3B               [12] 1992 	addc	a,r3
      000472 FB               [12] 1993 	mov	r3,a
      000473 08               [12] 1994 	inc	r0
      000474 E6               [12] 1995 	mov	a,@r0
      000475 3D               [12] 1996 	addc	a,r5
      000476 08               [12] 1997 	inc	r0
      000477 E6               [12] 1998 	mov	a,@r0
      000478 3E               [12] 1999 	addc	a,r6
      000479 D0 00            [24] 2000 	pop	ar0
      00047B C0 01            [24] 2001 	push	ar1
      00047D C0 00            [24] 2002 	push	ar0
      00047F 74 1E            [12] 2003 	mov	a,#0x1E
      000481 C0 E0            [24] 2004 	push	acc
      000483 E4               [12] 2005 	clr	a
      000484 C0 E0            [24] 2006 	push	acc
      000486 85 00 F0         [24] 2007 	mov	b,ar0
      000489 E5 81            [12] 2008 	mov	a,sp
      00048B 24 AE            [12] 2009 	add	a,#0xae
      00048D F8               [12] 2010 	mov	r0,a
      00048E E6               [12] 2011 	mov	a,@r0
      00048F C0 E0            [24] 2012 	push	acc
      000491 08               [12] 2013 	inc	r0
      000492 E6               [12] 2014 	mov	a,@r0
      000493 C0 E0            [24] 2015 	push	acc
      000495 08               [12] 2016 	inc	r0
      000496 E6               [12] 2017 	mov	a,@r0
      000497 C0 E0            [24] 2018 	push	acc
      000499 A8 F0            [24] 2019 	mov	r0,b
      00049B C0 02            [24] 2020 	push	ar2
      00049D C0 03            [24] 2021 	push	ar3
      00049F C0 00            [24] 2022 	push	ar0
      0004A1 E5 81            [12] 2023 	mov	a,sp
      0004A3 24 A4            [12] 2024 	add	a,#0xa4
      0004A5 F8               [12] 2025 	mov	r0,a
      0004A6 86 82            [24] 2026 	mov	dpl,@r0
      0004A8 08               [12] 2027 	inc	r0
      0004A9 86 83            [24] 2028 	mov	dph,@r0
      0004AB D0 00            [24] 2029 	pop	ar0
      0004AD 78r00            [12] 2030 	mov	r0,#_seek_read
      0004AF 79s00            [12] 2031 	mov	r1,#(_seek_read >> 8)
      0004B1 7As00            [12] 2032 	mov	r2,#(_seek_read >> 16)
      0004B3 12r00r00         [24] 2033 	lcall	__sdcc_banked_call
      0004B6 E5 81            [12] 2034 	mov	a,sp
      0004B8 24 F9            [12] 2035 	add	a,#0xf9
      0004BA F5 81            [12] 2036 	mov	sp,a
      0004BC D0 00            [24] 2037 	pop	ar0
      0004BE D0 01            [24] 2038 	pop	ar1
                                   2039 ;	../../../../core/loader/elfloader.c:241: addr = (char *)symtab_lookup(name);
      0004C0 C0 00            [24] 2040 	push	ar0
      0004C2 E5 81            [12] 2041 	mov	a,sp
      0004C4 24 B9            [12] 2042 	add	a,#0xb9
      0004C6 F8               [12] 2043 	mov	r0,a
      0004C7 86 06            [24] 2044 	mov	ar6,@r0
      0004C9 D0 00            [24] 2045 	pop	ar0
      0004CB 7D 00            [12] 2046 	mov	r5,#0x00
      0004CD 7C 40            [12] 2047 	mov	r4,#0x40
      0004CF 8E 82            [24] 2048 	mov	dpl,r6
      0004D1 8D 83            [24] 2049 	mov	dph,r5
      0004D3 8C F0            [24] 2050 	mov	b,r4
      0004D5 C0 01            [24] 2051 	push	ar1
      0004D7 C0 00            [24] 2052 	push	ar0
      0004D9 78r00            [12] 2053 	mov	r0,#_symtab_lookup
      0004DB 79s00            [12] 2054 	mov	r1,#(_symtab_lookup >> 8)
      0004DD 7As00            [12] 2055 	mov	r2,#(_symtab_lookup >> 16)
      0004DF 12r00r00         [24] 2056 	lcall	__sdcc_banked_call
      0004E2 AC 82            [24] 2057 	mov	r4,dpl
      0004E4 AD 83            [24] 2058 	mov	r5,dph
      0004E6 AE F0            [24] 2059 	mov	r6,b
      0004E8 D0 00            [24] 2060 	pop	ar0
      0004EA D0 01            [24] 2061 	pop	ar1
      0004EC C0 00            [24] 2062 	push	ar0
      0004EE E5 81            [12] 2063 	mov	a,sp
      0004F0 24 FC            [12] 2064 	add	a,#0xfc
      0004F2 F8               [12] 2065 	mov	r0,a
      0004F3 A6 04            [24] 2066 	mov	@r0,ar4
      0004F5 08               [12] 2067 	inc	r0
      0004F6 A6 05            [24] 2068 	mov	@r0,ar5
      0004F8 08               [12] 2069 	inc	r0
      0004F9 A6 06            [24] 2070 	mov	@r0,ar6
      0004FB D0 00            [24] 2071 	pop	ar0
                                   2072 ;	../../../../core/loader/elfloader.c:243: if(addr == NULL) {
      0004FD E5 81            [12] 2073 	mov	a,sp
      0004FF 24 FD            [12] 2074 	add	a,#0xfd
      000501 F8               [12] 2075 	mov	r0,a
      000502 E6               [12] 2076 	mov	a,@r0
      000503 08               [12] 2077 	inc	r0
      000504 46               [12] 2078 	orl	a,@r0
      000505 D0 00            [24] 2079 	pop	ar0
      000507 60 03            [24] 2080 	jz	00199$
      000509 02r05r90         [24] 2081 	ljmp	00111$
      00050C                       2082 00199$:
                                   2083 ;	../../../../core/loader/elfloader.c:245: addr = find_local_symbol(fd, name, symtab, symtabsize, strtab);
      00050C C0 00            [24] 2084 	push	ar0
      00050E E5 81            [12] 2085 	mov	a,sp
      000510 24 BA            [12] 2086 	add	a,#0xba
      000512 F8               [12] 2087 	mov	r0,a
      000513 86 06            [24] 2088 	mov	ar6,@r0
      000515 D0 00            [24] 2089 	pop	ar0
      000517 7D 00            [12] 2090 	mov	r5,#0x00
      000519 7C 40            [12] 2091 	mov	r4,#0x40
      00051B C0 01            [24] 2092 	push	ar1
      00051D C0 00            [24] 2093 	push	ar0
      00051F 85 00 F0         [24] 2094 	mov	b,ar0
      000522 E5 81            [12] 2095 	mov	a,sp
      000524 24 9D            [12] 2096 	add	a,#0x9d
      000526 F8               [12] 2097 	mov	r0,a
      000527 E6               [12] 2098 	mov	a,@r0
      000528 C0 E0            [24] 2099 	push	acc
      00052A 08               [12] 2100 	inc	r0
      00052B E6               [12] 2101 	mov	a,@r0
      00052C C0 E0            [24] 2102 	push	acc
      00052E A8 F0            [24] 2103 	mov	r0,b
      000530 85 00 F0         [24] 2104 	mov	b,ar0
      000533 E5 81            [12] 2105 	mov	a,sp
      000535 24 97            [12] 2106 	add	a,#0x97
      000537 F8               [12] 2107 	mov	r0,a
      000538 E6               [12] 2108 	mov	a,@r0
      000539 C0 E0            [24] 2109 	push	acc
      00053B 08               [12] 2110 	inc	r0
      00053C E6               [12] 2111 	mov	a,@r0
      00053D C0 E0            [24] 2112 	push	acc
      00053F A8 F0            [24] 2113 	mov	r0,b
      000541 85 00 F0         [24] 2114 	mov	b,ar0
      000544 E5 81            [12] 2115 	mov	a,sp
      000546 24 97            [12] 2116 	add	a,#0x97
      000548 F8               [12] 2117 	mov	r0,a
      000549 E6               [12] 2118 	mov	a,@r0
      00054A C0 E0            [24] 2119 	push	acc
      00054C 08               [12] 2120 	inc	r0
      00054D E6               [12] 2121 	mov	a,@r0
      00054E C0 E0            [24] 2122 	push	acc
      000550 A8 F0            [24] 2123 	mov	r0,b
      000552 C0 06            [24] 2124 	push	ar6
      000554 C0 05            [24] 2125 	push	ar5
      000556 C0 04            [24] 2126 	push	ar4
      000558 C0 00            [24] 2127 	push	ar0
      00055A E5 81            [12] 2128 	mov	a,sp
      00055C 24 A3            [12] 2129 	add	a,#0xa3
      00055E F8               [12] 2130 	mov	r0,a
      00055F 86 82            [24] 2131 	mov	dpl,@r0
      000561 08               [12] 2132 	inc	r0
      000562 86 83            [24] 2133 	mov	dph,@r0
      000564 D0 00            [24] 2134 	pop	ar0
      000566 78r65            [12] 2135 	mov	r0,#_find_local_symbol
      000568 79s00            [12] 2136 	mov	r1,#(_find_local_symbol >> 8)
      00056A 7As00            [12] 2137 	mov	r2,#(_find_local_symbol >> 16)
      00056C 12r00r00         [24] 2138 	lcall	__sdcc_banked_call
      00056F AC 82            [24] 2139 	mov	r4,dpl
      000571 AD 83            [24] 2140 	mov	r5,dph
      000573 AE F0            [24] 2141 	mov	r6,b
      000575 E5 81            [12] 2142 	mov	a,sp
      000577 24 F7            [12] 2143 	add	a,#0xf7
      000579 F5 81            [12] 2144 	mov	sp,a
      00057B D0 00            [24] 2145 	pop	ar0
      00057D D0 01            [24] 2146 	pop	ar1
      00057F C0 00            [24] 2147 	push	ar0
      000581 E5 81            [12] 2148 	mov	a,sp
      000583 24 FD            [12] 2149 	add	a,#0xfd
      000585 F8               [12] 2150 	mov	r0,a
      000586 A6 04            [24] 2151 	mov	@r0,ar4
      000588 08               [12] 2152 	inc	r0
      000589 A6 05            [24] 2153 	mov	@r0,ar5
      00058B 08               [12] 2154 	inc	r0
      00058C A6 06            [24] 2155 	mov	@r0,ar6
      00058E D0 00            [24] 2156 	pop	ar0
                                   2157 ;	../../../../core/loader/elfloader.c:246: PRINTF("found address %p\n", addr);
      000590                       2158 00111$:
                                   2159 ;	../../../../core/loader/elfloader.c:248: if(addr == NULL) {
      000590 C0 00            [24] 2160 	push	ar0
      000592 E5 81            [12] 2161 	mov	a,sp
      000594 24 FD            [12] 2162 	add	a,#0xfd
      000596 F8               [12] 2163 	mov	r0,a
      000597 E6               [12] 2164 	mov	a,@r0
      000598 08               [12] 2165 	inc	r0
      000599 46               [12] 2166 	orl	a,@r0
      00059A D0 00            [24] 2167 	pop	ar0
      00059C 60 03            [24] 2168 	jz	00200$
      00059E 02r07r09         [24] 2169 	ljmp	00142$
      0005A1                       2170 00200$:
                                   2171 ;	../../../../core/loader/elfloader.c:249: if(s.st_shndx == bss.number) {
      0005A1 86 05            [24] 2172 	mov	ar5,@r0
      0005A3 08               [12] 2173 	inc	r0
      0005A4 86 02            [24] 2174 	mov	ar2,@r0
      0005A6 18               [12] 2175 	dec	r0
      0005A7 90r00r21         [24] 2176 	mov	dptr,#_bss
      0005AA E0               [24] 2177 	movx	a,@dptr
      0005AB FC               [12] 2178 	mov	r4,a
      0005AC 7B 00            [12] 2179 	mov	r3,#0x00
      0005AE ED               [12] 2180 	mov	a,r5
      0005AF B5 04 0D         [24] 2181 	cjne	a,ar4,00124$
      0005B2 EA               [12] 2182 	mov	a,r2
      0005B3 B5 03 09         [24] 2183 	cjne	a,ar3,00124$
                                   2184 ;	../../../../core/loader/elfloader.c:250: sect = &bss;
      0005B6 7Ar21            [12] 2185 	mov	r2,#_bss
      0005B8 7Bs00            [12] 2186 	mov	r3,#(_bss >> 8)
      0005BA 7C 00            [12] 2187 	mov	r4,#0x00
      0005BC 02r06r46         [24] 2188 	ljmp	00125$
      0005BF                       2189 00124$:
                                   2190 ;	../../../../core/loader/elfloader.c:251: } else if(s.st_shndx == data.number) {
      0005BF C0 00            [24] 2191 	push	ar0
      0005C1 90r00r27         [24] 2192 	mov	dptr,#_data
      0005C4 E0               [24] 2193 	movx	a,@dptr
      0005C5 FE               [12] 2194 	mov	r6,a
      0005C6 7F 00            [12] 2195 	mov	r7,#0x00
      0005C8 ED               [12] 2196 	mov	a,r5
      0005C9 B5 06 06         [24] 2197 	cjne	a,ar6,00203$
      0005CC EA               [12] 2198 	mov	a,r2
      0005CD B5 07 02         [24] 2199 	cjne	a,ar7,00203$
      0005D0 80 04            [24] 2200 	sjmp	00204$
      0005D2                       2201 00203$:
      0005D2 D0 00            [24] 2202 	pop	ar0
      0005D4 80 0A            [24] 2203 	sjmp	00121$
      0005D6                       2204 00204$:
      0005D6 D0 00            [24] 2205 	pop	ar0
                                   2206 ;	../../../../core/loader/elfloader.c:252: sect = &data;
      0005D8 7Ar27            [12] 2207 	mov	r2,#_data
      0005DA 7Bs00            [12] 2208 	mov	r3,#(_data >> 8)
      0005DC 7C 00            [12] 2209 	mov	r4,#0x00
      0005DE 80 66            [24] 2210 	sjmp	00125$
      0005E0                       2211 00121$:
                                   2212 ;	../../../../core/loader/elfloader.c:253: } else if(s.st_shndx == rodata.number) {
      0005E0 90r00r2D         [24] 2213 	mov	dptr,#_rodata
      0005E3 E0               [24] 2214 	movx	a,@dptr
      0005E4 FF               [12] 2215 	mov	r7,a
      0005E5 7E 00            [12] 2216 	mov	r6,#0x00
      0005E7 ED               [12] 2217 	mov	a,r5
      0005E8 B5 07 0C         [24] 2218 	cjne	a,ar7,00118$
      0005EB EA               [12] 2219 	mov	a,r2
      0005EC B5 06 08         [24] 2220 	cjne	a,ar6,00118$
                                   2221 ;	../../../../core/loader/elfloader.c:254: sect = &rodata;
      0005EF 7Ar2D            [12] 2222 	mov	r2,#_rodata
      0005F1 7Bs00            [12] 2223 	mov	r3,#(_rodata >> 8)
      0005F3 7C 00            [12] 2224 	mov	r4,#0x00
      0005F5 80 4F            [24] 2225 	sjmp	00125$
      0005F7                       2226 00118$:
                                   2227 ;	../../../../core/loader/elfloader.c:255: } else if(s.st_shndx == text.number) {
      0005F7 90r00r33         [24] 2228 	mov	dptr,#_text
      0005FA E0               [24] 2229 	movx	a,@dptr
      0005FB FF               [12] 2230 	mov	r7,a
      0005FC 7E 00            [12] 2231 	mov	r6,#0x00
      0005FE ED               [12] 2232 	mov	a,r5
      0005FF B5 07 0C         [24] 2233 	cjne	a,ar7,00112$
      000602 EA               [12] 2234 	mov	a,r2
      000603 B5 06 08         [24] 2235 	cjne	a,ar6,00112$
                                   2236 ;	../../../../core/loader/elfloader.c:256: sect = &text;
      000606 7Ar33            [12] 2237 	mov	r2,#_text
      000608 7Bs00            [12] 2238 	mov	r3,#(_text >> 8)
      00060A 7C 00            [12] 2239 	mov	r4,#0x00
                                   2240 ;	../../../../core/loader/elfloader.c:258: PRINTF("elfloader unknown name: '%30s'\n", name);
      00060C 80 38            [24] 2241 	sjmp	00125$
      00060E                       2242 00112$:
                                   2243 ;	../../../../core/loader/elfloader.c:259: memcpy(elfloader_unknown, name, sizeof(elfloader_unknown));
      00060E E5 81            [12] 2244 	mov	a,sp
      000610 24 BB            [12] 2245 	add	a,#0xbb
      000612 F8               [12] 2246 	mov	r0,a
      000613 86 07            [24] 2247 	mov	ar7,@r0
      000615 7E 00            [12] 2248 	mov	r6,#0x00
      000617 7D 40            [12] 2249 	mov	r5,#0x40
      000619 74 1E            [12] 2250 	mov	a,#0x1E
      00061B C0 E0            [24] 2251 	push	acc
      00061D E4               [12] 2252 	clr	a
      00061E C0 E0            [24] 2253 	push	acc
      000620 C0 07            [24] 2254 	push	ar7
      000622 C0 06            [24] 2255 	push	ar6
      000624 C0 05            [24] 2256 	push	ar5
      000626 90r00r00         [24] 2257 	mov	dptr,#_elfloader_unknown
      000629 75 F0 00         [24] 2258 	mov	b,#0x00
      00062C 78r00            [12] 2259 	mov	r0,#_memcpy
      00062E 79s00            [12] 2260 	mov	r1,#(_memcpy >> 8)
      000630 7As00            [12] 2261 	mov	r2,#(_memcpy >> 16)
      000632 12r00r00         [24] 2262 	lcall	__sdcc_banked_call
      000635 E5 81            [12] 2263 	mov	a,sp
      000637 24 FB            [12] 2264 	add	a,#0xfb
      000639 F5 81            [12] 2265 	mov	sp,a
                                   2266 ;	../../../../core/loader/elfloader.c:260: elfloader_unknown[sizeof(elfloader_unknown) - 1] = 0;
      00063B 90r00r1D         [24] 2267 	mov	dptr,#(_elfloader_unknown + 0x001d)
      00063E E4               [12] 2268 	clr	a
      00063F F0               [24] 2269 	movx	@dptr,a
                                   2270 ;	../../../../core/loader/elfloader.c:261: return ELFLOADER_SYMBOL_NOT_FOUND;
      000640 90 00 05         [24] 2271 	mov	dptr,#0x0005
      000643 02r08r1C         [24] 2272 	ljmp	00149$
      000646                       2273 00125$:
                                   2274 ;	../../../../core/loader/elfloader.c:263: addr = sect->address;
      000646 74 03            [12] 2275 	mov	a,#0x03
      000648 2A               [12] 2276 	add	a,r2
      000649 FD               [12] 2277 	mov	r5,a
      00064A E4               [12] 2278 	clr	a
      00064B 3B               [12] 2279 	addc	a,r3
      00064C FE               [12] 2280 	mov	r6,a
      00064D 8C 07            [24] 2281 	mov	ar7,r4
      00064F 8D 82            [24] 2282 	mov	dpl,r5
      000651 8E 83            [24] 2283 	mov	dph,r6
      000653 8F F0            [24] 2284 	mov	b,r7
      000655 C0 00            [24] 2285 	push	ar0
      000657 E5 81            [12] 2286 	mov	a,sp
      000659 24 FD            [12] 2287 	add	a,#0xfd
      00065B F8               [12] 2288 	mov	r0,a
      00065C 12r00r00         [24] 2289 	lcall	__gptrget
      00065F F6               [12] 2290 	mov	@r0,a
      000660 A3               [24] 2291 	inc	dptr
      000661 12r00r00         [24] 2292 	lcall	__gptrget
      000664 08               [12] 2293 	inc	r0
      000665 F6               [12] 2294 	mov	@r0,a
      000666 A3               [24] 2295 	inc	dptr
      000667 12r00r00         [24] 2296 	lcall	__gptrget
      00066A 08               [12] 2297 	inc	r0
      00066B F6               [12] 2298 	mov	@r0,a
      00066C D0 00            [24] 2299 	pop	ar0
      00066E 02r07r09         [24] 2300 	ljmp	00142$
      000671                       2301 00141$:
                                   2302 ;	../../../../core/loader/elfloader.c:266: if(s.st_shndx == bss.number) {
      000671 86 04            [24] 2303 	mov	ar4,@r0
      000673 08               [12] 2304 	inc	r0
      000674 86 03            [24] 2305 	mov	ar3,@r0
      000676 18               [12] 2306 	dec	r0
      000677 90r00r21         [24] 2307 	mov	dptr,#_bss
      00067A E0               [24] 2308 	movx	a,@dptr
      00067B FD               [12] 2309 	mov	r5,a
      00067C C0 00            [24] 2310 	push	ar0
      00067E 7F 00            [12] 2311 	mov	r7,#0x00
      000680 EC               [12] 2312 	mov	a,r4
      000681 B5 05 06         [24] 2313 	cjne	a,ar5,00209$
      000684 EB               [12] 2314 	mov	a,r3
      000685 B5 07 02         [24] 2315 	cjne	a,ar7,00209$
      000688 80 04            [24] 2316 	sjmp	00210$
      00068A                       2317 00209$:
      00068A D0 00            [24] 2318 	pop	ar0
      00068C 80 0A            [24] 2319 	sjmp	00138$
      00068E                       2320 00210$:
      00068E D0 00            [24] 2321 	pop	ar0
                                   2322 ;	../../../../core/loader/elfloader.c:267: sect = &bss;
      000690 7Ar21            [12] 2323 	mov	r2,#_bss
      000692 7Bs00            [12] 2324 	mov	r3,#(_bss >> 8)
      000694 7C 00            [12] 2325 	mov	r4,#0x00
      000696 80 4B            [24] 2326 	sjmp	00139$
      000698                       2327 00138$:
                                   2328 ;	../../../../core/loader/elfloader.c:268: } else if(s.st_shndx == data.number) {
      000698 90r00r27         [24] 2329 	mov	dptr,#_data
      00069B E0               [24] 2330 	movx	a,@dptr
      00069C FF               [12] 2331 	mov	r7,a
      00069D 7E 00            [12] 2332 	mov	r6,#0x00
      00069F EC               [12] 2333 	mov	a,r4
      0006A0 B5 07 0C         [24] 2334 	cjne	a,ar7,00135$
      0006A3 EB               [12] 2335 	mov	a,r3
      0006A4 B5 06 08         [24] 2336 	cjne	a,ar6,00135$
                                   2337 ;	../../../../core/loader/elfloader.c:269: sect = &data;
      0006A7 7Ar27            [12] 2338 	mov	r2,#_data
      0006A9 7Bs00            [12] 2339 	mov	r3,#(_data >> 8)
      0006AB 7C 00            [12] 2340 	mov	r4,#0x00
      0006AD 80 34            [24] 2341 	sjmp	00139$
      0006AF                       2342 00135$:
                                   2343 ;	../../../../core/loader/elfloader.c:270: } else if(s.st_shndx == rodata.number) {
      0006AF 90r00r2D         [24] 2344 	mov	dptr,#_rodata
      0006B2 E0               [24] 2345 	movx	a,@dptr
      0006B3 FF               [12] 2346 	mov	r7,a
      0006B4 7E 00            [12] 2347 	mov	r6,#0x00
      0006B6 EC               [12] 2348 	mov	a,r4
      0006B7 B5 07 0C         [24] 2349 	cjne	a,ar7,00132$
      0006BA EB               [12] 2350 	mov	a,r3
      0006BB B5 06 08         [24] 2351 	cjne	a,ar6,00132$
                                   2352 ;	../../../../core/loader/elfloader.c:271: sect = &rodata;
      0006BE 7Ar2D            [12] 2353 	mov	r2,#_rodata
      0006C0 7Bs00            [12] 2354 	mov	r3,#(_rodata >> 8)
      0006C2 7C 00            [12] 2355 	mov	r4,#0x00
      0006C4 80 1D            [24] 2356 	sjmp	00139$
      0006C6                       2357 00132$:
                                   2358 ;	../../../../core/loader/elfloader.c:272: } else if(s.st_shndx == text.number) {
      0006C6 90r00r33         [24] 2359 	mov	dptr,#_text
      0006C9 E0               [24] 2360 	movx	a,@dptr
      0006CA FF               [12] 2361 	mov	r7,a
      0006CB 7E 00            [12] 2362 	mov	r6,#0x00
      0006CD EC               [12] 2363 	mov	a,r4
      0006CE B5 07 0C         [24] 2364 	cjne	a,ar7,00129$
      0006D1 EB               [12] 2365 	mov	a,r3
      0006D2 B5 06 08         [24] 2366 	cjne	a,ar6,00129$
                                   2367 ;	../../../../core/loader/elfloader.c:273: sect = &text;
      0006D5 7Ar33            [12] 2368 	mov	r2,#_text
      0006D7 7Bs00            [12] 2369 	mov	r3,#(_text >> 8)
      0006D9 7C 00            [12] 2370 	mov	r4,#0x00
      0006DB 80 06            [24] 2371 	sjmp	00139$
      0006DD                       2372 00129$:
                                   2373 ;	../../../../core/loader/elfloader.c:275: return ELFLOADER_SEGMENT_NOT_FOUND;
      0006DD 90 00 06         [24] 2374 	mov	dptr,#0x0006
      0006E0 02r08r1C         [24] 2375 	ljmp	00149$
      0006E3                       2376 00139$:
                                   2377 ;	../../../../core/loader/elfloader.c:278: addr = sect->address;
      0006E3 74 03            [12] 2378 	mov	a,#0x03
      0006E5 2A               [12] 2379 	add	a,r2
      0006E6 FA               [12] 2380 	mov	r2,a
      0006E7 E4               [12] 2381 	clr	a
      0006E8 3B               [12] 2382 	addc	a,r3
      0006E9 FB               [12] 2383 	mov	r3,a
      0006EA 8A 82            [24] 2384 	mov	dpl,r2
      0006EC 8B 83            [24] 2385 	mov	dph,r3
      0006EE 8C F0            [24] 2386 	mov	b,r4
      0006F0 C0 00            [24] 2387 	push	ar0
      0006F2 E5 81            [12] 2388 	mov	a,sp
      0006F4 24 FD            [12] 2389 	add	a,#0xfd
      0006F6 F8               [12] 2390 	mov	r0,a
      0006F7 12r00r00         [24] 2391 	lcall	__gptrget
      0006FA F6               [12] 2392 	mov	@r0,a
      0006FB A3               [24] 2393 	inc	dptr
      0006FC 12r00r00         [24] 2394 	lcall	__gptrget
      0006FF 08               [12] 2395 	inc	r0
      000700 F6               [12] 2396 	mov	@r0,a
      000701 A3               [24] 2397 	inc	dptr
      000702 12r00r00         [24] 2398 	lcall	__gptrget
      000705 08               [12] 2399 	inc	r0
      000706 F6               [12] 2400 	mov	@r0,a
      000707 D0 00            [24] 2401 	pop	ar0
      000709                       2402 00142$:
                                   2403 ;	../../../../core/loader/elfloader.c:281: if(!using_relas) {
      000709 C0 00            [24] 2404 	push	ar0
      00070B E5 81            [12] 2405 	mov	a,sp
      00070D 24 99            [12] 2406 	add	a,#0x99
      00070F F8               [12] 2407 	mov	r0,a
      000710 E6               [12] 2408 	mov	a,@r0
      000711 D0 00            [24] 2409 	pop	ar0
      000713 60 03            [24] 2410 	jz	00217$
      000715 02r07rAB         [24] 2411 	ljmp	00144$
      000718                       2412 00217$:
                                   2413 ;	../../../../core/loader/elfloader.c:283: seek_read(fd, sectionaddr + rela.r_offset, (char *)&rela.r_addend, 4);
      000718 C0 00            [24] 2414 	push	ar0
      00071A 74 08            [12] 2415 	mov	a,#0x08
      00071C 29               [12] 2416 	add	a,r1
      00071D FF               [12] 2417 	mov	r7,a
      00071E C0 00            [24] 2418 	push	ar0
      000720 E5 81            [12] 2419 	mov	a,sp
      000722 24 B4            [12] 2420 	add	a,#0xb4
      000724 F8               [12] 2421 	mov	r0,a
      000725 A6 07            [24] 2422 	mov	@r0,ar7
      000727 08               [12] 2423 	inc	r0
      000728 76 00            [12] 2424 	mov	@r0,#0x00
      00072A 08               [12] 2425 	inc	r0
      00072B 76 40            [12] 2426 	mov	@r0,#0x40
      00072D E5 81            [12] 2427 	mov	a,sp
      00072F 24 BA            [12] 2428 	add	a,#0xba
      000731 F8               [12] 2429 	mov	r0,a
      000732 E7               [12] 2430 	mov	a,@r1
      000733 F6               [12] 2431 	mov	@r0,a
      000734 09               [12] 2432 	inc	r1
      000735 E7               [12] 2433 	mov	a,@r1
      000736 08               [12] 2434 	inc	r0
      000737 F6               [12] 2435 	mov	@r0,a
      000738 09               [12] 2436 	inc	r1
      000739 E7               [12] 2437 	mov	a,@r1
      00073A 08               [12] 2438 	inc	r0
      00073B F6               [12] 2439 	mov	@r0,a
      00073C 09               [12] 2440 	inc	r1
      00073D E7               [12] 2441 	mov	a,@r1
      00073E 08               [12] 2442 	inc	r0
      00073F F6               [12] 2443 	mov	@r0,a
      000740 19               [12] 2444 	dec	r1
      000741 19               [12] 2445 	dec	r1
      000742 19               [12] 2446 	dec	r1
      000743 E5 81            [12] 2447 	mov	a,sp
      000745 24 A4            [12] 2448 	add	a,#0xa4
      000747 F8               [12] 2449 	mov	r0,a
      000748 86 04            [24] 2450 	mov	ar4,@r0
      00074A 08               [12] 2451 	inc	r0
      00074B 86 05            [24] 2452 	mov	ar5,@r0
      00074D E4               [12] 2453 	clr	a
      00074E FE               [12] 2454 	mov	r6,a
      00074F FF               [12] 2455 	mov	r7,a
      000750 E5 81            [12] 2456 	mov	a,sp
      000752 24 BA            [12] 2457 	add	a,#0xba
      000754 F8               [12] 2458 	mov	r0,a
      000755 E6               [12] 2459 	mov	a,@r0
      000756 2C               [12] 2460 	add	a,r4
      000757 FC               [12] 2461 	mov	r4,a
      000758 08               [12] 2462 	inc	r0
      000759 E6               [12] 2463 	mov	a,@r0
      00075A 3D               [12] 2464 	addc	a,r5
      00075B FD               [12] 2465 	mov	r5,a
      00075C 08               [12] 2466 	inc	r0
      00075D E6               [12] 2467 	mov	a,@r0
      00075E 3E               [12] 2468 	addc	a,r6
      00075F 08               [12] 2469 	inc	r0
      000760 E6               [12] 2470 	mov	a,@r0
      000761 3F               [12] 2471 	addc	a,r7
      000762 D0 00            [24] 2472 	pop	ar0
      000764 C0 01            [24] 2473 	push	ar1
      000766 C0 00            [24] 2474 	push	ar0
      000768 74 04            [12] 2475 	mov	a,#0x04
      00076A C0 E0            [24] 2476 	push	acc
      00076C E4               [12] 2477 	clr	a
      00076D C0 E0            [24] 2478 	push	acc
      00076F 85 00 F0         [24] 2479 	mov	b,ar0
      000772 E5 81            [12] 2480 	mov	a,sp
      000774 24 B1            [12] 2481 	add	a,#0xb1
      000776 F8               [12] 2482 	mov	r0,a
      000777 E6               [12] 2483 	mov	a,@r0
      000778 C0 E0            [24] 2484 	push	acc
      00077A 08               [12] 2485 	inc	r0
      00077B E6               [12] 2486 	mov	a,@r0
      00077C C0 E0            [24] 2487 	push	acc
      00077E 08               [12] 2488 	inc	r0
      00077F E6               [12] 2489 	mov	a,@r0
      000780 C0 E0            [24] 2490 	push	acc
      000782 A8 F0            [24] 2491 	mov	r0,b
      000784 C0 04            [24] 2492 	push	ar4
      000786 C0 05            [24] 2493 	push	ar5
      000788 C0 00            [24] 2494 	push	ar0
      00078A E5 81            [12] 2495 	mov	a,sp
      00078C 24 A4            [12] 2496 	add	a,#0xa4
      00078E F8               [12] 2497 	mov	r0,a
      00078F 86 82            [24] 2498 	mov	dpl,@r0
      000791 08               [12] 2499 	inc	r0
      000792 86 83            [24] 2500 	mov	dph,@r0
      000794 D0 00            [24] 2501 	pop	ar0
      000796 78r00            [12] 2502 	mov	r0,#_seek_read
      000798 79s00            [12] 2503 	mov	r1,#(_seek_read >> 8)
      00079A 7As00            [12] 2504 	mov	r2,#(_seek_read >> 16)
      00079C 12r00r00         [24] 2505 	lcall	__sdcc_banked_call
      00079F E5 81            [12] 2506 	mov	a,sp
      0007A1 24 F9            [12] 2507 	add	a,#0xf9
      0007A3 F5 81            [12] 2508 	mov	sp,a
      0007A5 D0 00            [24] 2509 	pop	ar0
      0007A7 D0 01            [24] 2510 	pop	ar1
                                   2511 ;	../../../../core/loader/elfloader.c:288: return ELFLOADER_OK;
      0007A9 D0 00            [24] 2512 	pop	ar0
                                   2513 ;	../../../../core/loader/elfloader.c:283: seek_read(fd, sectionaddr + rela.r_offset, (char *)&rela.r_addend, 4);
      0007AB                       2514 00144$:
                                   2515 ;	../../../../core/loader/elfloader.c:286: elfloader_arch_relocate(fd, sectionaddr, sectionbase, &rela, addr);
      0007AB 89 07            [24] 2516 	mov	ar7,r1
      0007AD 7E 00            [12] 2517 	mov	r6,#0x00
      0007AF 7D 40            [12] 2518 	mov	r5,#0x40
      0007B1 C0 00            [24] 2519 	push	ar0
      0007B3 E5 81            [12] 2520 	mov	a,sp
      0007B5 24 FD            [12] 2521 	add	a,#0xfd
      0007B7 F9               [12] 2522 	mov	r1,a
      0007B8 E7               [12] 2523 	mov	a,@r1
      0007B9 C0 E0            [24] 2524 	push	acc
      0007BB 09               [12] 2525 	inc	r1
      0007BC E7               [12] 2526 	mov	a,@r1
      0007BD C0 E0            [24] 2527 	push	acc
      0007BF 09               [12] 2528 	inc	r1
      0007C0 E7               [12] 2529 	mov	a,@r1
      0007C1 C0 E0            [24] 2530 	push	acc
      0007C3 C0 07            [24] 2531 	push	ar7
      0007C5 C0 06            [24] 2532 	push	ar6
      0007C7 C0 05            [24] 2533 	push	ar5
      0007C9 E5 81            [12] 2534 	mov	a,sp
      0007CB 24 9C            [12] 2535 	add	a,#0x9c
      0007CD F9               [12] 2536 	mov	r1,a
      0007CE E7               [12] 2537 	mov	a,@r1
      0007CF C0 E0            [24] 2538 	push	acc
      0007D1 09               [12] 2539 	inc	r1
      0007D2 E7               [12] 2540 	mov	a,@r1
      0007D3 C0 E0            [24] 2541 	push	acc
      0007D5 09               [12] 2542 	inc	r1
      0007D6 E7               [12] 2543 	mov	a,@r1
      0007D7 C0 E0            [24] 2544 	push	acc
      0007D9 E5 81            [12] 2545 	mov	a,sp
      0007DB 24 9C            [12] 2546 	add	a,#0x9c
      0007DD F9               [12] 2547 	mov	r1,a
      0007DE E7               [12] 2548 	mov	a,@r1
      0007DF C0 E0            [24] 2549 	push	acc
      0007E1 09               [12] 2550 	inc	r1
      0007E2 E7               [12] 2551 	mov	a,@r1
      0007E3 C0 E0            [24] 2552 	push	acc
      0007E5 E5 81            [12] 2553 	mov	a,sp
      0007E7 24 A3            [12] 2554 	add	a,#0xa3
      0007E9 F9               [12] 2555 	mov	r1,a
      0007EA 87 82            [24] 2556 	mov	dpl,@r1
      0007EC 09               [12] 2557 	inc	r1
      0007ED 87 83            [24] 2558 	mov	dph,@r1
      0007EF 78r00            [12] 2559 	mov	r0,#_elfloader_arch_relocate
      0007F1 79s00            [12] 2560 	mov	r1,#(_elfloader_arch_relocate >> 8)
      0007F3 7As00            [12] 2561 	mov	r2,#(_elfloader_arch_relocate >> 16)
      0007F5 12r00r00         [24] 2562 	lcall	__sdcc_banked_call
      0007F8 E5 81            [12] 2563 	mov	a,sp
      0007FA 24 F5            [12] 2564 	add	a,#0xf5
      0007FC F5 81            [12] 2565 	mov	sp,a
      0007FE D0 00            [24] 2566 	pop	ar0
                                   2567 ;	../../../../core/loader/elfloader.c:233: for(a = section; a < section + size; a += rel_size) {
      000800 E5 81            [12] 2568 	mov	a,sp
      000802 24 CC            [12] 2569 	add	a,#0xcc
      000804 F9               [12] 2570 	mov	r1,a
      000805 87 04            [24] 2571 	mov	ar4,@r1
      000807 09               [12] 2572 	inc	r1
      000808 87 05            [24] 2573 	mov	ar5,@r1
      00080A E5 81            [12] 2574 	mov	a,sp
      00080C 24 DE            [12] 2575 	add	a,#0xde
      00080E F9               [12] 2576 	mov	r1,a
      00080F EC               [12] 2577 	mov	a,r4
      000810 27               [12] 2578 	add	a,@r1
      000811 F7               [12] 2579 	mov	@r1,a
      000812 ED               [12] 2580 	mov	a,r5
      000813 09               [12] 2581 	inc	r1
      000814 37               [12] 2582 	addc	a,@r1
      000815 F7               [12] 2583 	mov	@r1,a
      000816 02r02rFA         [24] 2584 	ljmp	00147$
      000819                       2585 00145$:
                                   2586 ;	../../../../core/loader/elfloader.c:288: return ELFLOADER_OK;
      000819 90 00 00         [24] 2587 	mov	dptr,#0x0000
      00081C                       2588 00149$:
      00081C E5 81            [12] 2589 	mov	a,sp
      00081E 24 AE            [12] 2590 	add	a,#0xAE
      000820 F5 81            [12] 2591 	mov	sp,a
      000822 02r00r00         [24] 2592 	ljmp	__sdcc_banked_ret
                                   2593 ;------------------------------------------------------------
                                   2594 ;Allocation info for local variables in function 'find_program_processes'
                                   2595 ;------------------------------------------------------------
                                   2596 ;symtab                    Allocated to stack - sp -63
                                   2597 ;size                      Allocated to stack - sp -65
                                   2598 ;strtab                    Allocated to stack - sp -67
                                   2599 ;fd                        Allocated to stack - sp -58
                                   2600 ;s                         Allocated to stack - sp -45
                                   2601 ;a                         Allocated to registers r4 r5 
                                   2602 ;name                      Allocated to stack - sp -29
                                   2603 ;sloc0                     Allocated to stack - sp -56
                                   2604 ;sloc1                     Allocated to stack - sp -54
                                   2605 ;sloc2                     Allocated to stack - sp -50
                                   2606 ;sloc3                     Allocated to stack - sp -49
                                   2607 ;sloc4                     Allocated to stack - sp -46
                                   2608 ;------------------------------------------------------------
                                   2609 ;	../../../../core/loader/elfloader.c:292: find_program_processes(int fd,
                                   2610 ;	-----------------------------------------
                                   2611 ;	 function find_program_processes
                                   2612 ;	-----------------------------------------
      000825                       2613 _find_program_processes:
      000825 C0 82            [24] 2614 	push	dpl
      000827 C0 83            [24] 2615 	push	dph
      000829 E5 81            [12] 2616 	mov	a,sp
      00082B 24 39            [12] 2617 	add	a,#0x39
                                   2618 ;	../../../../core/loader/elfloader.c:300: for(a = symtab; a < symtab + size; a += sizeof(s)) {
      00082D F5 81            [12] 2619 	mov	sp,a
      00082F 24 C1            [12] 2620 	add	a,#0xc1
      000831 F8               [12] 2621 	mov	r0,a
      000832 86 04            [24] 2622 	mov	ar4,@r0
      000834 08               [12] 2623 	inc	r0
      000835 86 05            [24] 2624 	mov	ar5,@r0
      000837 E5 81            [12] 2625 	mov	a,sp
      000839 24 D2            [12] 2626 	add	a,#0xd2
      00083B F8               [12] 2627 	mov	r0,a
      00083C E5 81            [12] 2628 	mov	a,sp
      00083E 24 E3            [12] 2629 	add	a,#0xE3
      000840 F6               [12] 2630 	mov	@r0,a
      000841 E5 81            [12] 2631 	mov	a,sp
      000843 24 D2            [12] 2632 	add	a,#0xd2
      000845 F8               [12] 2633 	mov	r0,a
      000846 E5 81            [12] 2634 	mov	a,sp
      000848 24 CE            [12] 2635 	add	a,#0xce
      00084A F9               [12] 2636 	mov	r1,a
      00084B E6               [12] 2637 	mov	a,@r0
      00084C F7               [12] 2638 	mov	@r1,a
      00084D E5 81            [12] 2639 	mov	a,sp
      00084F 24 BF            [12] 2640 	add	a,#0xbf
      000851 F8               [12] 2641 	mov	r0,a
      000852 E5 81            [12] 2642 	mov	a,sp
      000854 24 C8            [12] 2643 	add	a,#0xc8
      000856 F9               [12] 2644 	mov	r1,a
      000857 E6               [12] 2645 	mov	a,@r0
      000858 2C               [12] 2646 	add	a,r4
      000859 F7               [12] 2647 	mov	@r1,a
      00085A 08               [12] 2648 	inc	r0
      00085B E6               [12] 2649 	mov	a,@r0
      00085C 3D               [12] 2650 	addc	a,r5
      00085D 09               [12] 2651 	inc	r1
      00085E F7               [12] 2652 	mov	@r1,a
      00085F                       2653 00107$:
      00085F E5 81            [12] 2654 	mov	a,sp
      000861 24 C8            [12] 2655 	add	a,#0xc8
      000863 F8               [12] 2656 	mov	r0,a
      000864 C3               [12] 2657 	clr	c
      000865 EC               [12] 2658 	mov	a,r4
      000866 96               [12] 2659 	subb	a,@r0
      000867 ED               [12] 2660 	mov	a,r5
      000868 08               [12] 2661 	inc	r0
      000869 96               [12] 2662 	subb	a,@r0
      00086A 40 03            [24] 2663 	jc	00123$
      00086C 02r09rD1         [24] 2664 	ljmp	00105$
      00086F                       2665 00123$:
                                   2666 ;	../../../../core/loader/elfloader.c:301: seek_read(fd, a, (char *)&s, sizeof(s));
      00086F E5 81            [12] 2667 	mov	a,sp
      000871 24 D3            [12] 2668 	add	a,#0xD3
      000873 F9               [12] 2669 	mov	r1,a
      000874 FA               [12] 2670 	mov	r2,a
      000875 7E 00            [12] 2671 	mov	r6,#0x00
      000877 7F 40            [12] 2672 	mov	r7,#0x40
      000879 C0 05            [24] 2673 	push	ar5
      00087B C0 04            [24] 2674 	push	ar4
      00087D C0 01            [24] 2675 	push	ar1
      00087F 74 10            [12] 2676 	mov	a,#0x10
      000881 C0 E0            [24] 2677 	push	acc
      000883 E4               [12] 2678 	clr	a
      000884 C0 E0            [24] 2679 	push	acc
      000886 C0 02            [24] 2680 	push	ar2
      000888 C0 06            [24] 2681 	push	ar6
      00088A C0 07            [24] 2682 	push	ar7
      00088C C0 04            [24] 2683 	push	ar4
      00088E C0 05            [24] 2684 	push	ar5
      000890 E5 81            [12] 2685 	mov	a,sp
      000892 24 BC            [12] 2686 	add	a,#0xbc
      000894 F8               [12] 2687 	mov	r0,a
      000895 86 82            [24] 2688 	mov	dpl,@r0
      000897 08               [12] 2689 	inc	r0
      000898 86 83            [24] 2690 	mov	dph,@r0
      00089A 78r00            [12] 2691 	mov	r0,#_seek_read
      00089C 79s00            [12] 2692 	mov	r1,#(_seek_read >> 8)
      00089E 7As00            [12] 2693 	mov	r2,#(_seek_read >> 16)
      0008A0 12r00r00         [24] 2694 	lcall	__sdcc_banked_call
      0008A3 E5 81            [12] 2695 	mov	a,sp
      0008A5 24 F9            [12] 2696 	add	a,#0xf9
      0008A7 F5 81            [12] 2697 	mov	sp,a
      0008A9 D0 01            [24] 2698 	pop	ar1
      0008AB D0 04            [24] 2699 	pop	ar4
      0008AD D0 05            [24] 2700 	pop	ar5
                                   2701 ;	../../../../core/loader/elfloader.c:303: if(s.st_name != 0) {
      0008AF E5 81            [12] 2702 	mov	a,sp
      0008B1 24 CA            [12] 2703 	add	a,#0xca
      0008B3 F8               [12] 2704 	mov	r0,a
      0008B4 E7               [12] 2705 	mov	a,@r1
      0008B5 F6               [12] 2706 	mov	@r0,a
      0008B6 09               [12] 2707 	inc	r1
      0008B7 E7               [12] 2708 	mov	a,@r1
      0008B8 08               [12] 2709 	inc	r0
      0008B9 F6               [12] 2710 	mov	@r0,a
      0008BA 09               [12] 2711 	inc	r1
      0008BB E7               [12] 2712 	mov	a,@r1
      0008BC 08               [12] 2713 	inc	r0
      0008BD F6               [12] 2714 	mov	@r0,a
      0008BE 09               [12] 2715 	inc	r1
      0008BF E7               [12] 2716 	mov	a,@r1
      0008C0 08               [12] 2717 	inc	r0
      0008C1 F6               [12] 2718 	mov	@r0,a
      0008C2 19               [12] 2719 	dec	r1
      0008C3 19               [12] 2720 	dec	r1
      0008C4 19               [12] 2721 	dec	r1
      0008C5 E5 81            [12] 2722 	mov	a,sp
      0008C7 24 CA            [12] 2723 	add	a,#0xca
      0008C9 F8               [12] 2724 	mov	r0,a
      0008CA E6               [12] 2725 	mov	a,@r0
      0008CB 08               [12] 2726 	inc	r0
      0008CC 46               [12] 2727 	orl	a,@r0
      0008CD 08               [12] 2728 	inc	r0
      0008CE 46               [12] 2729 	orl	a,@r0
      0008CF 08               [12] 2730 	inc	r0
      0008D0 46               [12] 2731 	orl	a,@r0
      0008D1 70 03            [24] 2732 	jnz	00124$
      0008D3 02r09rC7         [24] 2733 	ljmp	00108$
      0008D6                       2734 00124$:
                                   2735 ;	../../../../core/loader/elfloader.c:304: seek_read(fd, strtab + s.st_name, name, sizeof(name));
      0008D6 C0 01            [24] 2736 	push	ar1
      0008D8 E5 81            [12] 2737 	mov	a,sp
      0008DA 24 D1            [12] 2738 	add	a,#0xd1
      0008DC F8               [12] 2739 	mov	r0,a
      0008DD C0 01            [24] 2740 	push	ar1
      0008DF E5 81            [12] 2741 	mov	a,sp
      0008E1 24 CD            [12] 2742 	add	a,#0xcd
      0008E3 F9               [12] 2743 	mov	r1,a
      0008E4 E6               [12] 2744 	mov	a,@r0
      0008E5 F7               [12] 2745 	mov	@r1,a
      0008E6 09               [12] 2746 	inc	r1
      0008E7 77 00            [12] 2747 	mov	@r1,#0x00
      0008E9 09               [12] 2748 	inc	r1
      0008EA 77 40            [12] 2749 	mov	@r1,#0x40
      0008EC D0 01            [24] 2750 	pop	ar1
      0008EE E5 81            [12] 2751 	mov	a,sp
      0008F0 24 BC            [12] 2752 	add	a,#0xbc
      0008F2 F8               [12] 2753 	mov	r0,a
      0008F3 86 02            [24] 2754 	mov	ar2,@r0
      0008F5 08               [12] 2755 	inc	r0
      0008F6 86 03            [24] 2756 	mov	ar3,@r0
      0008F8 E4               [12] 2757 	clr	a
      0008F9 FE               [12] 2758 	mov	r6,a
      0008FA FF               [12] 2759 	mov	r7,a
      0008FB E5 81            [12] 2760 	mov	a,sp
      0008FD 24 C9            [12] 2761 	add	a,#0xc9
      0008FF F8               [12] 2762 	mov	r0,a
      000900 E6               [12] 2763 	mov	a,@r0
      000901 2A               [12] 2764 	add	a,r2
      000902 FA               [12] 2765 	mov	r2,a
      000903 08               [12] 2766 	inc	r0
      000904 E6               [12] 2767 	mov	a,@r0
      000905 3B               [12] 2768 	addc	a,r3
      000906 FB               [12] 2769 	mov	r3,a
      000907 08               [12] 2770 	inc	r0
      000908 E6               [12] 2771 	mov	a,@r0
      000909 3E               [12] 2772 	addc	a,r6
      00090A 08               [12] 2773 	inc	r0
      00090B E6               [12] 2774 	mov	a,@r0
      00090C 3F               [12] 2775 	addc	a,r7
      00090D C0 05            [24] 2776 	push	ar5
      00090F C0 04            [24] 2777 	push	ar4
      000911 C0 01            [24] 2778 	push	ar1
      000913 74 1E            [12] 2779 	mov	a,#0x1E
      000915 C0 E0            [24] 2780 	push	acc
      000917 E4               [12] 2781 	clr	a
      000918 C0 E0            [24] 2782 	push	acc
      00091A E5 81            [12] 2783 	mov	a,sp
      00091C 24 C9            [12] 2784 	add	a,#0xc9
      00091E F8               [12] 2785 	mov	r0,a
      00091F E6               [12] 2786 	mov	a,@r0
      000920 C0 E0            [24] 2787 	push	acc
      000922 08               [12] 2788 	inc	r0
      000923 E6               [12] 2789 	mov	a,@r0
      000924 C0 E0            [24] 2790 	push	acc
      000926 08               [12] 2791 	inc	r0
      000927 E6               [12] 2792 	mov	a,@r0
      000928 C0 E0            [24] 2793 	push	acc
      00092A C0 02            [24] 2794 	push	ar2
      00092C C0 03            [24] 2795 	push	ar3
      00092E E5 81            [12] 2796 	mov	a,sp
      000930 24 BB            [12] 2797 	add	a,#0xbb
      000932 F8               [12] 2798 	mov	r0,a
      000933 86 82            [24] 2799 	mov	dpl,@r0
      000935 08               [12] 2800 	inc	r0
      000936 86 83            [24] 2801 	mov	dph,@r0
      000938 78r00            [12] 2802 	mov	r0,#_seek_read
      00093A 79s00            [12] 2803 	mov	r1,#(_seek_read >> 8)
      00093C 7As00            [12] 2804 	mov	r2,#(_seek_read >> 16)
      00093E 12r00r00         [24] 2805 	lcall	__sdcc_banked_call
      000941 E5 81            [12] 2806 	mov	a,sp
      000943 24 F9            [12] 2807 	add	a,#0xf9
      000945 F5 81            [12] 2808 	mov	sp,a
      000947 D0 01            [24] 2809 	pop	ar1
      000949 D0 04            [24] 2810 	pop	ar4
      00094B D0 05            [24] 2811 	pop	ar5
                                   2812 ;	../../../../core/loader/elfloader.c:305: if(strcmp(name, "autostart_processes") == 0) {
      00094D E5 81            [12] 2813 	mov	a,sp
      00094F 24 CD            [12] 2814 	add	a,#0xcd
      000951 F8               [12] 2815 	mov	r0,a
      000952 86 02            [24] 2816 	mov	ar2,@r0
      000954 7E 00            [12] 2817 	mov	r6,#0x00
      000956 7F 40            [12] 2818 	mov	r7,#0x40
      000958 C0 05            [24] 2819 	push	ar5
      00095A C0 04            [24] 2820 	push	ar4
      00095C C0 01            [24] 2821 	push	ar1
      00095E 74r07            [12] 2822 	mov	a,#__str_0
      000960 C0 E0            [24] 2823 	push	acc
      000962 74s00            [12] 2824 	mov	a,#(__str_0 >> 8)
      000964 C0 E0            [24] 2825 	push	acc
      000966 74 80            [12] 2826 	mov	a,#0x80
      000968 C0 E0            [24] 2827 	push	acc
      00096A 8A 82            [24] 2828 	mov	dpl,r2
      00096C 8E 83            [24] 2829 	mov	dph,r6
      00096E 8F F0            [24] 2830 	mov	b,r7
      000970 78r00            [12] 2831 	mov	r0,#_strcmp
      000972 79s00            [12] 2832 	mov	r1,#(_strcmp >> 8)
      000974 7As00            [12] 2833 	mov	r2,#(_strcmp >> 16)
      000976 12r00r00         [24] 2834 	lcall	__sdcc_banked_call
      000979 AE 82            [24] 2835 	mov	r6,dpl
      00097B AF 83            [24] 2836 	mov	r7,dph
      00097D 15 81            [12] 2837 	dec	sp
      00097F 15 81            [12] 2838 	dec	sp
      000981 15 81            [12] 2839 	dec	sp
      000983 D0 01            [24] 2840 	pop	ar1
      000985 D0 04            [24] 2841 	pop	ar4
      000987 D0 05            [24] 2842 	pop	ar5
      000989 D0 01            [24] 2843 	pop	ar1
      00098B EE               [12] 2844 	mov	a,r6
      00098C 4F               [12] 2845 	orl	a,r7
      00098D 70 38            [24] 2846 	jnz	00108$
                                   2847 ;	../../../../core/loader/elfloader.c:306: return &data.address[s.st_value];
      00098F 90r00r2A         [24] 2848 	mov	dptr,#(_data + 0x0003)
      000992 E5 81            [12] 2849 	mov	a,sp
      000994 24 CF            [12] 2850 	add	a,#0xcf
      000996 F8               [12] 2851 	mov	r0,a
      000997 E0               [24] 2852 	movx	a,@dptr
      000998 F6               [12] 2853 	mov	@r0,a
      000999 A3               [24] 2854 	inc	dptr
      00099A E0               [24] 2855 	movx	a,@dptr
      00099B 08               [12] 2856 	inc	r0
      00099C F6               [12] 2857 	mov	@r0,a
      00099D A3               [24] 2858 	inc	dptr
      00099E E0               [24] 2859 	movx	a,@dptr
      00099F 08               [12] 2860 	inc	r0
      0009A0 F6               [12] 2861 	mov	@r0,a
      0009A1 E9               [12] 2862 	mov	a,r1
      0009A2 24 04            [12] 2863 	add	a,#0x04
      0009A4 F9               [12] 2864 	mov	r1,a
      0009A5 87 02            [24] 2865 	mov	ar2,@r1
      0009A7 09               [12] 2866 	inc	r1
      0009A8 87 03            [24] 2867 	mov	ar3,@r1
      0009AA 09               [12] 2868 	inc	r1
      0009AB 87 06            [24] 2869 	mov	ar6,@r1
      0009AD 09               [12] 2870 	inc	r1
      0009AE 87 07            [24] 2871 	mov	ar7,@r1
      0009B0 E5 81            [12] 2872 	mov	a,sp
      0009B2 24 CF            [12] 2873 	add	a,#0xcf
      0009B4 F8               [12] 2874 	mov	r0,a
      0009B5 EA               [12] 2875 	mov	a,r2
      0009B6 26               [12] 2876 	add	a,@r0
      0009B7 FA               [12] 2877 	mov	r2,a
      0009B8 EB               [12] 2878 	mov	a,r3
      0009B9 08               [12] 2879 	inc	r0
      0009BA 36               [12] 2880 	addc	a,@r0
      0009BB FB               [12] 2881 	mov	r3,a
      0009BC 08               [12] 2882 	inc	r0
      0009BD 86 06            [24] 2883 	mov	ar6,@r0
      0009BF 8A 82            [24] 2884 	mov	dpl,r2
      0009C1 8B 83            [24] 2885 	mov	dph,r3
      0009C3 8E F0            [24] 2886 	mov	b,r6
      0009C5 80 10            [24] 2887 	sjmp	00109$
      0009C7                       2888 00108$:
                                   2889 ;	../../../../core/loader/elfloader.c:300: for(a = symtab; a < symtab + size; a += sizeof(s)) {
      0009C7 74 10            [12] 2890 	mov	a,#0x10
      0009C9 2C               [12] 2891 	add	a,r4
      0009CA FC               [12] 2892 	mov	r4,a
      0009CB E4               [12] 2893 	clr	a
      0009CC 3D               [12] 2894 	addc	a,r5
      0009CD FD               [12] 2895 	mov	r5,a
      0009CE 02r08r5F         [24] 2896 	ljmp	00107$
      0009D1                       2897 00105$:
                                   2898 ;	../../../../core/loader/elfloader.c:310: return NULL;
      0009D1 90 00 00         [24] 2899 	mov	dptr,#0x0000
      0009D4 75 F0 00         [24] 2900 	mov	b,#0x00
      0009D7                       2901 00109$:
      0009D7 E5 81            [12] 2902 	mov	a,sp
      0009D9 24 C5            [12] 2903 	add	a,#0xC5
      0009DB F5 81            [12] 2904 	mov	sp,a
      0009DD 02r00r00         [24] 2905 	ljmp	__sdcc_banked_ret
                                   2906 ;------------------------------------------------------------
                                   2907 ;Allocation info for local variables in function 'elfloader_init'
                                   2908 ;------------------------------------------------------------
                                   2909 ;	../../../../core/loader/elfloader.c:315: elfloader_init(void)
                                   2910 ;	-----------------------------------------
                                   2911 ;	 function elfloader_init
                                   2912 ;	-----------------------------------------
      0009E0                       2913 _elfloader_init:
                                   2914 ;	../../../../core/loader/elfloader.c:317: elfloader_autostart_processes = NULL;
      0009E0 90r00r1E         [24] 2915 	mov	dptr,#_elfloader_autostart_processes
      0009E3 E4               [12] 2916 	clr	a
      0009E4 F0               [24] 2917 	movx	@dptr,a
      0009E5 E4               [12] 2918 	clr	a
      0009E6 A3               [24] 2919 	inc	dptr
      0009E7 F0               [24] 2920 	movx	@dptr,a
      0009E8 E4               [12] 2921 	clr	a
      0009E9 A3               [24] 2922 	inc	dptr
      0009EA F0               [24] 2923 	movx	@dptr,a
      0009EB 02r00r00         [24] 2924 	ljmp	__sdcc_banked_ret
                                   2925 ;------------------------------------------------------------
                                   2926 ;Allocation info for local variables in function 'elfloader_load'
                                   2927 ;------------------------------------------------------------
                                   2928 ;fd                        Allocated to stack - sp -209
                                   2929 ;ehdr                      Allocated to stack - sp -168
                                   2930 ;shdr                      Allocated to stack - sp -116
                                   2931 ;strtable                  Allocated to stack - sp -76
                                   2932 ;strs                      Allocated to stack - sp -36
                                   2933 ;shdrptr                   Allocated to stack - sp -34
                                   2934 ;nameptr                   Allocated to registers r3 r4 
                                   2935 ;name                      Allocated to stack - sp -32
                                   2936 ;i                         Allocated to stack - sp -20
                                   2937 ;shdrnum                   Allocated to stack - sp -18
                                   2938 ;shdrsize                  Allocated to stack - sp -16
                                   2939 ;using_relas               Allocated to stack - sp -14
                                   2940 ;textoff                   Allocated to stack - sp -13
                                   2941 ;textsize                  Allocated to stack - sp -11
                                   2942 ;textrelaoff               Allocated to registers r2 r5 
                                   2943 ;textrelasize              Allocated to stack - sp -186
                                   2944 ;dataoff                   Allocated to stack - sp -9
                                   2945 ;datasize                  Allocated to stack - sp -188
                                   2946 ;datarelaoff               Allocated to stack - sp -207
                                   2947 ;datarelasize              Allocated to stack - sp -190
                                   2948 ;rodataoff                 Allocated to stack - sp -7
                                   2949 ;rodatasize                Allocated to stack - sp -192
                                   2950 ;rodatarelaoff             Allocated to stack - sp -205
                                   2951 ;rodatarelasize            Allocated to stack - sp -200
                                   2952 ;symtaboff                 Allocated to stack - sp -5
                                   2953 ;symtabsize                Allocated to stack - sp -3
                                   2954 ;strtaboff                 Allocated to stack - sp -1
                                   2955 ;strtabsize                Allocated to stack - sp -196
                                   2956 ;bsssize                   Allocated to stack - sp -203
                                   2957 ;process                   Allocated to registers r5 r6 r7 
                                   2958 ;ret                       Allocated to registers r6 r7 
                                   2959 ;sloc0                     Allocated to stack - sp -207
                                   2960 ;sloc1                     Allocated to stack - sp -205
                                   2961 ;sloc2                     Allocated to stack - sp -203
                                   2962 ;sloc3                     Allocated to stack - sp -201
                                   2963 ;sloc4                     Allocated to stack - sp -200
                                   2964 ;sloc5                     Allocated to stack - sp -197
                                   2965 ;sloc6                     Allocated to stack - sp -196
                                   2966 ;sloc7                     Allocated to stack - sp -192
                                   2967 ;sloc8                     Allocated to stack - sp -190
                                   2968 ;sloc9                     Allocated to stack - sp -188
                                   2969 ;sloc10                    Allocated to stack - sp -186
                                   2970 ;sloc11                    Allocated to stack - sp +12
                                   2971 ;sloc12                    Allocated to stack - sp -184
                                   2972 ;sloc13                    Allocated to stack - sp -183
                                   2973 ;sloc14                    Allocated to stack - sp -182
                                   2974 ;sloc15                    Allocated to stack - sp -181
                                   2975 ;sloc16                    Allocated to stack - sp -180
                                   2976 ;sloc17                    Allocated to stack - sp -179
                                   2977 ;sloc18                    Allocated to stack - sp -178
                                   2978 ;sloc19                    Allocated to stack - sp -177
                                   2979 ;sloc20                    Allocated to stack - sp -176
                                   2980 ;sloc21                    Allocated to stack - sp -175
                                   2981 ;sloc22                    Allocated to stack - sp -174
                                   2982 ;sloc23                    Allocated to stack - sp -173
                                   2983 ;sloc24                    Allocated to stack - sp -172
                                   2984 ;------------------------------------------------------------
                                   2985 ;	../../../../core/loader/elfloader.c:337: elfloader_load(int fd)
                                   2986 ;	-----------------------------------------
                                   2987 ;	 function elfloader_load
                                   2988 ;	-----------------------------------------
      0009EE                       2989 _elfloader_load:
      0009EE C0 82            [24] 2990 	push	dpl
      0009F0 C0 83            [24] 2991 	push	dph
      0009F2 E5 81            [12] 2992 	mov	a,sp
      0009F4 24 D0            [12] 2993 	add	a,#0xD0
                                   2994 ;	../../../../core/loader/elfloader.c:350: unsigned char using_relas = -1;
      0009F6 F5 81            [12] 2995 	mov	sp,a
      0009F8 24 F2            [12] 2996 	add	a,#0xf2
      0009FA F8               [12] 2997 	mov	r0,a
      0009FB 76 FF            [12] 2998 	mov	@r0,#0xFF
                                   2999 ;	../../../../core/loader/elfloader.c:351: unsigned short textoff = 0, textsize, textrelaoff = 0, textrelasize;
      0009FD E5 81            [12] 3000 	mov	a,sp
      0009FF 24 F3            [12] 3001 	add	a,#0xf3
      000A01 F8               [12] 3002 	mov	r0,a
      000A02 E4               [12] 3003 	clr	a
      000A03 F6               [12] 3004 	mov	@r0,a
      000A04 08               [12] 3005 	inc	r0
      000A05 F6               [12] 3006 	mov	@r0,a
                                   3007 ;	../../../../core/loader/elfloader.c:352: unsigned short dataoff = 0, datasize, datarelaoff = 0, datarelasize;
      000A06 E4               [12] 3008 	clr	a
      000A07 FA               [12] 3009 	mov	r2,a
      000A08 FD               [12] 3010 	mov	r5,a
      000A09 E5 81            [12] 3011 	mov	a,sp
      000A0B 24 F7            [12] 3012 	add	a,#0xf7
      000A0D F8               [12] 3013 	mov	r0,a
      000A0E E4               [12] 3014 	clr	a
      000A0F F6               [12] 3015 	mov	@r0,a
      000A10 08               [12] 3016 	inc	r0
      000A11 F6               [12] 3017 	mov	@r0,a
      000A12 E5 81            [12] 3018 	mov	a,sp
      000A14 24 31            [12] 3019 	add	a,#0x31
      000A16 F8               [12] 3020 	mov	r0,a
      000A17 E4               [12] 3021 	clr	a
      000A18 F6               [12] 3022 	mov	@r0,a
      000A19 08               [12] 3023 	inc	r0
      000A1A F6               [12] 3024 	mov	@r0,a
                                   3025 ;	../../../../core/loader/elfloader.c:353: unsigned short rodataoff = 0, rodatasize, rodatarelaoff = 0, rodatarelasize;
      000A1B E5 81            [12] 3026 	mov	a,sp
      000A1D 24 F9            [12] 3027 	add	a,#0xf9
      000A1F F8               [12] 3028 	mov	r0,a
      000A20 E4               [12] 3029 	clr	a
      000A21 F6               [12] 3030 	mov	@r0,a
      000A22 08               [12] 3031 	inc	r0
      000A23 F6               [12] 3032 	mov	@r0,a
      000A24 E5 81            [12] 3033 	mov	a,sp
      000A26 24 33            [12] 3034 	add	a,#0x33
      000A28 F8               [12] 3035 	mov	r0,a
      000A29 E4               [12] 3036 	clr	a
      000A2A F6               [12] 3037 	mov	@r0,a
      000A2B 08               [12] 3038 	inc	r0
      000A2C F6               [12] 3039 	mov	@r0,a
                                   3040 ;	../../../../core/loader/elfloader.c:354: unsigned short symtaboff = 0, symtabsize;
      000A2D E5 81            [12] 3041 	mov	a,sp
      000A2F 24 FB            [12] 3042 	add	a,#0xfb
      000A31 F8               [12] 3043 	mov	r0,a
      000A32 E4               [12] 3044 	clr	a
      000A33 F6               [12] 3045 	mov	@r0,a
      000A34 08               [12] 3046 	inc	r0
      000A35 F6               [12] 3047 	mov	@r0,a
                                   3048 ;	../../../../core/loader/elfloader.c:355: unsigned short strtaboff = 0, strtabsize;
      000A36 A8 81            [24] 3049 	mov	r0,sp
      000A38 18               [12] 3050 	dec	r0
      000A39 E4               [12] 3051 	clr	a
      000A3A F6               [12] 3052 	mov	@r0,a
      000A3B 08               [12] 3053 	inc	r0
      000A3C F6               [12] 3054 	mov	@r0,a
                                   3055 ;	../../../../core/loader/elfloader.c:356: unsigned short bsssize = 0;
      000A3D E5 81            [12] 3056 	mov	a,sp
      000A3F 24 35            [12] 3057 	add	a,#0x35
      000A41 F8               [12] 3058 	mov	r0,a
      000A42 E4               [12] 3059 	clr	a
      000A43 F6               [12] 3060 	mov	@r0,a
      000A44 08               [12] 3061 	inc	r0
      000A45 F6               [12] 3062 	mov	@r0,a
                                   3063 ;	../../../../core/loader/elfloader.c:361: elfloader_unknown[0] = 0;
      000A46 90r00r00         [24] 3064 	mov	dptr,#_elfloader_unknown
      000A49 E4               [12] 3065 	clr	a
      000A4A F0               [24] 3066 	movx	@dptr,a
                                   3067 ;	../../../../core/loader/elfloader.c:364: seek_read(fd, 0, (char *)&ehdr, sizeof(ehdr));
      000A4B E5 81            [12] 3068 	mov	a,sp
      000A4D 24 37            [12] 3069 	add	a,#0x37
      000A4F F8               [12] 3070 	mov	r0,a
      000A50 E5 81            [12] 3071 	mov	a,sp
      000A52 24 58            [12] 3072 	add	a,#0x58
      000A54 F6               [12] 3073 	mov	@r0,a
      000A55 E5 81            [12] 3074 	mov	a,sp
      000A57 24 37            [12] 3075 	add	a,#0x37
      000A59 F8               [12] 3076 	mov	r0,a
      000A5A 86 04            [24] 3077 	mov	ar4,@r0
      000A5C 8C 03            [24] 3078 	mov	ar3,r4
      000A5E 7C 00            [12] 3079 	mov	r4,#0x00
      000A60 7F 40            [12] 3080 	mov	r7,#0x40
      000A62 C0 05            [24] 3081 	push	ar5
      000A64 C0 02            [24] 3082 	push	ar2
      000A66 74 34            [12] 3083 	mov	a,#0x34
      000A68 C0 E0            [24] 3084 	push	acc
      000A6A E4               [12] 3085 	clr	a
      000A6B C0 E0            [24] 3086 	push	acc
      000A6D C0 03            [24] 3087 	push	ar3
      000A6F C0 04            [24] 3088 	push	ar4
      000A71 C0 07            [24] 3089 	push	ar7
      000A73 E4               [12] 3090 	clr	a
      000A74 C0 E0            [24] 3091 	push	acc
      000A76 C0 E0            [24] 3092 	push	acc
      000A78 E5 81            [12] 3093 	mov	a,sp
      000A7A 24 26            [12] 3094 	add	a,#0x26
      000A7C F8               [12] 3095 	mov	r0,a
      000A7D 86 82            [24] 3096 	mov	dpl,@r0
      000A7F 08               [12] 3097 	inc	r0
      000A80 86 83            [24] 3098 	mov	dph,@r0
      000A82 78r00            [12] 3099 	mov	r0,#_seek_read
      000A84 79s00            [12] 3100 	mov	r1,#(_seek_read >> 8)
      000A86 7As00            [12] 3101 	mov	r2,#(_seek_read >> 16)
      000A88 12r00r00         [24] 3102 	lcall	__sdcc_banked_call
      000A8B E5 81            [12] 3103 	mov	a,sp
      000A8D 24 F9            [12] 3104 	add	a,#0xf9
      000A8F F5 81            [12] 3105 	mov	sp,a
      000A91 D0 02            [24] 3106 	pop	ar2
      000A93 D0 05            [24] 3107 	pop	ar5
                                   3108 ;	../../../../core/loader/elfloader.c:369: if(memcmp(ehdr.e_ident, elf_magic_header, sizeof(elf_magic_header)) != 0) {
      000A95 E5 81            [12] 3109 	mov	a,sp
      000A97 24 37            [12] 3110 	add	a,#0x37
      000A99 F8               [12] 3111 	mov	r0,a
      000A9A 86 07            [24] 3112 	mov	ar7,@r0
      000A9C 7E 00            [12] 3113 	mov	r6,#0x00
      000A9E 7C 40            [12] 3114 	mov	r4,#0x40
      000AA0 C0 05            [24] 3115 	push	ar5
      000AA2 C0 02            [24] 3116 	push	ar2
      000AA4 74 07            [12] 3117 	mov	a,#0x07
      000AA6 C0 E0            [24] 3118 	push	acc
      000AA8 E4               [12] 3119 	clr	a
      000AA9 C0 E0            [24] 3120 	push	acc
      000AAB 74r00            [12] 3121 	mov	a,#_elf_magic_header
      000AAD C0 E0            [24] 3122 	push	acc
      000AAF 74s00            [12] 3123 	mov	a,#(_elf_magic_header >> 8)
      000AB1 C0 E0            [24] 3124 	push	acc
      000AB3 74 80            [12] 3125 	mov	a,#0x80
      000AB5 C0 E0            [24] 3126 	push	acc
      000AB7 8F 82            [24] 3127 	mov	dpl,r7
      000AB9 8E 83            [24] 3128 	mov	dph,r6
      000ABB 8C F0            [24] 3129 	mov	b,r4
      000ABD 78r00            [12] 3130 	mov	r0,#_memcmp
      000ABF 79s00            [12] 3131 	mov	r1,#(_memcmp >> 8)
      000AC1 7As00            [12] 3132 	mov	r2,#(_memcmp >> 16)
      000AC3 12r00r00         [24] 3133 	lcall	__sdcc_banked_call
      000AC6 AE 82            [24] 3134 	mov	r6,dpl
      000AC8 AF 83            [24] 3135 	mov	r7,dph
      000ACA E5 81            [12] 3136 	mov	a,sp
      000ACC 24 FB            [12] 3137 	add	a,#0xfb
      000ACE F5 81            [12] 3138 	mov	sp,a
      000AD0 D0 02            [24] 3139 	pop	ar2
      000AD2 D0 05            [24] 3140 	pop	ar5
      000AD4 EE               [12] 3141 	mov	a,r6
      000AD5 4F               [12] 3142 	orl	a,r7
      000AD6 60 06            [24] 3143 	jz	00104$
                                   3144 ;	../../../../core/loader/elfloader.c:371: return ELFLOADER_BAD_ELF_HEADER;
      000AD8 90 00 01         [24] 3145 	mov	dptr,#0x0001
      000ADB 02r1Ar3C         [24] 3146 	ljmp	00207$
      000ADE                       3147 00104$:
                                   3148 ;	../../../../core/loader/elfloader.c:375: shdrptr = ehdr.e_shoff;
      000ADE C0 02            [24] 3149 	push	ar2
      000AE0 C0 05            [24] 3150 	push	ar5
      000AE2 E5 81            [12] 3151 	mov	a,sp
      000AE4 24 35            [12] 3152 	add	a,#0x35
      000AE6 F8               [12] 3153 	mov	r0,a
      000AE7 74 20            [12] 3154 	mov	a,#0x20
      000AE9 26               [12] 3155 	add	a,@r0
      000AEA F9               [12] 3156 	mov	r1,a
      000AEB 87 03            [24] 3157 	mov	ar3,@r1
      000AED 09               [12] 3158 	inc	r1
      000AEE 87 04            [24] 3159 	mov	ar4,@r1
      000AF0 09               [12] 3160 	inc	r1
      000AF1 87 06            [24] 3161 	mov	ar6,@r1
      000AF3 09               [12] 3162 	inc	r1
      000AF4 87 07            [24] 3163 	mov	ar7,@r1
      000AF6 19               [12] 3164 	dec	r1
      000AF7 19               [12] 3165 	dec	r1
      000AF8 19               [12] 3166 	dec	r1
      000AF9 E5 81            [12] 3167 	mov	a,sp
      000AFB 24 DC            [12] 3168 	add	a,#0xdc
      000AFD F8               [12] 3169 	mov	r0,a
      000AFE A6 03            [24] 3170 	mov	@r0,ar3
      000B00 08               [12] 3171 	inc	r0
      000B01 A6 04            [24] 3172 	mov	@r0,ar4
                                   3173 ;	../../../../core/loader/elfloader.c:376: seek_read(fd, shdrptr, (char *)&shdr, sizeof(shdr));
      000B03 E5 81            [12] 3174 	mov	a,sp
      000B05 24 8A            [12] 3175 	add	a,#0x8A
      000B07 F8               [12] 3176 	mov	r0,a
      000B08 FD               [12] 3177 	mov	r5,a
      000B09 7E 00            [12] 3178 	mov	r6,#0x00
      000B0B 7F 40            [12] 3179 	mov	r7,#0x40
      000B0D C0 05            [24] 3180 	push	ar5
      000B0F C0 02            [24] 3181 	push	ar2
      000B11 C0 01            [24] 3182 	push	ar1
      000B13 C0 00            [24] 3183 	push	ar0
      000B15 74 28            [12] 3184 	mov	a,#0x28
      000B17 C0 E0            [24] 3185 	push	acc
      000B19 E4               [12] 3186 	clr	a
      000B1A C0 E0            [24] 3187 	push	acc
      000B1C C0 05            [24] 3188 	push	ar5
      000B1E C0 06            [24] 3189 	push	ar6
      000B20 C0 07            [24] 3190 	push	ar7
      000B22 85 00 F0         [24] 3191 	mov	b,ar0
      000B25 E5 81            [12] 3192 	mov	a,sp
      000B27 24 D3            [12] 3193 	add	a,#0xd3
      000B29 F8               [12] 3194 	mov	r0,a
      000B2A E6               [12] 3195 	mov	a,@r0
      000B2B C0 E0            [24] 3196 	push	acc
      000B2D 08               [12] 3197 	inc	r0
      000B2E E6               [12] 3198 	mov	a,@r0
      000B2F C0 E0            [24] 3199 	push	acc
      000B31 A8 F0            [24] 3200 	mov	r0,b
      000B33 C0 00            [24] 3201 	push	ar0
      000B35 E5 81            [12] 3202 	mov	a,sp
      000B37 24 21            [12] 3203 	add	a,#0x21
      000B39 F8               [12] 3204 	mov	r0,a
      000B3A 86 82            [24] 3205 	mov	dpl,@r0
      000B3C 08               [12] 3206 	inc	r0
      000B3D 86 83            [24] 3207 	mov	dph,@r0
      000B3F D0 00            [24] 3208 	pop	ar0
      000B41 78r00            [12] 3209 	mov	r0,#_seek_read
      000B43 79s00            [12] 3210 	mov	r1,#(_seek_read >> 8)
      000B45 7As00            [12] 3211 	mov	r2,#(_seek_read >> 16)
      000B47 12r00r00         [24] 3212 	lcall	__sdcc_banked_call
      000B4A E5 81            [12] 3213 	mov	a,sp
      000B4C 24 F9            [12] 3214 	add	a,#0xf9
      000B4E F5 81            [12] 3215 	mov	sp,a
      000B50 D0 00            [24] 3216 	pop	ar0
      000B52 D0 01            [24] 3217 	pop	ar1
      000B54 D0 02            [24] 3218 	pop	ar2
      000B56 D0 05            [24] 3219 	pop	ar5
                                   3220 ;	../../../../core/loader/elfloader.c:379: shdrsize = ehdr.e_shentsize;
      000B58 C0 00            [24] 3221 	push	ar0
      000B5A E5 81            [12] 3222 	mov	a,sp
      000B5C 24 34            [12] 3223 	add	a,#0x34
      000B5E F8               [12] 3224 	mov	r0,a
      000B5F 74 2E            [12] 3225 	mov	a,#0x2E
      000B61 26               [12] 3226 	add	a,@r0
      000B62 FF               [12] 3227 	mov	r7,a
      000B63 E5 81            [12] 3228 	mov	a,sp
      000B65 24 ED            [12] 3229 	add	a,#0xed
      000B67 F8               [12] 3230 	mov	r0,a
      000B68 C0 01            [24] 3231 	push	ar1
      000B6A A9 07            [24] 3232 	mov	r1,ar7
      000B6C E7               [12] 3233 	mov	a,@r1
      000B6D F6               [12] 3234 	mov	@r0,a
      000B6E 09               [12] 3235 	inc	r1
      000B6F E7               [12] 3236 	mov	a,@r1
      000B70 08               [12] 3237 	inc	r0
      000B71 F6               [12] 3238 	mov	@r0,a
      000B72 D0 01            [24] 3239 	pop	ar1
                                   3240 ;	../../../../core/loader/elfloader.c:380: shdrnum = ehdr.e_shnum;
      000B74 E5 81            [12] 3241 	mov	a,sp
      000B76 24 34            [12] 3242 	add	a,#0x34
      000B78 F8               [12] 3243 	mov	r0,a
      000B79 74 30            [12] 3244 	mov	a,#0x30
      000B7B 26               [12] 3245 	add	a,@r0
      000B7C FF               [12] 3246 	mov	r7,a
      000B7D E5 81            [12] 3247 	mov	a,sp
      000B7F 24 EB            [12] 3248 	add	a,#0xeb
      000B81 F8               [12] 3249 	mov	r0,a
      000B82 C0 01            [24] 3250 	push	ar1
      000B84 A9 07            [24] 3251 	mov	r1,ar7
      000B86 E7               [12] 3252 	mov	a,@r1
      000B87 F6               [12] 3253 	mov	@r0,a
      000B88 09               [12] 3254 	inc	r1
      000B89 E7               [12] 3255 	mov	a,@r1
      000B8A 08               [12] 3256 	inc	r0
      000B8B F6               [12] 3257 	mov	@r0,a
      000B8C D0 01            [24] 3258 	pop	ar1
      000B8E D0 00            [24] 3259 	pop	ar0
                                   3260 ;	../../../../core/loader/elfloader.c:386: (char *)&strtable, sizeof(strtable));
      000B90 E5 81            [12] 3261 	mov	a,sp
      000B92 24 B2            [12] 3262 	add	a,#0xB2
      000B94 FC               [12] 3263 	mov	r4,a
      000B95 FE               [12] 3264 	mov	r6,a
      000B96 C0 00            [24] 3265 	push	ar0
      000B98 E5 81            [12] 3266 	mov	a,sp
      000B9A 24 35            [12] 3267 	add	a,#0x35
      000B9C F8               [12] 3268 	mov	r0,a
      000B9D A6 06            [24] 3269 	mov	@r0,ar6
      000B9F 08               [12] 3270 	inc	r0
      000BA0 76 00            [12] 3271 	mov	@r0,#0x00
      000BA2 08               [12] 3272 	inc	r0
      000BA3 76 40            [12] 3273 	mov	@r0,#0x40
                                   3274 ;	../../../../core/loader/elfloader.c:385: seek_read(fd, ehdr.e_shoff + shdrsize * ehdr.e_shstrndx,
      000BA5 E5 81            [12] 3275 	mov	a,sp
      000BA7 24 39            [12] 3276 	add	a,#0x39
      000BA9 F8               [12] 3277 	mov	r0,a
      000BAA E7               [12] 3278 	mov	a,@r1
      000BAB F6               [12] 3279 	mov	@r0,a
      000BAC 09               [12] 3280 	inc	r1
      000BAD E7               [12] 3281 	mov	a,@r1
      000BAE 08               [12] 3282 	inc	r0
      000BAF F6               [12] 3283 	mov	@r0,a
      000BB0 09               [12] 3284 	inc	r1
      000BB1 E7               [12] 3285 	mov	a,@r1
      000BB2 08               [12] 3286 	inc	r0
      000BB3 F6               [12] 3287 	mov	@r0,a
      000BB4 09               [12] 3288 	inc	r1
      000BB5 E7               [12] 3289 	mov	a,@r1
      000BB6 08               [12] 3290 	inc	r0
      000BB7 F6               [12] 3291 	mov	@r0,a
      000BB8 19               [12] 3292 	dec	r1
      000BB9 19               [12] 3293 	dec	r1
      000BBA 19               [12] 3294 	dec	r1
      000BBB E5 81            [12] 3295 	mov	a,sp
      000BBD 24 34            [12] 3296 	add	a,#0x34
      000BBF F8               [12] 3297 	mov	r0,a
      000BC0 74 32            [12] 3298 	mov	a,#0x32
      000BC2 26               [12] 3299 	add	a,@r0
      000BC3 FF               [12] 3300 	mov	r7,a
      000BC4 A8 07            [24] 3301 	mov	r0,ar7
      000BC6 86 06            [24] 3302 	mov	ar6,@r0
      000BC8 08               [12] 3303 	inc	r0
      000BC9 86 07            [24] 3304 	mov	ar7,@r0
      000BCB D0 00            [24] 3305 	pop	ar0
      000BCD C0 05            [24] 3306 	push	ar5
      000BCF C0 04            [24] 3307 	push	ar4
      000BD1 C0 02            [24] 3308 	push	ar2
      000BD3 C0 01            [24] 3309 	push	ar1
      000BD5 C0 00            [24] 3310 	push	ar0
      000BD7 C0 06            [24] 3311 	push	ar6
      000BD9 C0 07            [24] 3312 	push	ar7
      000BDB C0 00            [24] 3313 	push	ar0
      000BDD E5 81            [12] 3314 	mov	a,sp
      000BDF 24 E6            [12] 3315 	add	a,#0xe6
      000BE1 F8               [12] 3316 	mov	r0,a
      000BE2 86 82            [24] 3317 	mov	dpl,@r0
      000BE4 08               [12] 3318 	inc	r0
      000BE5 86 83            [24] 3319 	mov	dph,@r0
      000BE7 D0 00            [24] 3320 	pop	ar0
      000BE9 12r00r00         [24] 3321 	lcall	__mulint
      000BEC AE 82            [24] 3322 	mov	r6,dpl
      000BEE AF 83            [24] 3323 	mov	r7,dph
      000BF0 15 81            [12] 3324 	dec	sp
      000BF2 15 81            [12] 3325 	dec	sp
      000BF4 D0 00            [24] 3326 	pop	ar0
      000BF6 D0 01            [24] 3327 	pop	ar1
      000BF8 D0 02            [24] 3328 	pop	ar2
      000BFA D0 04            [24] 3329 	pop	ar4
      000BFC D0 05            [24] 3330 	pop	ar5
      000BFE 7D 00            [12] 3331 	mov	r5,#0x00
      000C00 7A 00            [12] 3332 	mov	r2,#0x00
      000C02 C0 00            [24] 3333 	push	ar0
      000C04 E5 81            [12] 3334 	mov	a,sp
      000C06 24 39            [12] 3335 	add	a,#0x39
      000C08 F8               [12] 3336 	mov	r0,a
      000C09 EE               [12] 3337 	mov	a,r6
      000C0A 26               [12] 3338 	add	a,@r0
      000C0B FE               [12] 3339 	mov	r6,a
      000C0C EF               [12] 3340 	mov	a,r7
      000C0D 08               [12] 3341 	inc	r0
      000C0E 36               [12] 3342 	addc	a,@r0
      000C0F FF               [12] 3343 	mov	r7,a
      000C10 ED               [12] 3344 	mov	a,r5
      000C11 08               [12] 3345 	inc	r0
      000C12 36               [12] 3346 	addc	a,@r0
      000C13 FD               [12] 3347 	mov	r5,a
      000C14 EA               [12] 3348 	mov	a,r2
      000C15 08               [12] 3349 	inc	r0
      000C16 36               [12] 3350 	addc	a,@r0
      000C17 FA               [12] 3351 	mov	r2,a
      000C18 D0 00            [24] 3352 	pop	ar0
      000C1A C0 05            [24] 3353 	push	ar5
      000C1C C0 04            [24] 3354 	push	ar4
      000C1E C0 02            [24] 3355 	push	ar2
      000C20 C0 01            [24] 3356 	push	ar1
      000C22 C0 00            [24] 3357 	push	ar0
      000C24 74 28            [12] 3358 	mov	a,#0x28
      000C26 C0 E0            [24] 3359 	push	acc
      000C28 E4               [12] 3360 	clr	a
      000C29 C0 E0            [24] 3361 	push	acc
      000C2B 85 00 F0         [24] 3362 	mov	b,ar0
      000C2E E5 81            [12] 3363 	mov	a,sp
      000C30 24 2F            [12] 3364 	add	a,#0x2f
      000C32 F8               [12] 3365 	mov	r0,a
      000C33 E6               [12] 3366 	mov	a,@r0
      000C34 C0 E0            [24] 3367 	push	acc
      000C36 08               [12] 3368 	inc	r0
      000C37 E6               [12] 3369 	mov	a,@r0
      000C38 C0 E0            [24] 3370 	push	acc
      000C3A 08               [12] 3371 	inc	r0
      000C3B E6               [12] 3372 	mov	a,@r0
      000C3C C0 E0            [24] 3373 	push	acc
      000C3E A8 F0            [24] 3374 	mov	r0,b
      000C40 C0 06            [24] 3375 	push	ar6
      000C42 C0 07            [24] 3376 	push	ar7
      000C44 C0 00            [24] 3377 	push	ar0
      000C46 E5 81            [12] 3378 	mov	a,sp
      000C48 24 20            [12] 3379 	add	a,#0x20
      000C4A F8               [12] 3380 	mov	r0,a
      000C4B 86 82            [24] 3381 	mov	dpl,@r0
      000C4D 08               [12] 3382 	inc	r0
      000C4E 86 83            [24] 3383 	mov	dph,@r0
      000C50 D0 00            [24] 3384 	pop	ar0
      000C52 78r00            [12] 3385 	mov	r0,#_seek_read
      000C54 79s00            [12] 3386 	mov	r1,#(_seek_read >> 8)
      000C56 7As00            [12] 3387 	mov	r2,#(_seek_read >> 16)
      000C58 12r00r00         [24] 3388 	lcall	__sdcc_banked_call
      000C5B E5 81            [12] 3389 	mov	a,sp
      000C5D 24 F9            [12] 3390 	add	a,#0xf9
      000C5F F5 81            [12] 3391 	mov	sp,a
      000C61 D0 00            [24] 3392 	pop	ar0
      000C63 D0 01            [24] 3393 	pop	ar1
      000C65 D0 02            [24] 3394 	pop	ar2
      000C67 D0 04            [24] 3395 	pop	ar4
      000C69 D0 05            [24] 3396 	pop	ar5
                                   3397 ;	../../../../core/loader/elfloader.c:391: strs = strtable.sh_offset;
      000C6B 74 10            [12] 3398 	mov	a,#0x10
      000C6D 2C               [12] 3399 	add	a,r4
      000C6E FF               [12] 3400 	mov	r7,a
      000C6F C0 00            [24] 3401 	push	ar0
      000C71 A8 07            [24] 3402 	mov	r0,ar7
      000C73 86 02            [24] 3403 	mov	ar2,@r0
      000C75 08               [12] 3404 	inc	r0
      000C76 86 05            [24] 3405 	mov	ar5,@r0
      000C78 08               [12] 3406 	inc	r0
      000C79 86 06            [24] 3407 	mov	ar6,@r0
      000C7B 08               [12] 3408 	inc	r0
      000C7C 86 07            [24] 3409 	mov	ar7,@r0
      000C7E E5 81            [12] 3410 	mov	a,sp
      000C80 24 D9            [12] 3411 	add	a,#0xd9
      000C82 F8               [12] 3412 	mov	r0,a
      000C83 A6 02            [24] 3413 	mov	@r0,ar2
      000C85 08               [12] 3414 	inc	r0
      000C86 A6 05            [24] 3415 	mov	@r0,ar5
                                   3416 ;	../../../../core/loader/elfloader.c:414: rodatasize = rodatarelasize = symtabsize = strtabsize = 0;
      000C88 E5 81            [12] 3417 	mov	a,sp
      000C8A 24 39            [12] 3418 	add	a,#0x39
      000C8C F8               [12] 3419 	mov	r0,a
      000C8D E4               [12] 3420 	clr	a
      000C8E F6               [12] 3421 	mov	@r0,a
      000C8F 08               [12] 3422 	inc	r0
      000C90 F6               [12] 3423 	mov	@r0,a
      000C91 E5 81            [12] 3424 	mov	a,sp
      000C93 24 FA            [12] 3425 	add	a,#0xfa
      000C95 F8               [12] 3426 	mov	r0,a
      000C96 E4               [12] 3427 	clr	a
      000C97 F6               [12] 3428 	mov	@r0,a
      000C98 08               [12] 3429 	inc	r0
      000C99 F6               [12] 3430 	mov	@r0,a
      000C9A E5 81            [12] 3431 	mov	a,sp
      000C9C 24 35            [12] 3432 	add	a,#0x35
      000C9E F8               [12] 3433 	mov	r0,a
      000C9F E4               [12] 3434 	clr	a
      000CA0 F6               [12] 3435 	mov	@r0,a
      000CA1 08               [12] 3436 	inc	r0
      000CA2 F6               [12] 3437 	mov	@r0,a
      000CA3 E5 81            [12] 3438 	mov	a,sp
      000CA5 24 3D            [12] 3439 	add	a,#0x3d
      000CA7 F8               [12] 3440 	mov	r0,a
      000CA8 E4               [12] 3441 	clr	a
      000CA9 F6               [12] 3442 	mov	@r0,a
      000CAA 08               [12] 3443 	inc	r0
      000CAB F6               [12] 3444 	mov	@r0,a
      000CAC E5 81            [12] 3445 	mov	a,sp
      000CAE 24 3F            [12] 3446 	add	a,#0x3f
      000CB0 F8               [12] 3447 	mov	r0,a
      000CB1 E4               [12] 3448 	clr	a
      000CB2 F6               [12] 3449 	mov	@r0,a
      000CB3 08               [12] 3450 	inc	r0
      000CB4 F6               [12] 3451 	mov	@r0,a
      000CB5 E5 81            [12] 3452 	mov	a,sp
      000CB7 24 41            [12] 3453 	add	a,#0x41
      000CB9 F8               [12] 3454 	mov	r0,a
      000CBA E4               [12] 3455 	clr	a
      000CBB F6               [12] 3456 	mov	@r0,a
      000CBC 08               [12] 3457 	inc	r0
      000CBD F6               [12] 3458 	mov	@r0,a
      000CBE E5 81            [12] 3459 	mov	a,sp
      000CC0 24 43            [12] 3460 	add	a,#0x43
      000CC2 F8               [12] 3461 	mov	r0,a
      000CC3 E4               [12] 3462 	clr	a
      000CC4 F6               [12] 3463 	mov	@r0,a
      000CC5 08               [12] 3464 	inc	r0
      000CC6 F6               [12] 3465 	mov	@r0,a
      000CC7 E5 81            [12] 3466 	mov	a,sp
      000CC9 24 F2            [12] 3467 	add	a,#0xf2
      000CCB F8               [12] 3468 	mov	r0,a
      000CCC E4               [12] 3469 	clr	a
      000CCD F6               [12] 3470 	mov	@r0,a
      000CCE 08               [12] 3471 	inc	r0
      000CCF F6               [12] 3472 	mov	@r0,a
      000CD0 D0 00            [24] 3473 	pop	ar0
                                   3474 ;	../../../../core/loader/elfloader.c:416: bss.number = data.number = rodata.number = text.number = -1;
      000CD2 90r00r33         [24] 3475 	mov	dptr,#_text
      000CD5 74 FF            [12] 3476 	mov	a,#0xFF
      000CD7 F0               [24] 3477 	movx	@dptr,a
      000CD8 90r00r2D         [24] 3478 	mov	dptr,#_rodata
      000CDB 74 FF            [12] 3479 	mov	a,#0xFF
      000CDD F0               [24] 3480 	movx	@dptr,a
      000CDE 90r00r27         [24] 3481 	mov	dptr,#_data
      000CE1 74 FF            [12] 3482 	mov	a,#0xFF
      000CE3 F0               [24] 3483 	movx	@dptr,a
      000CE4 90r00r21         [24] 3484 	mov	dptr,#_bss
      000CE7 74 FF            [12] 3485 	mov	a,#0xFF
      000CE9 F0               [24] 3486 	movx	@dptr,a
                                   3487 ;	../../../../core/loader/elfloader.c:418: shdrptr = ehdr.e_shoff;
      000CEA 87 02            [24] 3488 	mov	ar2,@r1
      000CEC 09               [12] 3489 	inc	r1
      000CED 87 05            [24] 3490 	mov	ar5,@r1
      000CEF 09               [12] 3491 	inc	r1
      000CF0 87 06            [24] 3492 	mov	ar6,@r1
      000CF2 09               [12] 3493 	inc	r1
      000CF3 87 07            [24] 3494 	mov	ar7,@r1
      000CF5 E5 81            [12] 3495 	mov	a,sp
      000CF7 24 DC            [12] 3496 	add	a,#0xdc
      000CF9 F9               [12] 3497 	mov	r1,a
      000CFA A7 02            [24] 3498 	mov	@r1,ar2
      000CFC 09               [12] 3499 	inc	r1
      000CFD A7 05            [24] 3500 	mov	@r1,ar5
                                   3501 ;	../../../../core/loader/elfloader.c:419: for(i = 0; i < shdrnum; ++i) {
      000CFF E5 81            [12] 3502 	mov	a,sp
      000D01 24 39            [12] 3503 	add	a,#0x39
      000D03 F9               [12] 3504 	mov	r1,a
      000D04 A7 00            [24] 3505 	mov	@r1,ar0
      000D06 E5 81            [12] 3506 	mov	a,sp
      000D08 24 35            [12] 3507 	add	a,#0x35
      000D0A F9               [12] 3508 	mov	r1,a
      000D0B E5 81            [12] 3509 	mov	a,sp
      000D0D 24 DE            [12] 3510 	add	a,#0xDE
      000D0F F7               [12] 3511 	mov	@r1,a
      000D10 74 04            [12] 3512 	mov	a,#0x04
      000D12 28               [12] 3513 	add	a,r0
      000D13 F9               [12] 3514 	mov	r1,a
      000D14 C0 00            [24] 3515 	push	ar0
      000D16 E5 81            [12] 3516 	mov	a,sp
      000D18 24 34            [12] 3517 	add	a,#0x34
      000D1A F8               [12] 3518 	mov	r0,a
      000D1B C0 01            [24] 3519 	push	ar1
      000D1D E5 81            [12] 3520 	mov	a,sp
      000D1F 24 44            [12] 3521 	add	a,#0x44
      000D21 F9               [12] 3522 	mov	r1,a
      000D22 E6               [12] 3523 	mov	a,@r0
      000D23 F7               [12] 3524 	mov	@r1,a
      000D24 D0 01            [24] 3525 	pop	ar1
      000D26 E5 81            [12] 3526 	mov	a,sp
      000D28 24 34            [12] 3527 	add	a,#0x34
      000D2A F8               [12] 3528 	mov	r0,a
      000D2B C0 01            [24] 3529 	push	ar1
      000D2D E5 81            [12] 3530 	mov	a,sp
      000D2F 24 45            [12] 3531 	add	a,#0x45
      000D31 F9               [12] 3532 	mov	r1,a
      000D32 E6               [12] 3533 	mov	a,@r0
      000D33 F7               [12] 3534 	mov	@r1,a
      000D34 D0 01            [24] 3535 	pop	ar1
      000D36 E5 81            [12] 3536 	mov	a,sp
      000D38 24 34            [12] 3537 	add	a,#0x34
      000D3A F8               [12] 3538 	mov	r0,a
      000D3B C0 01            [24] 3539 	push	ar1
      000D3D E5 81            [12] 3540 	mov	a,sp
      000D3F 24 46            [12] 3541 	add	a,#0x46
      000D41 F9               [12] 3542 	mov	r1,a
      000D42 E6               [12] 3543 	mov	a,@r0
      000D43 F7               [12] 3544 	mov	@r1,a
      000D44 D0 01            [24] 3545 	pop	ar1
      000D46 E5 81            [12] 3546 	mov	a,sp
      000D48 24 34            [12] 3547 	add	a,#0x34
      000D4A F8               [12] 3548 	mov	r0,a
      000D4B C0 01            [24] 3549 	push	ar1
      000D4D E5 81            [12] 3550 	mov	a,sp
      000D4F 24 47            [12] 3551 	add	a,#0x47
      000D51 F9               [12] 3552 	mov	r1,a
      000D52 E6               [12] 3553 	mov	a,@r0
      000D53 F7               [12] 3554 	mov	@r1,a
      000D54 D0 01            [24] 3555 	pop	ar1
      000D56 E5 81            [12] 3556 	mov	a,sp
      000D58 24 34            [12] 3557 	add	a,#0x34
      000D5A F8               [12] 3558 	mov	r0,a
      000D5B C0 01            [24] 3559 	push	ar1
      000D5D E5 81            [12] 3560 	mov	a,sp
      000D5F 24 48            [12] 3561 	add	a,#0x48
      000D61 F9               [12] 3562 	mov	r1,a
      000D62 E6               [12] 3563 	mov	a,@r0
      000D63 F7               [12] 3564 	mov	@r1,a
      000D64 D0 01            [24] 3565 	pop	ar1
      000D66 E5 81            [12] 3566 	mov	a,sp
      000D68 24 34            [12] 3567 	add	a,#0x34
      000D6A F8               [12] 3568 	mov	r0,a
      000D6B C0 01            [24] 3569 	push	ar1
      000D6D E5 81            [12] 3570 	mov	a,sp
      000D6F 24 49            [12] 3571 	add	a,#0x49
      000D71 F9               [12] 3572 	mov	r1,a
      000D72 E6               [12] 3573 	mov	a,@r0
      000D73 F7               [12] 3574 	mov	@r1,a
      000D74 D0 01            [24] 3575 	pop	ar1
      000D76 E5 81            [12] 3576 	mov	a,sp
      000D78 24 34            [12] 3577 	add	a,#0x34
      000D7A F8               [12] 3578 	mov	r0,a
      000D7B C0 01            [24] 3579 	push	ar1
      000D7D E5 81            [12] 3580 	mov	a,sp
      000D7F 24 4A            [12] 3581 	add	a,#0x4a
      000D81 F9               [12] 3582 	mov	r1,a
      000D82 E6               [12] 3583 	mov	a,@r0
      000D83 F7               [12] 3584 	mov	@r1,a
      000D84 D0 01            [24] 3585 	pop	ar1
      000D86 E5 81            [12] 3586 	mov	a,sp
      000D88 24 34            [12] 3587 	add	a,#0x34
      000D8A F8               [12] 3588 	mov	r0,a
      000D8B C0 01            [24] 3589 	push	ar1
      000D8D E5 81            [12] 3590 	mov	a,sp
      000D8F 24 4B            [12] 3591 	add	a,#0x4b
      000D91 F9               [12] 3592 	mov	r1,a
      000D92 E6               [12] 3593 	mov	a,@r0
      000D93 F7               [12] 3594 	mov	@r1,a
      000D94 D0 01            [24] 3595 	pop	ar1
      000D96 E5 81            [12] 3596 	mov	a,sp
      000D98 24 34            [12] 3597 	add	a,#0x34
      000D9A F8               [12] 3598 	mov	r0,a
      000D9B C0 01            [24] 3599 	push	ar1
      000D9D E5 81            [12] 3600 	mov	a,sp
      000D9F 24 4C            [12] 3601 	add	a,#0x4c
      000DA1 F9               [12] 3602 	mov	r1,a
      000DA2 E6               [12] 3603 	mov	a,@r0
      000DA3 F7               [12] 3604 	mov	@r1,a
      000DA4 D0 01            [24] 3605 	pop	ar1
      000DA6 D0 00            [24] 3606 	pop	ar0
      000DA8 C0 01            [24] 3607 	push	ar1
      000DAA E5 81            [12] 3608 	mov	a,sp
      000DAC 24 4E            [12] 3609 	add	a,#0x4e
      000DAE F9               [12] 3610 	mov	r1,a
      000DAF 74 14            [12] 3611 	mov	a,#0x14
      000DB1 28               [12] 3612 	add	a,r0
      000DB2 F7               [12] 3613 	mov	@r1,a
      000DB3 D0 01            [24] 3614 	pop	ar1
      000DB5 C0 00            [24] 3615 	push	ar0
      000DB7 E5 81            [12] 3616 	mov	a,sp
      000DB9 24 34            [12] 3617 	add	a,#0x34
      000DBB F8               [12] 3618 	mov	r0,a
      000DBC C0 01            [24] 3619 	push	ar1
      000DBE E5 81            [12] 3620 	mov	a,sp
      000DC0 24 4E            [12] 3621 	add	a,#0x4e
      000DC2 F9               [12] 3622 	mov	r1,a
      000DC3 E6               [12] 3623 	mov	a,@r0
      000DC4 F7               [12] 3624 	mov	@r1,a
      000DC5 D0 01            [24] 3625 	pop	ar1
      000DC7 D0 00            [24] 3626 	pop	ar0
      000DC9 C0 01            [24] 3627 	push	ar1
      000DCB E5 81            [12] 3628 	mov	a,sp
      000DCD 24 50            [12] 3629 	add	a,#0x50
      000DCF F9               [12] 3630 	mov	r1,a
      000DD0 74 10            [12] 3631 	mov	a,#0x10
      000DD2 28               [12] 3632 	add	a,r0
      000DD3 F7               [12] 3633 	mov	@r1,a
      000DD4 D0 01            [24] 3634 	pop	ar1
      000DD6 C0 00            [24] 3635 	push	ar0
      000DD8 E5 81            [12] 3636 	mov	a,sp
      000DDA 24 E9            [12] 3637 	add	a,#0xe9
      000DDC F8               [12] 3638 	mov	r0,a
      000DDD E4               [12] 3639 	clr	a
      000DDE F6               [12] 3640 	mov	@r0,a
      000DDF 08               [12] 3641 	inc	r0
      000DE0 F6               [12] 3642 	mov	@r0,a
      000DE1 D0 00            [24] 3643 	pop	ar0
                                   3644 ;	../../../../core/loader/elfloader.c:585: return ELFLOADER_NO_STARTPOINT;
      000DE3 D0 05            [24] 3645 	pop	ar5
      000DE5 D0 02            [24] 3646 	pop	ar2
                                   3647 ;	../../../../core/loader/elfloader.c:419: for(i = 0; i < shdrnum; ++i) {
      000DE7                       3648 00205$:
      000DE7 C0 00            [24] 3649 	push	ar0
      000DE9 E5 81            [12] 3650 	mov	a,sp
      000DEB 24 EB            [12] 3651 	add	a,#0xeb
      000DED F8               [12] 3652 	mov	r0,a
      000DEE 86 06            [24] 3653 	mov	ar6,@r0
      000DF0 08               [12] 3654 	inc	r0
      000DF1 86 07            [24] 3655 	mov	ar7,@r0
      000DF3 E5 81            [12] 3656 	mov	a,sp
      000DF5 24 ED            [12] 3657 	add	a,#0xed
      000DF7 F8               [12] 3658 	mov	r0,a
      000DF8 C3               [12] 3659 	clr	c
      000DF9 EE               [12] 3660 	mov	a,r6
      000DFA 96               [12] 3661 	subb	a,@r0
      000DFB EF               [12] 3662 	mov	a,r7
      000DFC 08               [12] 3663 	inc	r0
      000DFD 96               [12] 3664 	subb	a,@r0
      000DFE D0 00            [24] 3665 	pop	ar0
      000E00 40 03            [24] 3666 	jc	00286$
      000E02 02r15rF4         [24] 3667 	ljmp	00150$
      000E05                       3668 00286$:
                                   3669 ;	../../../../core/loader/elfloader.c:421: seek_read(fd, shdrptr, (char *)&shdr, sizeof(shdr));
      000E05 C0 02            [24] 3670 	push	ar2
      000E07 C0 05            [24] 3671 	push	ar5
      000E09 C0 00            [24] 3672 	push	ar0
      000E0B E5 81            [12] 3673 	mov	a,sp
      000E0D 24 38            [12] 3674 	add	a,#0x38
      000E0F F8               [12] 3675 	mov	r0,a
      000E10 86 07            [24] 3676 	mov	ar7,@r0
      000E12 D0 00            [24] 3677 	pop	ar0
      000E14 8F 05            [24] 3678 	mov	ar5,r7
      000E16 7E 00            [12] 3679 	mov	r6,#0x00
      000E18 7F 40            [12] 3680 	mov	r7,#0x40
      000E1A C0 05            [24] 3681 	push	ar5
      000E1C C0 02            [24] 3682 	push	ar2
      000E1E C0 01            [24] 3683 	push	ar1
      000E20 C0 00            [24] 3684 	push	ar0
      000E22 74 28            [12] 3685 	mov	a,#0x28
      000E24 C0 E0            [24] 3686 	push	acc
      000E26 E4               [12] 3687 	clr	a
      000E27 C0 E0            [24] 3688 	push	acc
      000E29 C0 05            [24] 3689 	push	ar5
      000E2B C0 06            [24] 3690 	push	ar6
      000E2D C0 07            [24] 3691 	push	ar7
      000E2F 85 00 F0         [24] 3692 	mov	b,ar0
      000E32 E5 81            [12] 3693 	mov	a,sp
      000E34 24 D3            [12] 3694 	add	a,#0xd3
      000E36 F8               [12] 3695 	mov	r0,a
      000E37 E6               [12] 3696 	mov	a,@r0
      000E38 C0 E0            [24] 3697 	push	acc
      000E3A 08               [12] 3698 	inc	r0
      000E3B E6               [12] 3699 	mov	a,@r0
      000E3C C0 E0            [24] 3700 	push	acc
      000E3E A8 F0            [24] 3701 	mov	r0,b
      000E40 C0 00            [24] 3702 	push	ar0
      000E42 E5 81            [12] 3703 	mov	a,sp
      000E44 24 21            [12] 3704 	add	a,#0x21
      000E46 F8               [12] 3705 	mov	r0,a
      000E47 86 82            [24] 3706 	mov	dpl,@r0
      000E49 08               [12] 3707 	inc	r0
      000E4A 86 83            [24] 3708 	mov	dph,@r0
      000E4C D0 00            [24] 3709 	pop	ar0
      000E4E 78r00            [12] 3710 	mov	r0,#_seek_read
      000E50 79s00            [12] 3711 	mov	r1,#(_seek_read >> 8)
      000E52 7As00            [12] 3712 	mov	r2,#(_seek_read >> 16)
      000E54 12r00r00         [24] 3713 	lcall	__sdcc_banked_call
      000E57 E5 81            [12] 3714 	mov	a,sp
      000E59 24 F9            [12] 3715 	add	a,#0xf9
      000E5B F5 81            [12] 3716 	mov	sp,a
      000E5D D0 00            [24] 3717 	pop	ar0
      000E5F D0 01            [24] 3718 	pop	ar1
      000E61 D0 02            [24] 3719 	pop	ar2
      000E63 D0 05            [24] 3720 	pop	ar5
                                   3721 ;	../../../../core/loader/elfloader.c:424: nameptr = strs + shdr.sh_name;
      000E65 C0 01            [24] 3722 	push	ar1
      000E67 E5 81            [12] 3723 	mov	a,sp
      000E69 24 51            [12] 3724 	add	a,#0x51
      000E6B F9               [12] 3725 	mov	r1,a
      000E6C E6               [12] 3726 	mov	a,@r0
      000E6D F7               [12] 3727 	mov	@r1,a
      000E6E 08               [12] 3728 	inc	r0
      000E6F E6               [12] 3729 	mov	a,@r0
      000E70 09               [12] 3730 	inc	r1
      000E71 F7               [12] 3731 	mov	@r1,a
      000E72 08               [12] 3732 	inc	r0
      000E73 E6               [12] 3733 	mov	a,@r0
      000E74 09               [12] 3734 	inc	r1
      000E75 F7               [12] 3735 	mov	@r1,a
      000E76 08               [12] 3736 	inc	r0
      000E77 E6               [12] 3737 	mov	a,@r0
      000E78 09               [12] 3738 	inc	r1
      000E79 F7               [12] 3739 	mov	@r1,a
      000E7A 18               [12] 3740 	dec	r0
      000E7B 18               [12] 3741 	dec	r0
      000E7C 18               [12] 3742 	dec	r0
      000E7D D0 01            [24] 3743 	pop	ar1
      000E7F C0 00            [24] 3744 	push	ar0
      000E81 E5 81            [12] 3745 	mov	a,sp
      000E83 24 D9            [12] 3746 	add	a,#0xd9
      000E85 F8               [12] 3747 	mov	r0,a
      000E86 86 03            [24] 3748 	mov	ar3,@r0
      000E88 08               [12] 3749 	inc	r0
      000E89 86 04            [24] 3750 	mov	ar4,@r0
      000E8B E4               [12] 3751 	clr	a
      000E8C FE               [12] 3752 	mov	r6,a
      000E8D FF               [12] 3753 	mov	r7,a
      000E8E E5 81            [12] 3754 	mov	a,sp
      000E90 24 51            [12] 3755 	add	a,#0x51
      000E92 F8               [12] 3756 	mov	r0,a
      000E93 E6               [12] 3757 	mov	a,@r0
      000E94 2B               [12] 3758 	add	a,r3
      000E95 FB               [12] 3759 	mov	r3,a
      000E96 08               [12] 3760 	inc	r0
      000E97 E6               [12] 3761 	mov	a,@r0
      000E98 3C               [12] 3762 	addc	a,r4
      000E99 FC               [12] 3763 	mov	r4,a
      000E9A 08               [12] 3764 	inc	r0
      000E9B E6               [12] 3765 	mov	a,@r0
      000E9C 3E               [12] 3766 	addc	a,r6
      000E9D 08               [12] 3767 	inc	r0
      000E9E E6               [12] 3768 	mov	a,@r0
      000E9F 3F               [12] 3769 	addc	a,r7
                                   3770 ;	../../../../core/loader/elfloader.c:425: seek_read(fd, nameptr, name, sizeof(name));
      000EA0 E5 81            [12] 3771 	mov	a,sp
      000EA2 24 34            [12] 3772 	add	a,#0x34
      000EA4 F8               [12] 3773 	mov	r0,a
      000EA5 86 05            [24] 3774 	mov	ar5,@r0
      000EA7 7E 00            [12] 3775 	mov	r6,#0x00
      000EA9 7F 40            [12] 3776 	mov	r7,#0x40
      000EAB D0 00            [24] 3777 	pop	ar0
      000EAD C0 05            [24] 3778 	push	ar5
      000EAF C0 02            [24] 3779 	push	ar2
      000EB1 C0 01            [24] 3780 	push	ar1
      000EB3 C0 00            [24] 3781 	push	ar0
      000EB5 74 0C            [12] 3782 	mov	a,#0x0C
      000EB7 C0 E0            [24] 3783 	push	acc
      000EB9 E4               [12] 3784 	clr	a
      000EBA C0 E0            [24] 3785 	push	acc
      000EBC C0 05            [24] 3786 	push	ar5
      000EBE C0 06            [24] 3787 	push	ar6
      000EC0 C0 07            [24] 3788 	push	ar7
      000EC2 C0 03            [24] 3789 	push	ar3
      000EC4 C0 04            [24] 3790 	push	ar4
      000EC6 C0 00            [24] 3791 	push	ar0
      000EC8 E5 81            [12] 3792 	mov	a,sp
      000ECA 24 21            [12] 3793 	add	a,#0x21
      000ECC F8               [12] 3794 	mov	r0,a
      000ECD 86 82            [24] 3795 	mov	dpl,@r0
      000ECF 08               [12] 3796 	inc	r0
      000ED0 86 83            [24] 3797 	mov	dph,@r0
      000ED2 D0 00            [24] 3798 	pop	ar0
      000ED4 78r00            [12] 3799 	mov	r0,#_seek_read
      000ED6 79s00            [12] 3800 	mov	r1,#(_seek_read >> 8)
      000ED8 7As00            [12] 3801 	mov	r2,#(_seek_read >> 16)
      000EDA 12r00r00         [24] 3802 	lcall	__sdcc_banked_call
      000EDD E5 81            [12] 3803 	mov	a,sp
      000EDF 24 F9            [12] 3804 	add	a,#0xf9
      000EE1 F5 81            [12] 3805 	mov	sp,a
      000EE3 D0 00            [24] 3806 	pop	ar0
      000EE5 D0 01            [24] 3807 	pop	ar1
      000EE7 D0 02            [24] 3808 	pop	ar2
      000EE9 D0 05            [24] 3809 	pop	ar5
                                   3810 ;	../../../../core/loader/elfloader.c:435: if(shdr.sh_type == SHT_SYMTAB/*strncmp(name, ".symtab", 7) == 0*/) {
      000EEB 87 07            [24] 3811 	mov	ar7,@r1
      000EED 09               [12] 3812 	inc	r1
      000EEE 87 06            [24] 3813 	mov	ar6,@r1
      000EF0 09               [12] 3814 	inc	r1
      000EF1 87 04            [24] 3815 	mov	ar4,@r1
      000EF3 09               [12] 3816 	inc	r1
      000EF4 87 03            [24] 3817 	mov	ar3,@r1
      000EF6 19               [12] 3818 	dec	r1
      000EF7 19               [12] 3819 	dec	r1
      000EF8 19               [12] 3820 	dec	r1
      000EF9 BF 02 0B         [24] 3821 	cjne	r7,#0x02,00287$
      000EFC BE 00 08         [24] 3822 	cjne	r6,#0x00,00287$
      000EFF BC 00 05         [24] 3823 	cjne	r4,#0x00,00287$
      000F02 BB 00 02         [24] 3824 	cjne	r3,#0x00,00287$
      000F05 80 06            [24] 3825 	sjmp	00288$
      000F07                       3826 00287$:
      000F07 D0 05            [24] 3827 	pop	ar5
      000F09 D0 02            [24] 3828 	pop	ar2
      000F0B 80 49            [24] 3829 	sjmp	00148$
      000F0D                       3830 00288$:
      000F0D D0 05            [24] 3831 	pop	ar5
      000F0F D0 02            [24] 3832 	pop	ar2
                                   3833 ;	../../../../core/loader/elfloader.c:437: symtaboff = shdr.sh_offset;
      000F11 C0 00            [24] 3834 	push	ar0
      000F13 E5 81            [12] 3835 	mov	a,sp
      000F15 24 52            [12] 3836 	add	a,#0x52
      000F17 F8               [12] 3837 	mov	r0,a
      000F18 86 00            [24] 3838 	mov	ar0,@r0
      000F1A 86 03            [24] 3839 	mov	ar3,@r0
      000F1C 08               [12] 3840 	inc	r0
      000F1D 86 04            [24] 3841 	mov	ar4,@r0
      000F1F 08               [12] 3842 	inc	r0
      000F20 86 06            [24] 3843 	mov	ar6,@r0
      000F22 08               [12] 3844 	inc	r0
      000F23 86 07            [24] 3845 	mov	ar7,@r0
      000F25 18               [12] 3846 	dec	r0
      000F26 18               [12] 3847 	dec	r0
      000F27 18               [12] 3848 	dec	r0
      000F28 E5 81            [12] 3849 	mov	a,sp
      000F2A 24 FA            [12] 3850 	add	a,#0xfa
      000F2C F8               [12] 3851 	mov	r0,a
      000F2D A6 03            [24] 3852 	mov	@r0,ar3
      000F2F 08               [12] 3853 	inc	r0
      000F30 A6 04            [24] 3854 	mov	@r0,ar4
                                   3855 ;	../../../../core/loader/elfloader.c:438: symtabsize = shdr.sh_size;
      000F32 E5 81            [12] 3856 	mov	a,sp
      000F34 24 50            [12] 3857 	add	a,#0x50
      000F36 F8               [12] 3858 	mov	r0,a
      000F37 86 00            [24] 3859 	mov	ar0,@r0
      000F39 86 03            [24] 3860 	mov	ar3,@r0
      000F3B 08               [12] 3861 	inc	r0
      000F3C 86 04            [24] 3862 	mov	ar4,@r0
      000F3E 08               [12] 3863 	inc	r0
      000F3F 86 06            [24] 3864 	mov	ar6,@r0
      000F41 08               [12] 3865 	inc	r0
      000F42 86 07            [24] 3866 	mov	ar7,@r0
      000F44 18               [12] 3867 	dec	r0
      000F45 18               [12] 3868 	dec	r0
      000F46 18               [12] 3869 	dec	r0
      000F47 E5 81            [12] 3870 	mov	a,sp
      000F49 24 FC            [12] 3871 	add	a,#0xfc
      000F4B F8               [12] 3872 	mov	r0,a
      000F4C A6 03            [24] 3873 	mov	@r0,ar3
      000F4E 08               [12] 3874 	inc	r0
      000F4F A6 04            [24] 3875 	mov	@r0,ar4
      000F51 D0 00            [24] 3876 	pop	ar0
      000F53 02r15rCC         [24] 3877 	ljmp	00149$
      000F56                       3878 00148$:
                                   3879 ;	../../../../core/loader/elfloader.c:439: } else if(shdr.sh_type == SHT_STRTAB/*strncmp(name, ".strtab", 7) == 0*/) {
      000F56 BF 03 4D         [24] 3880 	cjne	r7,#0x03,00145$
      000F59 BE 00 4A         [24] 3881 	cjne	r6,#0x00,00145$
      000F5C BC 00 47         [24] 3882 	cjne	r4,#0x00,00145$
      000F5F BB 00 44         [24] 3883 	cjne	r3,#0x00,00145$
                                   3884 ;	../../../../core/loader/elfloader.c:441: strtaboff = shdr.sh_offset;
      000F62 C0 00            [24] 3885 	push	ar0
      000F64 E5 81            [12] 3886 	mov	a,sp
      000F66 24 52            [12] 3887 	add	a,#0x52
      000F68 F8               [12] 3888 	mov	r0,a
      000F69 86 00            [24] 3889 	mov	ar0,@r0
      000F6B 86 03            [24] 3890 	mov	ar3,@r0
      000F6D 08               [12] 3891 	inc	r0
      000F6E 86 04            [24] 3892 	mov	ar4,@r0
      000F70 08               [12] 3893 	inc	r0
      000F71 86 06            [24] 3894 	mov	ar6,@r0
      000F73 08               [12] 3895 	inc	r0
      000F74 86 07            [24] 3896 	mov	ar7,@r0
      000F76 18               [12] 3897 	dec	r0
      000F77 18               [12] 3898 	dec	r0
      000F78 18               [12] 3899 	dec	r0
      000F79 A8 81            [24] 3900 	mov	r0,sp
      000F7B 18               [12] 3901 	dec	r0
      000F7C 18               [12] 3902 	dec	r0
      000F7D A6 03            [24] 3903 	mov	@r0,ar3
      000F7F 08               [12] 3904 	inc	r0
      000F80 A6 04            [24] 3905 	mov	@r0,ar4
                                   3906 ;	../../../../core/loader/elfloader.c:442: strtabsize = shdr.sh_size;
      000F82 E5 81            [12] 3907 	mov	a,sp
      000F84 24 50            [12] 3908 	add	a,#0x50
      000F86 F8               [12] 3909 	mov	r0,a
      000F87 86 00            [24] 3910 	mov	ar0,@r0
      000F89 86 03            [24] 3911 	mov	ar3,@r0
      000F8B 08               [12] 3912 	inc	r0
      000F8C 86 04            [24] 3913 	mov	ar4,@r0
      000F8E 08               [12] 3914 	inc	r0
      000F8F 86 06            [24] 3915 	mov	ar6,@r0
      000F91 08               [12] 3916 	inc	r0
      000F92 86 07            [24] 3917 	mov	ar7,@r0
      000F94 18               [12] 3918 	dec	r0
      000F95 18               [12] 3919 	dec	r0
      000F96 18               [12] 3920 	dec	r0
      000F97 E5 81            [12] 3921 	mov	a,sp
      000F99 24 3B            [12] 3922 	add	a,#0x3b
      000F9B F8               [12] 3923 	mov	r0,a
      000F9C A6 03            [24] 3924 	mov	@r0,ar3
      000F9E 08               [12] 3925 	inc	r0
      000F9F A6 04            [24] 3926 	mov	@r0,ar4
      000FA1 D0 00            [24] 3927 	pop	ar0
      000FA3 02r15rCC         [24] 3928 	ljmp	00149$
      000FA6                       3929 00145$:
                                   3930 ;	../../../../core/loader/elfloader.c:443: } else if(strncmp(name, ".text", 5) == 0) {
      000FA6 C0 00            [24] 3931 	push	ar0
      000FA8 E5 81            [12] 3932 	mov	a,sp
      000FAA 24 47            [12] 3933 	add	a,#0x47
      000FAC F8               [12] 3934 	mov	r0,a
      000FAD 86 04            [24] 3935 	mov	ar4,@r0
      000FAF 7E 00            [12] 3936 	mov	r6,#0x00
      000FB1 7F 40            [12] 3937 	mov	r7,#0x40
      000FB3 D0 00            [24] 3938 	pop	ar0
      000FB5 C0 05            [24] 3939 	push	ar5
      000FB7 C0 02            [24] 3940 	push	ar2
      000FB9 C0 01            [24] 3941 	push	ar1
      000FBB C0 00            [24] 3942 	push	ar0
      000FBD 74 05            [12] 3943 	mov	a,#0x05
      000FBF C0 E0            [24] 3944 	push	acc
      000FC1 E4               [12] 3945 	clr	a
      000FC2 C0 E0            [24] 3946 	push	acc
      000FC4 74r1B            [12] 3947 	mov	a,#__str_1
      000FC6 C0 E0            [24] 3948 	push	acc
      000FC8 74s00            [12] 3949 	mov	a,#(__str_1 >> 8)
      000FCA C0 E0            [24] 3950 	push	acc
      000FCC 74 80            [12] 3951 	mov	a,#0x80
      000FCE C0 E0            [24] 3952 	push	acc
      000FD0 8C 82            [24] 3953 	mov	dpl,r4
      000FD2 8E 83            [24] 3954 	mov	dph,r6
      000FD4 8F F0            [24] 3955 	mov	b,r7
      000FD6 78r00            [12] 3956 	mov	r0,#_strncmp
      000FD8 79s00            [12] 3957 	mov	r1,#(_strncmp >> 8)
      000FDA 7As00            [12] 3958 	mov	r2,#(_strncmp >> 16)
      000FDC 12r00r00         [24] 3959 	lcall	__sdcc_banked_call
      000FDF AE 82            [24] 3960 	mov	r6,dpl
      000FE1 AF 83            [24] 3961 	mov	r7,dph
      000FE3 E5 81            [12] 3962 	mov	a,sp
      000FE5 24 FB            [12] 3963 	add	a,#0xfb
      000FE7 F5 81            [12] 3964 	mov	sp,a
      000FE9 D0 00            [24] 3965 	pop	ar0
      000FEB D0 01            [24] 3966 	pop	ar1
      000FED D0 02            [24] 3967 	pop	ar2
      000FEF D0 05            [24] 3968 	pop	ar5
      000FF1 EE               [12] 3969 	mov	a,r6
      000FF2 4F               [12] 3970 	orl	a,r7
      000FF3 70 5F            [24] 3971 	jnz	00142$
                                   3972 ;	../../../../core/loader/elfloader.c:444: textoff = shdr.sh_offset;
      000FF5 C0 00            [24] 3973 	push	ar0
      000FF7 E5 81            [12] 3974 	mov	a,sp
      000FF9 24 52            [12] 3975 	add	a,#0x52
      000FFB F8               [12] 3976 	mov	r0,a
      000FFC 86 00            [24] 3977 	mov	ar0,@r0
      000FFE 86 03            [24] 3978 	mov	ar3,@r0
      001000 08               [12] 3979 	inc	r0
      001001 86 04            [24] 3980 	mov	ar4,@r0
      001003 08               [12] 3981 	inc	r0
      001004 86 06            [24] 3982 	mov	ar6,@r0
      001006 08               [12] 3983 	inc	r0
      001007 86 07            [24] 3984 	mov	ar7,@r0
      001009 18               [12] 3985 	dec	r0
      00100A 18               [12] 3986 	dec	r0
      00100B 18               [12] 3987 	dec	r0
      00100C E5 81            [12] 3988 	mov	a,sp
      00100E 24 F2            [12] 3989 	add	a,#0xf2
      001010 F8               [12] 3990 	mov	r0,a
      001011 A6 03            [24] 3991 	mov	@r0,ar3
      001013 08               [12] 3992 	inc	r0
      001014 A6 04            [24] 3993 	mov	@r0,ar4
                                   3994 ;	../../../../core/loader/elfloader.c:445: textsize = shdr.sh_size;
      001016 E5 81            [12] 3995 	mov	a,sp
      001018 24 50            [12] 3996 	add	a,#0x50
      00101A F8               [12] 3997 	mov	r0,a
      00101B 86 00            [24] 3998 	mov	ar0,@r0
      00101D 86 03            [24] 3999 	mov	ar3,@r0
      00101F 08               [12] 4000 	inc	r0
      001020 86 04            [24] 4001 	mov	ar4,@r0
      001022 08               [12] 4002 	inc	r0
      001023 86 06            [24] 4003 	mov	ar6,@r0
      001025 08               [12] 4004 	inc	r0
      001026 86 07            [24] 4005 	mov	ar7,@r0
      001028 18               [12] 4006 	dec	r0
      001029 18               [12] 4007 	dec	r0
      00102A 18               [12] 4008 	dec	r0
      00102B E5 81            [12] 4009 	mov	a,sp
      00102D 24 F4            [12] 4010 	add	a,#0xf4
      00102F F8               [12] 4011 	mov	r0,a
      001030 A6 03            [24] 4012 	mov	@r0,ar3
      001032 08               [12] 4013 	inc	r0
      001033 A6 04            [24] 4014 	mov	@r0,ar4
                                   4015 ;	../../../../core/loader/elfloader.c:446: text.number = i;
      001035 E5 81            [12] 4016 	mov	a,sp
      001037 24 EB            [12] 4017 	add	a,#0xeb
      001039 F8               [12] 4018 	mov	r0,a
      00103A 86 07            [24] 4019 	mov	ar7,@r0
      00103C 90r00r33         [24] 4020 	mov	dptr,#_text
      00103F EF               [12] 4021 	mov	a,r7
      001040 F0               [24] 4022 	movx	@dptr,a
                                   4023 ;	../../../../core/loader/elfloader.c:447: text.offset = textoff;
      001041 90r00r34         [24] 4024 	mov	dptr,#(_text + 0x0001)
      001044 E5 81            [12] 4025 	mov	a,sp
      001046 24 F2            [12] 4026 	add	a,#0xf2
      001048 F8               [12] 4027 	mov	r0,a
      001049 E6               [12] 4028 	mov	a,@r0
      00104A F0               [24] 4029 	movx	@dptr,a
      00104B 08               [12] 4030 	inc	r0
      00104C E6               [12] 4031 	mov	a,@r0
      00104D A3               [24] 4032 	inc	dptr
      00104E F0               [24] 4033 	movx	@dptr,a
      00104F D0 00            [24] 4034 	pop	ar0
      001051 02r15rCC         [24] 4035 	ljmp	00149$
      001054                       4036 00142$:
                                   4037 ;	../../../../core/loader/elfloader.c:448: } else if(strncmp(name, ".rel.text", 9) == 0) {
      001054 C0 00            [24] 4038 	push	ar0
      001056 E5 81            [12] 4039 	mov	a,sp
      001058 24 48            [12] 4040 	add	a,#0x48
      00105A F8               [12] 4041 	mov	r0,a
      00105B 86 04            [24] 4042 	mov	ar4,@r0
      00105D 7E 00            [12] 4043 	mov	r6,#0x00
      00105F 7F 40            [12] 4044 	mov	r7,#0x40
      001061 D0 00            [24] 4045 	pop	ar0
      001063 C0 05            [24] 4046 	push	ar5
      001065 C0 02            [24] 4047 	push	ar2
      001067 C0 01            [24] 4048 	push	ar1
      001069 C0 00            [24] 4049 	push	ar0
      00106B 74 09            [12] 4050 	mov	a,#0x09
      00106D C0 E0            [24] 4051 	push	acc
      00106F E4               [12] 4052 	clr	a
      001070 C0 E0            [24] 4053 	push	acc
      001072 74r21            [12] 4054 	mov	a,#__str_2
      001074 C0 E0            [24] 4055 	push	acc
      001076 74s00            [12] 4056 	mov	a,#(__str_2 >> 8)
      001078 C0 E0            [24] 4057 	push	acc
      00107A 74 80            [12] 4058 	mov	a,#0x80
      00107C C0 E0            [24] 4059 	push	acc
      00107E 8C 82            [24] 4060 	mov	dpl,r4
      001080 8E 83            [24] 4061 	mov	dph,r6
      001082 8F F0            [24] 4062 	mov	b,r7
      001084 78r00            [12] 4063 	mov	r0,#_strncmp
      001086 79s00            [12] 4064 	mov	r1,#(_strncmp >> 8)
      001088 7As00            [12] 4065 	mov	r2,#(_strncmp >> 16)
      00108A 12r00r00         [24] 4066 	lcall	__sdcc_banked_call
      00108D AE 82            [24] 4067 	mov	r6,dpl
      00108F AF 83            [24] 4068 	mov	r7,dph
      001091 E5 81            [12] 4069 	mov	a,sp
      001093 24 FB            [12] 4070 	add	a,#0xfb
      001095 F5 81            [12] 4071 	mov	sp,a
      001097 D0 00            [24] 4072 	pop	ar0
      001099 D0 01            [24] 4073 	pop	ar1
      00109B D0 02            [24] 4074 	pop	ar2
      00109D D0 05            [24] 4075 	pop	ar5
      00109F EE               [12] 4076 	mov	a,r6
      0010A0 4F               [12] 4077 	orl	a,r7
      0010A1 70 46            [24] 4078 	jnz	00139$
                                   4079 ;	../../../../core/loader/elfloader.c:449: using_relas = 0;
      0010A3 C0 00            [24] 4080 	push	ar0
      0010A5 E5 81            [12] 4081 	mov	a,sp
      0010A7 24 F1            [12] 4082 	add	a,#0xf1
      0010A9 F8               [12] 4083 	mov	r0,a
      0010AA 76 00            [12] 4084 	mov	@r0,#0x00
                                   4085 ;	../../../../core/loader/elfloader.c:450: textrelaoff = shdr.sh_offset;
      0010AC E5 81            [12] 4086 	mov	a,sp
      0010AE 24 52            [12] 4087 	add	a,#0x52
      0010B0 F8               [12] 4088 	mov	r0,a
      0010B1 86 00            [24] 4089 	mov	ar0,@r0
      0010B3 86 03            [24] 4090 	mov	ar3,@r0
      0010B5 08               [12] 4091 	inc	r0
      0010B6 86 04            [24] 4092 	mov	ar4,@r0
      0010B8 08               [12] 4093 	inc	r0
      0010B9 86 06            [24] 4094 	mov	ar6,@r0
      0010BB 08               [12] 4095 	inc	r0
      0010BC 86 07            [24] 4096 	mov	ar7,@r0
      0010BE 18               [12] 4097 	dec	r0
      0010BF 18               [12] 4098 	dec	r0
      0010C0 18               [12] 4099 	dec	r0
      0010C1 8B 02            [24] 4100 	mov	ar2,r3
      0010C3 8C 05            [24] 4101 	mov	ar5,r4
                                   4102 ;	../../../../core/loader/elfloader.c:451: textrelasize = shdr.sh_size;
      0010C5 E5 81            [12] 4103 	mov	a,sp
      0010C7 24 50            [12] 4104 	add	a,#0x50
      0010C9 F8               [12] 4105 	mov	r0,a
      0010CA 86 00            [24] 4106 	mov	ar0,@r0
      0010CC 86 03            [24] 4107 	mov	ar3,@r0
      0010CE 08               [12] 4108 	inc	r0
      0010CF 86 04            [24] 4109 	mov	ar4,@r0
      0010D1 08               [12] 4110 	inc	r0
      0010D2 86 06            [24] 4111 	mov	ar6,@r0
      0010D4 08               [12] 4112 	inc	r0
      0010D5 86 07            [24] 4113 	mov	ar7,@r0
      0010D7 18               [12] 4114 	dec	r0
      0010D8 18               [12] 4115 	dec	r0
      0010D9 18               [12] 4116 	dec	r0
      0010DA E5 81            [12] 4117 	mov	a,sp
      0010DC 24 45            [12] 4118 	add	a,#0x45
      0010DE F8               [12] 4119 	mov	r0,a
      0010DF A6 03            [24] 4120 	mov	@r0,ar3
      0010E1 08               [12] 4121 	inc	r0
      0010E2 A6 04            [24] 4122 	mov	@r0,ar4
      0010E4 D0 00            [24] 4123 	pop	ar0
      0010E6 02r15rCC         [24] 4124 	ljmp	00149$
      0010E9                       4125 00139$:
                                   4126 ;	../../../../core/loader/elfloader.c:452: } else if(strncmp(name, ".rela.text", 10) == 0) {
      0010E9 C0 00            [24] 4127 	push	ar0
      0010EB E5 81            [12] 4128 	mov	a,sp
      0010ED 24 49            [12] 4129 	add	a,#0x49
      0010EF F8               [12] 4130 	mov	r0,a
      0010F0 86 04            [24] 4131 	mov	ar4,@r0
      0010F2 7E 00            [12] 4132 	mov	r6,#0x00
      0010F4 7F 40            [12] 4133 	mov	r7,#0x40
      0010F6 D0 00            [24] 4134 	pop	ar0
      0010F8 C0 05            [24] 4135 	push	ar5
      0010FA C0 02            [24] 4136 	push	ar2
      0010FC C0 01            [24] 4137 	push	ar1
      0010FE C0 00            [24] 4138 	push	ar0
      001100 74 0A            [12] 4139 	mov	a,#0x0A
      001102 C0 E0            [24] 4140 	push	acc
      001104 E4               [12] 4141 	clr	a
      001105 C0 E0            [24] 4142 	push	acc
      001107 74r2B            [12] 4143 	mov	a,#__str_3
      001109 C0 E0            [24] 4144 	push	acc
      00110B 74s00            [12] 4145 	mov	a,#(__str_3 >> 8)
      00110D C0 E0            [24] 4146 	push	acc
      00110F 74 80            [12] 4147 	mov	a,#0x80
      001111 C0 E0            [24] 4148 	push	acc
      001113 8C 82            [24] 4149 	mov	dpl,r4
      001115 8E 83            [24] 4150 	mov	dph,r6
      001117 8F F0            [24] 4151 	mov	b,r7
      001119 78r00            [12] 4152 	mov	r0,#_strncmp
      00111B 79s00            [12] 4153 	mov	r1,#(_strncmp >> 8)
      00111D 7As00            [12] 4154 	mov	r2,#(_strncmp >> 16)
      00111F 12r00r00         [24] 4155 	lcall	__sdcc_banked_call
      001122 AE 82            [24] 4156 	mov	r6,dpl
      001124 AF 83            [24] 4157 	mov	r7,dph
      001126 E5 81            [12] 4158 	mov	a,sp
      001128 24 FB            [12] 4159 	add	a,#0xfb
      00112A F5 81            [12] 4160 	mov	sp,a
      00112C D0 00            [24] 4161 	pop	ar0
      00112E D0 01            [24] 4162 	pop	ar1
      001130 D0 02            [24] 4163 	pop	ar2
      001132 D0 05            [24] 4164 	pop	ar5
      001134 EE               [12] 4165 	mov	a,r6
      001135 4F               [12] 4166 	orl	a,r7
      001136 70 46            [24] 4167 	jnz	00136$
                                   4168 ;	../../../../core/loader/elfloader.c:453: using_relas = 1;
      001138 C0 00            [24] 4169 	push	ar0
      00113A E5 81            [12] 4170 	mov	a,sp
      00113C 24 F1            [12] 4171 	add	a,#0xf1
      00113E F8               [12] 4172 	mov	r0,a
      00113F 76 01            [12] 4173 	mov	@r0,#0x01
                                   4174 ;	../../../../core/loader/elfloader.c:454: textrelaoff = shdr.sh_offset;
      001141 E5 81            [12] 4175 	mov	a,sp
      001143 24 52            [12] 4176 	add	a,#0x52
      001145 F8               [12] 4177 	mov	r0,a
      001146 86 00            [24] 4178 	mov	ar0,@r0
      001148 86 03            [24] 4179 	mov	ar3,@r0
      00114A 08               [12] 4180 	inc	r0
      00114B 86 04            [24] 4181 	mov	ar4,@r0
      00114D 08               [12] 4182 	inc	r0
      00114E 86 06            [24] 4183 	mov	ar6,@r0
      001150 08               [12] 4184 	inc	r0
      001151 86 07            [24] 4185 	mov	ar7,@r0
      001153 18               [12] 4186 	dec	r0
      001154 18               [12] 4187 	dec	r0
      001155 18               [12] 4188 	dec	r0
      001156 8B 02            [24] 4189 	mov	ar2,r3
      001158 8C 05            [24] 4190 	mov	ar5,r4
                                   4191 ;	../../../../core/loader/elfloader.c:455: textrelasize = shdr.sh_size;
      00115A E5 81            [12] 4192 	mov	a,sp
      00115C 24 50            [12] 4193 	add	a,#0x50
      00115E F8               [12] 4194 	mov	r0,a
      00115F 86 00            [24] 4195 	mov	ar0,@r0
      001161 86 03            [24] 4196 	mov	ar3,@r0
      001163 08               [12] 4197 	inc	r0
      001164 86 04            [24] 4198 	mov	ar4,@r0
      001166 08               [12] 4199 	inc	r0
      001167 86 06            [24] 4200 	mov	ar6,@r0
      001169 08               [12] 4201 	inc	r0
      00116A 86 07            [24] 4202 	mov	ar7,@r0
      00116C 18               [12] 4203 	dec	r0
      00116D 18               [12] 4204 	dec	r0
      00116E 18               [12] 4205 	dec	r0
      00116F E5 81            [12] 4206 	mov	a,sp
      001171 24 45            [12] 4207 	add	a,#0x45
      001173 F8               [12] 4208 	mov	r0,a
      001174 A6 03            [24] 4209 	mov	@r0,ar3
      001176 08               [12] 4210 	inc	r0
      001177 A6 04            [24] 4211 	mov	@r0,ar4
      001179 D0 00            [24] 4212 	pop	ar0
      00117B 02r15rCC         [24] 4213 	ljmp	00149$
      00117E                       4214 00136$:
                                   4215 ;	../../../../core/loader/elfloader.c:456: } else if(strncmp(name, ".data", 5) == 0) {
      00117E C0 00            [24] 4216 	push	ar0
      001180 E5 81            [12] 4217 	mov	a,sp
      001182 24 4A            [12] 4218 	add	a,#0x4a
      001184 F8               [12] 4219 	mov	r0,a
      001185 86 04            [24] 4220 	mov	ar4,@r0
      001187 7E 00            [12] 4221 	mov	r6,#0x00
      001189 7F 40            [12] 4222 	mov	r7,#0x40
      00118B D0 00            [24] 4223 	pop	ar0
      00118D C0 05            [24] 4224 	push	ar5
      00118F C0 02            [24] 4225 	push	ar2
      001191 C0 01            [24] 4226 	push	ar1
      001193 C0 00            [24] 4227 	push	ar0
      001195 74 05            [12] 4228 	mov	a,#0x05
      001197 C0 E0            [24] 4229 	push	acc
      001199 E4               [12] 4230 	clr	a
      00119A C0 E0            [24] 4231 	push	acc
      00119C 74r36            [12] 4232 	mov	a,#__str_4
      00119E C0 E0            [24] 4233 	push	acc
      0011A0 74s00            [12] 4234 	mov	a,#(__str_4 >> 8)
      0011A2 C0 E0            [24] 4235 	push	acc
      0011A4 74 80            [12] 4236 	mov	a,#0x80
      0011A6 C0 E0            [24] 4237 	push	acc
      0011A8 8C 82            [24] 4238 	mov	dpl,r4
      0011AA 8E 83            [24] 4239 	mov	dph,r6
      0011AC 8F F0            [24] 4240 	mov	b,r7
      0011AE 78r00            [12] 4241 	mov	r0,#_strncmp
      0011B0 79s00            [12] 4242 	mov	r1,#(_strncmp >> 8)
      0011B2 7As00            [12] 4243 	mov	r2,#(_strncmp >> 16)
      0011B4 12r00r00         [24] 4244 	lcall	__sdcc_banked_call
      0011B7 AE 82            [24] 4245 	mov	r6,dpl
      0011B9 AF 83            [24] 4246 	mov	r7,dph
      0011BB E5 81            [12] 4247 	mov	a,sp
      0011BD 24 FB            [12] 4248 	add	a,#0xfb
      0011BF F5 81            [12] 4249 	mov	sp,a
      0011C1 D0 00            [24] 4250 	pop	ar0
      0011C3 D0 01            [24] 4251 	pop	ar1
      0011C5 D0 02            [24] 4252 	pop	ar2
      0011C7 D0 05            [24] 4253 	pop	ar5
      0011C9 EE               [12] 4254 	mov	a,r6
      0011CA 4F               [12] 4255 	orl	a,r7
      0011CB 70 5F            [24] 4256 	jnz	00133$
                                   4257 ;	../../../../core/loader/elfloader.c:457: dataoff = shdr.sh_offset;
      0011CD C0 00            [24] 4258 	push	ar0
      0011CF E5 81            [12] 4259 	mov	a,sp
      0011D1 24 52            [12] 4260 	add	a,#0x52
      0011D3 F8               [12] 4261 	mov	r0,a
      0011D4 86 00            [24] 4262 	mov	ar0,@r0
      0011D6 86 03            [24] 4263 	mov	ar3,@r0
      0011D8 08               [12] 4264 	inc	r0
      0011D9 86 04            [24] 4265 	mov	ar4,@r0
      0011DB 08               [12] 4266 	inc	r0
      0011DC 86 06            [24] 4267 	mov	ar6,@r0
      0011DE 08               [12] 4268 	inc	r0
      0011DF 86 07            [24] 4269 	mov	ar7,@r0
      0011E1 18               [12] 4270 	dec	r0
      0011E2 18               [12] 4271 	dec	r0
      0011E3 18               [12] 4272 	dec	r0
      0011E4 E5 81            [12] 4273 	mov	a,sp
      0011E6 24 F6            [12] 4274 	add	a,#0xf6
      0011E8 F8               [12] 4275 	mov	r0,a
      0011E9 A6 03            [24] 4276 	mov	@r0,ar3
      0011EB 08               [12] 4277 	inc	r0
      0011EC A6 04            [24] 4278 	mov	@r0,ar4
                                   4279 ;	../../../../core/loader/elfloader.c:458: datasize = shdr.sh_size;
      0011EE E5 81            [12] 4280 	mov	a,sp
      0011F0 24 50            [12] 4281 	add	a,#0x50
      0011F2 F8               [12] 4282 	mov	r0,a
      0011F3 86 00            [24] 4283 	mov	ar0,@r0
      0011F5 86 03            [24] 4284 	mov	ar3,@r0
      0011F7 08               [12] 4285 	inc	r0
      0011F8 86 04            [24] 4286 	mov	ar4,@r0
      0011FA 08               [12] 4287 	inc	r0
      0011FB 86 06            [24] 4288 	mov	ar6,@r0
      0011FD 08               [12] 4289 	inc	r0
      0011FE 86 07            [24] 4290 	mov	ar7,@r0
      001200 18               [12] 4291 	dec	r0
      001201 18               [12] 4292 	dec	r0
      001202 18               [12] 4293 	dec	r0
      001203 E5 81            [12] 4294 	mov	a,sp
      001205 24 43            [12] 4295 	add	a,#0x43
      001207 F8               [12] 4296 	mov	r0,a
      001208 A6 03            [24] 4297 	mov	@r0,ar3
      00120A 08               [12] 4298 	inc	r0
      00120B A6 04            [24] 4299 	mov	@r0,ar4
                                   4300 ;	../../../../core/loader/elfloader.c:459: data.number = i;
      00120D E5 81            [12] 4301 	mov	a,sp
      00120F 24 EB            [12] 4302 	add	a,#0xeb
      001211 F8               [12] 4303 	mov	r0,a
      001212 86 07            [24] 4304 	mov	ar7,@r0
      001214 90r00r27         [24] 4305 	mov	dptr,#_data
      001217 EF               [12] 4306 	mov	a,r7
      001218 F0               [24] 4307 	movx	@dptr,a
                                   4308 ;	../../../../core/loader/elfloader.c:460: data.offset = dataoff;
      001219 90r00r28         [24] 4309 	mov	dptr,#(_data + 0x0001)
      00121C E5 81            [12] 4310 	mov	a,sp
      00121E 24 F6            [12] 4311 	add	a,#0xf6
      001220 F8               [12] 4312 	mov	r0,a
      001221 E6               [12] 4313 	mov	a,@r0
      001222 F0               [24] 4314 	movx	@dptr,a
      001223 08               [12] 4315 	inc	r0
      001224 E6               [12] 4316 	mov	a,@r0
      001225 A3               [24] 4317 	inc	dptr
      001226 F0               [24] 4318 	movx	@dptr,a
      001227 D0 00            [24] 4319 	pop	ar0
      001229 02r15rCC         [24] 4320 	ljmp	00149$
      00122C                       4321 00133$:
                                   4322 ;	../../../../core/loader/elfloader.c:461: } else if(strncmp(name, ".rodata", 7) == 0) {
      00122C C0 00            [24] 4323 	push	ar0
      00122E E5 81            [12] 4324 	mov	a,sp
      001230 24 4B            [12] 4325 	add	a,#0x4b
      001232 F8               [12] 4326 	mov	r0,a
      001233 86 04            [24] 4327 	mov	ar4,@r0
      001235 7E 00            [12] 4328 	mov	r6,#0x00
      001237 7F 40            [12] 4329 	mov	r7,#0x40
      001239 D0 00            [24] 4330 	pop	ar0
      00123B C0 05            [24] 4331 	push	ar5
      00123D C0 02            [24] 4332 	push	ar2
      00123F C0 01            [24] 4333 	push	ar1
      001241 C0 00            [24] 4334 	push	ar0
      001243 74 07            [12] 4335 	mov	a,#0x07
      001245 C0 E0            [24] 4336 	push	acc
      001247 E4               [12] 4337 	clr	a
      001248 C0 E0            [24] 4338 	push	acc
      00124A 74r3C            [12] 4339 	mov	a,#__str_5
      00124C C0 E0            [24] 4340 	push	acc
      00124E 74s00            [12] 4341 	mov	a,#(__str_5 >> 8)
      001250 C0 E0            [24] 4342 	push	acc
      001252 74 80            [12] 4343 	mov	a,#0x80
      001254 C0 E0            [24] 4344 	push	acc
      001256 8C 82            [24] 4345 	mov	dpl,r4
      001258 8E 83            [24] 4346 	mov	dph,r6
      00125A 8F F0            [24] 4347 	mov	b,r7
      00125C 78r00            [12] 4348 	mov	r0,#_strncmp
      00125E 79s00            [12] 4349 	mov	r1,#(_strncmp >> 8)
      001260 7As00            [12] 4350 	mov	r2,#(_strncmp >> 16)
      001262 12r00r00         [24] 4351 	lcall	__sdcc_banked_call
      001265 AE 82            [24] 4352 	mov	r6,dpl
      001267 AF 83            [24] 4353 	mov	r7,dph
      001269 E5 81            [12] 4354 	mov	a,sp
      00126B 24 FB            [12] 4355 	add	a,#0xfb
      00126D F5 81            [12] 4356 	mov	sp,a
      00126F D0 00            [24] 4357 	pop	ar0
      001271 D0 01            [24] 4358 	pop	ar1
      001273 D0 02            [24] 4359 	pop	ar2
      001275 D0 05            [24] 4360 	pop	ar5
      001277 EE               [12] 4361 	mov	a,r6
      001278 4F               [12] 4362 	orl	a,r7
      001279 70 5F            [24] 4363 	jnz	00130$
                                   4364 ;	../../../../core/loader/elfloader.c:463: rodataoff = shdr.sh_offset;
      00127B C0 00            [24] 4365 	push	ar0
      00127D E5 81            [12] 4366 	mov	a,sp
      00127F 24 52            [12] 4367 	add	a,#0x52
      001281 F8               [12] 4368 	mov	r0,a
      001282 86 00            [24] 4369 	mov	ar0,@r0
      001284 86 03            [24] 4370 	mov	ar3,@r0
      001286 08               [12] 4371 	inc	r0
      001287 86 04            [24] 4372 	mov	ar4,@r0
      001289 08               [12] 4373 	inc	r0
      00128A 86 06            [24] 4374 	mov	ar6,@r0
      00128C 08               [12] 4375 	inc	r0
      00128D 86 07            [24] 4376 	mov	ar7,@r0
      00128F 18               [12] 4377 	dec	r0
      001290 18               [12] 4378 	dec	r0
      001291 18               [12] 4379 	dec	r0
      001292 E5 81            [12] 4380 	mov	a,sp
      001294 24 F8            [12] 4381 	add	a,#0xf8
      001296 F8               [12] 4382 	mov	r0,a
      001297 A6 03            [24] 4383 	mov	@r0,ar3
      001299 08               [12] 4384 	inc	r0
      00129A A6 04            [24] 4385 	mov	@r0,ar4
                                   4386 ;	../../../../core/loader/elfloader.c:464: rodatasize = shdr.sh_size;
      00129C E5 81            [12] 4387 	mov	a,sp
      00129E 24 50            [12] 4388 	add	a,#0x50
      0012A0 F8               [12] 4389 	mov	r0,a
      0012A1 86 00            [24] 4390 	mov	ar0,@r0
      0012A3 86 03            [24] 4391 	mov	ar3,@r0
      0012A5 08               [12] 4392 	inc	r0
      0012A6 86 04            [24] 4393 	mov	ar4,@r0
      0012A8 08               [12] 4394 	inc	r0
      0012A9 86 06            [24] 4395 	mov	ar6,@r0
      0012AB 08               [12] 4396 	inc	r0
      0012AC 86 07            [24] 4397 	mov	ar7,@r0
      0012AE 18               [12] 4398 	dec	r0
      0012AF 18               [12] 4399 	dec	r0
      0012B0 18               [12] 4400 	dec	r0
      0012B1 E5 81            [12] 4401 	mov	a,sp
      0012B3 24 3F            [12] 4402 	add	a,#0x3f
      0012B5 F8               [12] 4403 	mov	r0,a
      0012B6 A6 03            [24] 4404 	mov	@r0,ar3
      0012B8 08               [12] 4405 	inc	r0
      0012B9 A6 04            [24] 4406 	mov	@r0,ar4
                                   4407 ;	../../../../core/loader/elfloader.c:465: rodata.number = i;
      0012BB E5 81            [12] 4408 	mov	a,sp
      0012BD 24 EB            [12] 4409 	add	a,#0xeb
      0012BF F8               [12] 4410 	mov	r0,a
      0012C0 86 07            [24] 4411 	mov	ar7,@r0
      0012C2 90r00r2D         [24] 4412 	mov	dptr,#_rodata
      0012C5 EF               [12] 4413 	mov	a,r7
      0012C6 F0               [24] 4414 	movx	@dptr,a
                                   4415 ;	../../../../core/loader/elfloader.c:466: rodata.offset = rodataoff;
      0012C7 90r00r2E         [24] 4416 	mov	dptr,#(_rodata + 0x0001)
      0012CA E5 81            [12] 4417 	mov	a,sp
      0012CC 24 F8            [12] 4418 	add	a,#0xf8
      0012CE F8               [12] 4419 	mov	r0,a
      0012CF E6               [12] 4420 	mov	a,@r0
      0012D0 F0               [24] 4421 	movx	@dptr,a
      0012D1 08               [12] 4422 	inc	r0
      0012D2 E6               [12] 4423 	mov	a,@r0
      0012D3 A3               [24] 4424 	inc	dptr
      0012D4 F0               [24] 4425 	movx	@dptr,a
      0012D5 D0 00            [24] 4426 	pop	ar0
      0012D7 02r15rCC         [24] 4427 	ljmp	00149$
      0012DA                       4428 00130$:
                                   4429 ;	../../../../core/loader/elfloader.c:467: } else if(strncmp(name, ".rel.rodata", 11) == 0) {
      0012DA C0 00            [24] 4430 	push	ar0
      0012DC E5 81            [12] 4431 	mov	a,sp
      0012DE 24 4C            [12] 4432 	add	a,#0x4c
      0012E0 F8               [12] 4433 	mov	r0,a
      0012E1 86 04            [24] 4434 	mov	ar4,@r0
      0012E3 7E 00            [12] 4435 	mov	r6,#0x00
      0012E5 7F 40            [12] 4436 	mov	r7,#0x40
      0012E7 D0 00            [24] 4437 	pop	ar0
      0012E9 C0 05            [24] 4438 	push	ar5
      0012EB C0 02            [24] 4439 	push	ar2
      0012ED C0 01            [24] 4440 	push	ar1
      0012EF C0 00            [24] 4441 	push	ar0
      0012F1 74 0B            [12] 4442 	mov	a,#0x0B
      0012F3 C0 E0            [24] 4443 	push	acc
      0012F5 E4               [12] 4444 	clr	a
      0012F6 C0 E0            [24] 4445 	push	acc
      0012F8 74r44            [12] 4446 	mov	a,#__str_6
      0012FA C0 E0            [24] 4447 	push	acc
      0012FC 74s00            [12] 4448 	mov	a,#(__str_6 >> 8)
      0012FE C0 E0            [24] 4449 	push	acc
      001300 74 80            [12] 4450 	mov	a,#0x80
      001302 C0 E0            [24] 4451 	push	acc
      001304 8C 82            [24] 4452 	mov	dpl,r4
      001306 8E 83            [24] 4453 	mov	dph,r6
      001308 8F F0            [24] 4454 	mov	b,r7
      00130A 78r00            [12] 4455 	mov	r0,#_strncmp
      00130C 79s00            [12] 4456 	mov	r1,#(_strncmp >> 8)
      00130E 7As00            [12] 4457 	mov	r2,#(_strncmp >> 16)
      001310 12r00r00         [24] 4458 	lcall	__sdcc_banked_call
      001313 AE 82            [24] 4459 	mov	r6,dpl
      001315 AF 83            [24] 4460 	mov	r7,dph
      001317 E5 81            [12] 4461 	mov	a,sp
      001319 24 FB            [12] 4462 	add	a,#0xfb
      00131B F5 81            [12] 4463 	mov	sp,a
      00131D D0 00            [24] 4464 	pop	ar0
      00131F D0 01            [24] 4465 	pop	ar1
      001321 D0 02            [24] 4466 	pop	ar2
      001323 D0 05            [24] 4467 	pop	ar5
      001325 EE               [12] 4468 	mov	a,r6
      001326 4F               [12] 4469 	orl	a,r7
      001327 70 4C            [24] 4470 	jnz	00127$
                                   4471 ;	../../../../core/loader/elfloader.c:469: using_relas = 0;
      001329 C0 00            [24] 4472 	push	ar0
      00132B E5 81            [12] 4473 	mov	a,sp
      00132D 24 F1            [12] 4474 	add	a,#0xf1
      00132F F8               [12] 4475 	mov	r0,a
      001330 76 00            [12] 4476 	mov	@r0,#0x00
                                   4477 ;	../../../../core/loader/elfloader.c:470: rodatarelaoff = shdr.sh_offset;
      001332 E5 81            [12] 4478 	mov	a,sp
      001334 24 52            [12] 4479 	add	a,#0x52
      001336 F8               [12] 4480 	mov	r0,a
      001337 86 00            [24] 4481 	mov	ar0,@r0
      001339 86 03            [24] 4482 	mov	ar3,@r0
      00133B 08               [12] 4483 	inc	r0
      00133C 86 04            [24] 4484 	mov	ar4,@r0
      00133E 08               [12] 4485 	inc	r0
      00133F 86 06            [24] 4486 	mov	ar6,@r0
      001341 08               [12] 4487 	inc	r0
      001342 86 07            [24] 4488 	mov	ar7,@r0
      001344 18               [12] 4489 	dec	r0
      001345 18               [12] 4490 	dec	r0
      001346 18               [12] 4491 	dec	r0
      001347 E5 81            [12] 4492 	mov	a,sp
      001349 24 32            [12] 4493 	add	a,#0x32
      00134B F8               [12] 4494 	mov	r0,a
      00134C A6 03            [24] 4495 	mov	@r0,ar3
      00134E 08               [12] 4496 	inc	r0
      00134F A6 04            [24] 4497 	mov	@r0,ar4
                                   4498 ;	../../../../core/loader/elfloader.c:471: rodatarelasize = shdr.sh_size;
      001351 E5 81            [12] 4499 	mov	a,sp
      001353 24 50            [12] 4500 	add	a,#0x50
      001355 F8               [12] 4501 	mov	r0,a
      001356 86 00            [24] 4502 	mov	ar0,@r0
      001358 86 03            [24] 4503 	mov	ar3,@r0
      00135A 08               [12] 4504 	inc	r0
      00135B 86 04            [24] 4505 	mov	ar4,@r0
      00135D 08               [12] 4506 	inc	r0
      00135E 86 06            [24] 4507 	mov	ar6,@r0
      001360 08               [12] 4508 	inc	r0
      001361 86 07            [24] 4509 	mov	ar7,@r0
      001363 18               [12] 4510 	dec	r0
      001364 18               [12] 4511 	dec	r0
      001365 18               [12] 4512 	dec	r0
      001366 E5 81            [12] 4513 	mov	a,sp
      001368 24 37            [12] 4514 	add	a,#0x37
      00136A F8               [12] 4515 	mov	r0,a
      00136B A6 03            [24] 4516 	mov	@r0,ar3
      00136D 08               [12] 4517 	inc	r0
      00136E A6 04            [24] 4518 	mov	@r0,ar4
      001370 D0 00            [24] 4519 	pop	ar0
      001372 02r15rCC         [24] 4520 	ljmp	00149$
      001375                       4521 00127$:
                                   4522 ;	../../../../core/loader/elfloader.c:472: } else if(strncmp(name, ".rela.rodata", 12) == 0) {
      001375 C0 00            [24] 4523 	push	ar0
      001377 E5 81            [12] 4524 	mov	a,sp
      001379 24 4D            [12] 4525 	add	a,#0x4d
      00137B F8               [12] 4526 	mov	r0,a
      00137C 86 04            [24] 4527 	mov	ar4,@r0
      00137E 7E 00            [12] 4528 	mov	r6,#0x00
      001380 7F 40            [12] 4529 	mov	r7,#0x40
      001382 D0 00            [24] 4530 	pop	ar0
      001384 C0 05            [24] 4531 	push	ar5
      001386 C0 02            [24] 4532 	push	ar2
      001388 C0 01            [24] 4533 	push	ar1
      00138A C0 00            [24] 4534 	push	ar0
      00138C 74 0C            [12] 4535 	mov	a,#0x0C
      00138E C0 E0            [24] 4536 	push	acc
      001390 E4               [12] 4537 	clr	a
      001391 C0 E0            [24] 4538 	push	acc
      001393 74r50            [12] 4539 	mov	a,#__str_7
      001395 C0 E0            [24] 4540 	push	acc
      001397 74s00            [12] 4541 	mov	a,#(__str_7 >> 8)
      001399 C0 E0            [24] 4542 	push	acc
      00139B 74 80            [12] 4543 	mov	a,#0x80
      00139D C0 E0            [24] 4544 	push	acc
      00139F 8C 82            [24] 4545 	mov	dpl,r4
      0013A1 8E 83            [24] 4546 	mov	dph,r6
      0013A3 8F F0            [24] 4547 	mov	b,r7
      0013A5 78r00            [12] 4548 	mov	r0,#_strncmp
      0013A7 79s00            [12] 4549 	mov	r1,#(_strncmp >> 8)
      0013A9 7As00            [12] 4550 	mov	r2,#(_strncmp >> 16)
      0013AB 12r00r00         [24] 4551 	lcall	__sdcc_banked_call
      0013AE AE 82            [24] 4552 	mov	r6,dpl
      0013B0 AF 83            [24] 4553 	mov	r7,dph
      0013B2 E5 81            [12] 4554 	mov	a,sp
      0013B4 24 FB            [12] 4555 	add	a,#0xfb
      0013B6 F5 81            [12] 4556 	mov	sp,a
      0013B8 D0 00            [24] 4557 	pop	ar0
      0013BA D0 01            [24] 4558 	pop	ar1
      0013BC D0 02            [24] 4559 	pop	ar2
      0013BE D0 05            [24] 4560 	pop	ar5
      0013C0 EE               [12] 4561 	mov	a,r6
      0013C1 4F               [12] 4562 	orl	a,r7
      0013C2 70 4C            [24] 4563 	jnz	00124$
                                   4564 ;	../../../../core/loader/elfloader.c:473: using_relas = 1;
      0013C4 C0 00            [24] 4565 	push	ar0
      0013C6 E5 81            [12] 4566 	mov	a,sp
      0013C8 24 F1            [12] 4567 	add	a,#0xf1
      0013CA F8               [12] 4568 	mov	r0,a
      0013CB 76 01            [12] 4569 	mov	@r0,#0x01
                                   4570 ;	../../../../core/loader/elfloader.c:474: rodatarelaoff = shdr.sh_offset;
      0013CD E5 81            [12] 4571 	mov	a,sp
      0013CF 24 52            [12] 4572 	add	a,#0x52
      0013D1 F8               [12] 4573 	mov	r0,a
      0013D2 86 00            [24] 4574 	mov	ar0,@r0
      0013D4 86 03            [24] 4575 	mov	ar3,@r0
      0013D6 08               [12] 4576 	inc	r0
      0013D7 86 04            [24] 4577 	mov	ar4,@r0
      0013D9 08               [12] 4578 	inc	r0
      0013DA 86 06            [24] 4579 	mov	ar6,@r0
      0013DC 08               [12] 4580 	inc	r0
      0013DD 86 07            [24] 4581 	mov	ar7,@r0
      0013DF 18               [12] 4582 	dec	r0
      0013E0 18               [12] 4583 	dec	r0
      0013E1 18               [12] 4584 	dec	r0
      0013E2 E5 81            [12] 4585 	mov	a,sp
      0013E4 24 32            [12] 4586 	add	a,#0x32
      0013E6 F8               [12] 4587 	mov	r0,a
      0013E7 A6 03            [24] 4588 	mov	@r0,ar3
      0013E9 08               [12] 4589 	inc	r0
      0013EA A6 04            [24] 4590 	mov	@r0,ar4
                                   4591 ;	../../../../core/loader/elfloader.c:475: rodatarelasize = shdr.sh_size;
      0013EC E5 81            [12] 4592 	mov	a,sp
      0013EE 24 50            [12] 4593 	add	a,#0x50
      0013F0 F8               [12] 4594 	mov	r0,a
      0013F1 86 00            [24] 4595 	mov	ar0,@r0
      0013F3 86 03            [24] 4596 	mov	ar3,@r0
      0013F5 08               [12] 4597 	inc	r0
      0013F6 86 04            [24] 4598 	mov	ar4,@r0
      0013F8 08               [12] 4599 	inc	r0
      0013F9 86 06            [24] 4600 	mov	ar6,@r0
      0013FB 08               [12] 4601 	inc	r0
      0013FC 86 07            [24] 4602 	mov	ar7,@r0
      0013FE 18               [12] 4603 	dec	r0
      0013FF 18               [12] 4604 	dec	r0
      001400 18               [12] 4605 	dec	r0
      001401 E5 81            [12] 4606 	mov	a,sp
      001403 24 37            [12] 4607 	add	a,#0x37
      001405 F8               [12] 4608 	mov	r0,a
      001406 A6 03            [24] 4609 	mov	@r0,ar3
      001408 08               [12] 4610 	inc	r0
      001409 A6 04            [24] 4611 	mov	@r0,ar4
      00140B D0 00            [24] 4612 	pop	ar0
      00140D 02r15rCC         [24] 4613 	ljmp	00149$
      001410                       4614 00124$:
                                   4615 ;	../../../../core/loader/elfloader.c:476: } else if(strncmp(name, ".rel.data", 9) == 0) {
      001410 C0 00            [24] 4616 	push	ar0
      001412 E5 81            [12] 4617 	mov	a,sp
      001414 24 4E            [12] 4618 	add	a,#0x4e
      001416 F8               [12] 4619 	mov	r0,a
      001417 86 04            [24] 4620 	mov	ar4,@r0
      001419 7E 00            [12] 4621 	mov	r6,#0x00
      00141B 7F 40            [12] 4622 	mov	r7,#0x40
      00141D D0 00            [24] 4623 	pop	ar0
      00141F C0 05            [24] 4624 	push	ar5
      001421 C0 02            [24] 4625 	push	ar2
      001423 C0 01            [24] 4626 	push	ar1
      001425 C0 00            [24] 4627 	push	ar0
      001427 74 09            [12] 4628 	mov	a,#0x09
      001429 C0 E0            [24] 4629 	push	acc
      00142B E4               [12] 4630 	clr	a
      00142C C0 E0            [24] 4631 	push	acc
      00142E 74r5D            [12] 4632 	mov	a,#__str_8
      001430 C0 E0            [24] 4633 	push	acc
      001432 74s00            [12] 4634 	mov	a,#(__str_8 >> 8)
      001434 C0 E0            [24] 4635 	push	acc
      001436 74 80            [12] 4636 	mov	a,#0x80
      001438 C0 E0            [24] 4637 	push	acc
      00143A 8C 82            [24] 4638 	mov	dpl,r4
      00143C 8E 83            [24] 4639 	mov	dph,r6
      00143E 8F F0            [24] 4640 	mov	b,r7
      001440 78r00            [12] 4641 	mov	r0,#_strncmp
      001442 79s00            [12] 4642 	mov	r1,#(_strncmp >> 8)
      001444 7As00            [12] 4643 	mov	r2,#(_strncmp >> 16)
      001446 12r00r00         [24] 4644 	lcall	__sdcc_banked_call
      001449 AE 82            [24] 4645 	mov	r6,dpl
      00144B AF 83            [24] 4646 	mov	r7,dph
      00144D E5 81            [12] 4647 	mov	a,sp
      00144F 24 FB            [12] 4648 	add	a,#0xfb
      001451 F5 81            [12] 4649 	mov	sp,a
      001453 D0 00            [24] 4650 	pop	ar0
      001455 D0 01            [24] 4651 	pop	ar1
      001457 D0 02            [24] 4652 	pop	ar2
      001459 D0 05            [24] 4653 	pop	ar5
      00145B EE               [12] 4654 	mov	a,r6
      00145C 4F               [12] 4655 	orl	a,r7
      00145D 70 4C            [24] 4656 	jnz	00121$
                                   4657 ;	../../../../core/loader/elfloader.c:478: using_relas = 0;
      00145F C0 00            [24] 4658 	push	ar0
      001461 E5 81            [12] 4659 	mov	a,sp
      001463 24 F1            [12] 4660 	add	a,#0xf1
      001465 F8               [12] 4661 	mov	r0,a
      001466 76 00            [12] 4662 	mov	@r0,#0x00
                                   4663 ;	../../../../core/loader/elfloader.c:479: datarelaoff = shdr.sh_offset;
      001468 E5 81            [12] 4664 	mov	a,sp
      00146A 24 52            [12] 4665 	add	a,#0x52
      00146C F8               [12] 4666 	mov	r0,a
      00146D 86 00            [24] 4667 	mov	ar0,@r0
      00146F 86 03            [24] 4668 	mov	ar3,@r0
      001471 08               [12] 4669 	inc	r0
      001472 86 04            [24] 4670 	mov	ar4,@r0
      001474 08               [12] 4671 	inc	r0
      001475 86 06            [24] 4672 	mov	ar6,@r0
      001477 08               [12] 4673 	inc	r0
      001478 86 07            [24] 4674 	mov	ar7,@r0
      00147A 18               [12] 4675 	dec	r0
      00147B 18               [12] 4676 	dec	r0
      00147C 18               [12] 4677 	dec	r0
      00147D E5 81            [12] 4678 	mov	a,sp
      00147F 24 30            [12] 4679 	add	a,#0x30
      001481 F8               [12] 4680 	mov	r0,a
      001482 A6 03            [24] 4681 	mov	@r0,ar3
      001484 08               [12] 4682 	inc	r0
      001485 A6 04            [24] 4683 	mov	@r0,ar4
                                   4684 ;	../../../../core/loader/elfloader.c:480: datarelasize = shdr.sh_size;
      001487 E5 81            [12] 4685 	mov	a,sp
      001489 24 50            [12] 4686 	add	a,#0x50
      00148B F8               [12] 4687 	mov	r0,a
      00148C 86 00            [24] 4688 	mov	ar0,@r0
      00148E 86 03            [24] 4689 	mov	ar3,@r0
      001490 08               [12] 4690 	inc	r0
      001491 86 04            [24] 4691 	mov	ar4,@r0
      001493 08               [12] 4692 	inc	r0
      001494 86 06            [24] 4693 	mov	ar6,@r0
      001496 08               [12] 4694 	inc	r0
      001497 86 07            [24] 4695 	mov	ar7,@r0
      001499 18               [12] 4696 	dec	r0
      00149A 18               [12] 4697 	dec	r0
      00149B 18               [12] 4698 	dec	r0
      00149C E5 81            [12] 4699 	mov	a,sp
      00149E 24 41            [12] 4700 	add	a,#0x41
      0014A0 F8               [12] 4701 	mov	r0,a
      0014A1 A6 03            [24] 4702 	mov	@r0,ar3
      0014A3 08               [12] 4703 	inc	r0
      0014A4 A6 04            [24] 4704 	mov	@r0,ar4
      0014A6 D0 00            [24] 4705 	pop	ar0
      0014A8 02r15rCC         [24] 4706 	ljmp	00149$
      0014AB                       4707 00121$:
                                   4708 ;	../../../../core/loader/elfloader.c:481: } else if(strncmp(name, ".rela.data", 10) == 0) {
      0014AB C0 00            [24] 4709 	push	ar0
      0014AD E5 81            [12] 4710 	mov	a,sp
      0014AF 24 4F            [12] 4711 	add	a,#0x4f
      0014B1 F8               [12] 4712 	mov	r0,a
      0014B2 86 04            [24] 4713 	mov	ar4,@r0
      0014B4 7E 00            [12] 4714 	mov	r6,#0x00
      0014B6 7F 40            [12] 4715 	mov	r7,#0x40
      0014B8 D0 00            [24] 4716 	pop	ar0
      0014BA C0 05            [24] 4717 	push	ar5
      0014BC C0 02            [24] 4718 	push	ar2
      0014BE C0 01            [24] 4719 	push	ar1
      0014C0 C0 00            [24] 4720 	push	ar0
      0014C2 74 0A            [12] 4721 	mov	a,#0x0A
      0014C4 C0 E0            [24] 4722 	push	acc
      0014C6 E4               [12] 4723 	clr	a
      0014C7 C0 E0            [24] 4724 	push	acc
      0014C9 74r67            [12] 4725 	mov	a,#__str_9
      0014CB C0 E0            [24] 4726 	push	acc
      0014CD 74s00            [12] 4727 	mov	a,#(__str_9 >> 8)
      0014CF C0 E0            [24] 4728 	push	acc
      0014D1 74 80            [12] 4729 	mov	a,#0x80
      0014D3 C0 E0            [24] 4730 	push	acc
      0014D5 8C 82            [24] 4731 	mov	dpl,r4
      0014D7 8E 83            [24] 4732 	mov	dph,r6
      0014D9 8F F0            [24] 4733 	mov	b,r7
      0014DB 78r00            [12] 4734 	mov	r0,#_strncmp
      0014DD 79s00            [12] 4735 	mov	r1,#(_strncmp >> 8)
      0014DF 7As00            [12] 4736 	mov	r2,#(_strncmp >> 16)
      0014E1 12r00r00         [24] 4737 	lcall	__sdcc_banked_call
      0014E4 AE 82            [24] 4738 	mov	r6,dpl
      0014E6 AF 83            [24] 4739 	mov	r7,dph
      0014E8 E5 81            [12] 4740 	mov	a,sp
      0014EA 24 FB            [12] 4741 	add	a,#0xfb
      0014EC F5 81            [12] 4742 	mov	sp,a
      0014EE D0 00            [24] 4743 	pop	ar0
      0014F0 D0 01            [24] 4744 	pop	ar1
      0014F2 D0 02            [24] 4745 	pop	ar2
      0014F4 D0 05            [24] 4746 	pop	ar5
      0014F6 EE               [12] 4747 	mov	a,r6
      0014F7 4F               [12] 4748 	orl	a,r7
      0014F8 70 4C            [24] 4749 	jnz	00118$
                                   4750 ;	../../../../core/loader/elfloader.c:482: using_relas = 1;
      0014FA C0 00            [24] 4751 	push	ar0
      0014FC E5 81            [12] 4752 	mov	a,sp
      0014FE 24 F1            [12] 4753 	add	a,#0xf1
      001500 F8               [12] 4754 	mov	r0,a
      001501 76 01            [12] 4755 	mov	@r0,#0x01
                                   4756 ;	../../../../core/loader/elfloader.c:483: datarelaoff = shdr.sh_offset;
      001503 E5 81            [12] 4757 	mov	a,sp
      001505 24 52            [12] 4758 	add	a,#0x52
      001507 F8               [12] 4759 	mov	r0,a
      001508 86 00            [24] 4760 	mov	ar0,@r0
      00150A 86 03            [24] 4761 	mov	ar3,@r0
      00150C 08               [12] 4762 	inc	r0
      00150D 86 04            [24] 4763 	mov	ar4,@r0
      00150F 08               [12] 4764 	inc	r0
      001510 86 06            [24] 4765 	mov	ar6,@r0
      001512 08               [12] 4766 	inc	r0
      001513 86 07            [24] 4767 	mov	ar7,@r0
      001515 18               [12] 4768 	dec	r0
      001516 18               [12] 4769 	dec	r0
      001517 18               [12] 4770 	dec	r0
      001518 E5 81            [12] 4771 	mov	a,sp
      00151A 24 30            [12] 4772 	add	a,#0x30
      00151C F8               [12] 4773 	mov	r0,a
      00151D A6 03            [24] 4774 	mov	@r0,ar3
      00151F 08               [12] 4775 	inc	r0
      001520 A6 04            [24] 4776 	mov	@r0,ar4
                                   4777 ;	../../../../core/loader/elfloader.c:484: datarelasize = shdr.sh_size;
      001522 E5 81            [12] 4778 	mov	a,sp
      001524 24 50            [12] 4779 	add	a,#0x50
      001526 F8               [12] 4780 	mov	r0,a
      001527 86 00            [24] 4781 	mov	ar0,@r0
      001529 86 03            [24] 4782 	mov	ar3,@r0
      00152B 08               [12] 4783 	inc	r0
      00152C 86 04            [24] 4784 	mov	ar4,@r0
      00152E 08               [12] 4785 	inc	r0
      00152F 86 06            [24] 4786 	mov	ar6,@r0
      001531 08               [12] 4787 	inc	r0
      001532 86 07            [24] 4788 	mov	ar7,@r0
      001534 18               [12] 4789 	dec	r0
      001535 18               [12] 4790 	dec	r0
      001536 18               [12] 4791 	dec	r0
      001537 E5 81            [12] 4792 	mov	a,sp
      001539 24 41            [12] 4793 	add	a,#0x41
      00153B F8               [12] 4794 	mov	r0,a
      00153C A6 03            [24] 4795 	mov	@r0,ar3
      00153E 08               [12] 4796 	inc	r0
      00153F A6 04            [24] 4797 	mov	@r0,ar4
      001541 D0 00            [24] 4798 	pop	ar0
      001543 02r15rCC         [24] 4799 	ljmp	00149$
      001546                       4800 00118$:
                                   4801 ;	../../../../core/loader/elfloader.c:485: } else if(strncmp(name, ".bss", 4) == 0) {
      001546 C0 00            [24] 4802 	push	ar0
      001548 E5 81            [12] 4803 	mov	a,sp
      00154A 24 51            [12] 4804 	add	a,#0x51
      00154C F8               [12] 4805 	mov	r0,a
      00154D 86 04            [24] 4806 	mov	ar4,@r0
      00154F 7E 00            [12] 4807 	mov	r6,#0x00
      001551 7F 40            [12] 4808 	mov	r7,#0x40
      001553 D0 00            [24] 4809 	pop	ar0
      001555 C0 05            [24] 4810 	push	ar5
      001557 C0 02            [24] 4811 	push	ar2
      001559 C0 01            [24] 4812 	push	ar1
      00155B C0 00            [24] 4813 	push	ar0
      00155D 74 04            [12] 4814 	mov	a,#0x04
      00155F C0 E0            [24] 4815 	push	acc
      001561 E4               [12] 4816 	clr	a
      001562 C0 E0            [24] 4817 	push	acc
      001564 74r72            [12] 4818 	mov	a,#__str_10
      001566 C0 E0            [24] 4819 	push	acc
      001568 74s00            [12] 4820 	mov	a,#(__str_10 >> 8)
      00156A C0 E0            [24] 4821 	push	acc
      00156C 74 80            [12] 4822 	mov	a,#0x80
      00156E C0 E0            [24] 4823 	push	acc
      001570 8C 82            [24] 4824 	mov	dpl,r4
      001572 8E 83            [24] 4825 	mov	dph,r6
      001574 8F F0            [24] 4826 	mov	b,r7
      001576 78r00            [12] 4827 	mov	r0,#_strncmp
      001578 79s00            [12] 4828 	mov	r1,#(_strncmp >> 8)
      00157A 7As00            [12] 4829 	mov	r2,#(_strncmp >> 16)
      00157C 12r00r00         [24] 4830 	lcall	__sdcc_banked_call
      00157F AE 82            [24] 4831 	mov	r6,dpl
      001581 AF 83            [24] 4832 	mov	r7,dph
      001583 E5 81            [12] 4833 	mov	a,sp
      001585 24 FB            [12] 4834 	add	a,#0xfb
      001587 F5 81            [12] 4835 	mov	sp,a
      001589 D0 00            [24] 4836 	pop	ar0
      00158B D0 01            [24] 4837 	pop	ar1
      00158D D0 02            [24] 4838 	pop	ar2
      00158F D0 05            [24] 4839 	pop	ar5
      001591 EE               [12] 4840 	mov	a,r6
      001592 4F               [12] 4841 	orl	a,r7
      001593 70 37            [24] 4842 	jnz	00149$
                                   4843 ;	../../../../core/loader/elfloader.c:486: bsssize = shdr.sh_size;
      001595 C0 00            [24] 4844 	push	ar0
      001597 E5 81            [12] 4845 	mov	a,sp
      001599 24 50            [12] 4846 	add	a,#0x50
      00159B F8               [12] 4847 	mov	r0,a
      00159C 86 00            [24] 4848 	mov	ar0,@r0
      00159E 86 03            [24] 4849 	mov	ar3,@r0
      0015A0 08               [12] 4850 	inc	r0
      0015A1 86 04            [24] 4851 	mov	ar4,@r0
      0015A3 08               [12] 4852 	inc	r0
      0015A4 86 06            [24] 4853 	mov	ar6,@r0
      0015A6 08               [12] 4854 	inc	r0
      0015A7 86 07            [24] 4855 	mov	ar7,@r0
      0015A9 18               [12] 4856 	dec	r0
      0015AA 18               [12] 4857 	dec	r0
      0015AB 18               [12] 4858 	dec	r0
      0015AC E5 81            [12] 4859 	mov	a,sp
      0015AE 24 34            [12] 4860 	add	a,#0x34
      0015B0 F8               [12] 4861 	mov	r0,a
      0015B1 A6 03            [24] 4862 	mov	@r0,ar3
      0015B3 08               [12] 4863 	inc	r0
      0015B4 A6 04            [24] 4864 	mov	@r0,ar4
                                   4865 ;	../../../../core/loader/elfloader.c:487: bss.number = i;
      0015B6 E5 81            [12] 4866 	mov	a,sp
      0015B8 24 EB            [12] 4867 	add	a,#0xeb
      0015BA F8               [12] 4868 	mov	r0,a
      0015BB 86 07            [24] 4869 	mov	ar7,@r0
      0015BD D0 00            [24] 4870 	pop	ar0
      0015BF 90r00r21         [24] 4871 	mov	dptr,#_bss
      0015C2 EF               [12] 4872 	mov	a,r7
      0015C3 F0               [24] 4873 	movx	@dptr,a
                                   4874 ;	../../../../core/loader/elfloader.c:488: bss.offset = 0;
      0015C4 90r00r22         [24] 4875 	mov	dptr,#(_bss + 0x0001)
      0015C7 E4               [12] 4876 	clr	a
      0015C8 F0               [24] 4877 	movx	@dptr,a
      0015C9 E4               [12] 4878 	clr	a
      0015CA A3               [24] 4879 	inc	dptr
      0015CB F0               [24] 4880 	movx	@dptr,a
      0015CC                       4881 00149$:
                                   4882 ;	../../../../core/loader/elfloader.c:492: shdrptr += shdrsize;
      0015CC C0 00            [24] 4883 	push	ar0
      0015CE E5 81            [12] 4884 	mov	a,sp
      0015D0 24 DD            [12] 4885 	add	a,#0xdd
      0015D2 F8               [12] 4886 	mov	r0,a
      0015D3 C0 01            [24] 4887 	push	ar1
      0015D5 E5 81            [12] 4888 	mov	a,sp
      0015D7 24 EE            [12] 4889 	add	a,#0xee
      0015D9 F9               [12] 4890 	mov	r1,a
      0015DA E7               [12] 4891 	mov	a,@r1
      0015DB 26               [12] 4892 	add	a,@r0
      0015DC F6               [12] 4893 	mov	@r0,a
      0015DD 09               [12] 4894 	inc	r1
      0015DE E7               [12] 4895 	mov	a,@r1
      0015DF 08               [12] 4896 	inc	r0
      0015E0 36               [12] 4897 	addc	a,@r0
      0015E1 F6               [12] 4898 	mov	@r0,a
      0015E2 D0 01            [24] 4899 	pop	ar1
                                   4900 ;	../../../../core/loader/elfloader.c:419: for(i = 0; i < shdrnum; ++i) {
      0015E4 E5 81            [12] 4901 	mov	a,sp
      0015E6 24 EB            [12] 4902 	add	a,#0xeb
      0015E8 F8               [12] 4903 	mov	r0,a
      0015E9 06               [12] 4904 	inc	@r0
      0015EA B6 00 02         [24] 4905 	cjne	@r0,#0x00,00301$
      0015ED 08               [12] 4906 	inc	r0
      0015EE 06               [12] 4907 	inc	@r0
      0015EF                       4908 00301$:
      0015EF D0 00            [24] 4909 	pop	ar0
      0015F1 02r0DrE7         [24] 4910 	ljmp	00205$
      0015F4                       4911 00150$:
                                   4912 ;	../../../../core/loader/elfloader.c:495: if(symtabsize == 0) {
      0015F4 E5 81            [12] 4913 	mov	a,sp
      0015F6 24 FD            [12] 4914 	add	a,#0xfd
      0015F8 F8               [12] 4915 	mov	r0,a
      0015F9 E6               [12] 4916 	mov	a,@r0
      0015FA 08               [12] 4917 	inc	r0
      0015FB 46               [12] 4918 	orl	a,@r0
      0015FC 70 06            [24] 4919 	jnz	00152$
                                   4920 ;	../../../../core/loader/elfloader.c:496: return ELFLOADER_NO_SYMTAB;
      0015FE 90 00 02         [24] 4921 	mov	dptr,#0x0002
      001601 02r1Ar3C         [24] 4922 	ljmp	00207$
      001604                       4923 00152$:
                                   4924 ;	../../../../core/loader/elfloader.c:498: if(strtabsize == 0) {
      001604 E5 81            [12] 4925 	mov	a,sp
      001606 24 3C            [12] 4926 	add	a,#0x3c
      001608 F8               [12] 4927 	mov	r0,a
      001609 E6               [12] 4928 	mov	a,@r0
      00160A 08               [12] 4929 	inc	r0
      00160B 46               [12] 4930 	orl	a,@r0
      00160C 70 06            [24] 4931 	jnz	00154$
                                   4932 ;	../../../../core/loader/elfloader.c:499: return ELFLOADER_NO_STRTAB;
      00160E 90 00 03         [24] 4933 	mov	dptr,#0x0003
      001611 02r1Ar3C         [24] 4934 	ljmp	00207$
      001614                       4935 00154$:
                                   4936 ;	../../../../core/loader/elfloader.c:501: if(textsize == 0) {
      001614 E5 81            [12] 4937 	mov	a,sp
      001616 24 F5            [12] 4938 	add	a,#0xf5
      001618 F8               [12] 4939 	mov	r0,a
      001619 E6               [12] 4940 	mov	a,@r0
      00161A 08               [12] 4941 	inc	r0
      00161B 46               [12] 4942 	orl	a,@r0
      00161C 70 06            [24] 4943 	jnz	00157$
                                   4944 ;	../../../../core/loader/elfloader.c:502: return ELFLOADER_NO_TEXT;
      00161E 90 00 04         [24] 4945 	mov	dptr,#0x0004
      001621 02r1Ar3C         [24] 4946 	ljmp	00207$
                                   4947 ;	../../../../core/loader/elfloader.c:505: PRINTF("before allocate ram\n");
      001624                       4948 00157$:
                                   4949 ;	../../../../core/loader/elfloader.c:506: bss.address = (char *)elfloader_arch_allocate_ram(bsssize + datasize);
      001624 E5 81            [12] 4950 	mov	a,sp
      001626 24 35            [12] 4951 	add	a,#0x35
      001628 F8               [12] 4952 	mov	r0,a
      001629 E5 81            [12] 4953 	mov	a,sp
      00162B 24 44            [12] 4954 	add	a,#0x44
      00162D F9               [12] 4955 	mov	r1,a
      00162E E7               [12] 4956 	mov	a,@r1
      00162F 26               [12] 4957 	add	a,@r0
      001630 FE               [12] 4958 	mov	r6,a
      001631 09               [12] 4959 	inc	r1
      001632 E7               [12] 4960 	mov	a,@r1
      001633 08               [12] 4961 	inc	r0
      001634 36               [12] 4962 	addc	a,@r0
      001635 FF               [12] 4963 	mov	r7,a
      001636 8E 82            [24] 4964 	mov	dpl,r6
      001638 8F 83            [24] 4965 	mov	dph,r7
      00163A C0 05            [24] 4966 	push	ar5
      00163C C0 02            [24] 4967 	push	ar2
      00163E 78r00            [12] 4968 	mov	r0,#_elfloader_arch_allocate_ram
      001640 79s00            [12] 4969 	mov	r1,#(_elfloader_arch_allocate_ram >> 8)
      001642 7As00            [12] 4970 	mov	r2,#(_elfloader_arch_allocate_ram >> 16)
      001644 12r00r00         [24] 4971 	lcall	__sdcc_banked_call
      001647 AC 82            [24] 4972 	mov	r4,dpl
      001649 AE 83            [24] 4973 	mov	r6,dph
      00164B AF F0            [24] 4974 	mov	r7,b
      00164D D0 02            [24] 4975 	pop	ar2
      00164F D0 05            [24] 4976 	pop	ar5
      001651 90r00r24         [24] 4977 	mov	dptr,#(_bss + 0x0003)
      001654 EC               [12] 4978 	mov	a,r4
      001655 F0               [24] 4979 	movx	@dptr,a
      001656 EE               [12] 4980 	mov	a,r6
      001657 A3               [24] 4981 	inc	dptr
      001658 F0               [24] 4982 	movx	@dptr,a
      001659 EF               [12] 4983 	mov	a,r7
      00165A A3               [24] 4984 	inc	dptr
      00165B F0               [24] 4985 	movx	@dptr,a
                                   4986 ;	../../../../core/loader/elfloader.c:507: data.address = (char *)bss.address + bsssize;
      00165C E5 81            [12] 4987 	mov	a,sp
      00165E 24 35            [12] 4988 	add	a,#0x35
      001660 F8               [12] 4989 	mov	r0,a
      001661 E6               [12] 4990 	mov	a,@r0
      001662 2C               [12] 4991 	add	a,r4
      001663 FC               [12] 4992 	mov	r4,a
      001664 08               [12] 4993 	inc	r0
      001665 E6               [12] 4994 	mov	a,@r0
      001666 3E               [12] 4995 	addc	a,r6
      001667 FE               [12] 4996 	mov	r6,a
      001668 90r00r2A         [24] 4997 	mov	dptr,#(_data + 0x0003)
      00166B EC               [12] 4998 	mov	a,r4
      00166C F0               [24] 4999 	movx	@dptr,a
      00166D EE               [12] 5000 	mov	a,r6
      00166E A3               [24] 5001 	inc	dptr
      00166F F0               [24] 5002 	movx	@dptr,a
      001670 EF               [12] 5003 	mov	a,r7
      001671 A3               [24] 5004 	inc	dptr
      001672 F0               [24] 5005 	movx	@dptr,a
                                   5006 ;	../../../../core/loader/elfloader.c:509: text.address = (char *)elfloader_arch_allocate_rom(textsize + rodatasize);
      001673 E5 81            [12] 5007 	mov	a,sp
      001675 24 F5            [12] 5008 	add	a,#0xf5
      001677 F8               [12] 5009 	mov	r0,a
      001678 E5 81            [12] 5010 	mov	a,sp
      00167A 24 40            [12] 5011 	add	a,#0x40
      00167C F9               [12] 5012 	mov	r1,a
      00167D E7               [12] 5013 	mov	a,@r1
      00167E 26               [12] 5014 	add	a,@r0
      00167F FE               [12] 5015 	mov	r6,a
      001680 09               [12] 5016 	inc	r1
      001681 E7               [12] 5017 	mov	a,@r1
      001682 08               [12] 5018 	inc	r0
      001683 36               [12] 5019 	addc	a,@r0
      001684 FF               [12] 5020 	mov	r7,a
      001685 8E 82            [24] 5021 	mov	dpl,r6
      001687 8F 83            [24] 5022 	mov	dph,r7
      001689 C0 05            [24] 5023 	push	ar5
      00168B C0 02            [24] 5024 	push	ar2
      00168D 78r00            [12] 5025 	mov	r0,#_elfloader_arch_allocate_rom
      00168F 79s00            [12] 5026 	mov	r1,#(_elfloader_arch_allocate_rom >> 8)
      001691 7As00            [12] 5027 	mov	r2,#(_elfloader_arch_allocate_rom >> 16)
      001693 12r00r00         [24] 5028 	lcall	__sdcc_banked_call
      001696 AC 82            [24] 5029 	mov	r4,dpl
      001698 AE 83            [24] 5030 	mov	r6,dph
      00169A AF F0            [24] 5031 	mov	r7,b
      00169C D0 02            [24] 5032 	pop	ar2
      00169E D0 05            [24] 5033 	pop	ar5
      0016A0 90r00r36         [24] 5034 	mov	dptr,#(_text + 0x0003)
      0016A3 EC               [12] 5035 	mov	a,r4
      0016A4 F0               [24] 5036 	movx	@dptr,a
      0016A5 EE               [12] 5037 	mov	a,r6
      0016A6 A3               [24] 5038 	inc	dptr
      0016A7 F0               [24] 5039 	movx	@dptr,a
      0016A8 EF               [12] 5040 	mov	a,r7
      0016A9 A3               [24] 5041 	inc	dptr
      0016AA F0               [24] 5042 	movx	@dptr,a
                                   5043 ;	../../../../core/loader/elfloader.c:510: rodata.address = (char *)text.address + textsize;
      0016AB E5 81            [12] 5044 	mov	a,sp
      0016AD 24 F5            [12] 5045 	add	a,#0xf5
      0016AF F8               [12] 5046 	mov	r0,a
      0016B0 E6               [12] 5047 	mov	a,@r0
      0016B1 2C               [12] 5048 	add	a,r4
      0016B2 FC               [12] 5049 	mov	r4,a
      0016B3 08               [12] 5050 	inc	r0
      0016B4 E6               [12] 5051 	mov	a,@r0
      0016B5 3E               [12] 5052 	addc	a,r6
      0016B6 FE               [12] 5053 	mov	r6,a
      0016B7 90r00r30         [24] 5054 	mov	dptr,#(_rodata + 0x0003)
      0016BA EC               [12] 5055 	mov	a,r4
      0016BB F0               [24] 5056 	movx	@dptr,a
      0016BC EE               [12] 5057 	mov	a,r6
      0016BD A3               [24] 5058 	inc	dptr
      0016BE F0               [24] 5059 	movx	@dptr,a
      0016BF EF               [12] 5060 	mov	a,r7
      0016C0 A3               [24] 5061 	inc	dptr
      0016C1 F0               [24] 5062 	movx	@dptr,a
                                   5063 ;	../../../../core/loader/elfloader.c:521: if(textrelasize > 0) {
      0016C2 E5 81            [12] 5064 	mov	a,sp
      0016C4 24 46            [12] 5065 	add	a,#0x46
      0016C6 F8               [12] 5066 	mov	r0,a
      0016C7 E6               [12] 5067 	mov	a,@r0
      0016C8 08               [12] 5068 	inc	r0
      0016C9 46               [12] 5069 	orl	a,@r0
      0016CA 70 03            [24] 5070 	jnz	00305$
      0016CC 02r17r5C         [24] 5071 	ljmp	00175$
      0016CF                       5072 00305$:
                                   5073 ;	../../../../core/loader/elfloader.c:525: text.address,
      0016CF 90r00r36         [24] 5074 	mov	dptr,#(_text + 0x0003)
      0016D2 E0               [24] 5075 	movx	a,@dptr
      0016D3 FC               [12] 5076 	mov	r4,a
      0016D4 A3               [24] 5077 	inc	dptr
      0016D5 E0               [24] 5078 	movx	a,@dptr
      0016D6 FE               [12] 5079 	mov	r6,a
      0016D7 A3               [24] 5080 	inc	dptr
      0016D8 E0               [24] 5081 	movx	a,@dptr
      0016D9 FF               [12] 5082 	mov	r7,a
                                   5083 ;	../../../../core/loader/elfloader.c:522: ret = relocate_section(fd,
      0016DA E5 81            [12] 5084 	mov	a,sp
      0016DC 24 F2            [12] 5085 	add	a,#0xf2
      0016DE F8               [12] 5086 	mov	r0,a
      0016DF E6               [12] 5087 	mov	a,@r0
      0016E0 C0 E0            [24] 5088 	push	acc
      0016E2 E5 81            [12] 5089 	mov	a,sp
      0016E4 24 FC            [12] 5090 	add	a,#0xfc
      0016E6 F8               [12] 5091 	mov	r0,a
      0016E7 E6               [12] 5092 	mov	a,@r0
      0016E8 C0 E0            [24] 5093 	push	acc
      0016EA 08               [12] 5094 	inc	r0
      0016EB E6               [12] 5095 	mov	a,@r0
      0016EC C0 E0            [24] 5096 	push	acc
      0016EE E5 81            [12] 5097 	mov	a,sp
      0016F0 24 F8            [12] 5098 	add	a,#0xf8
      0016F2 F8               [12] 5099 	mov	r0,a
      0016F3 E6               [12] 5100 	mov	a,@r0
      0016F4 C0 E0            [24] 5101 	push	acc
      0016F6 08               [12] 5102 	inc	r0
      0016F7 E6               [12] 5103 	mov	a,@r0
      0016F8 C0 E0            [24] 5104 	push	acc
      0016FA E5 81            [12] 5105 	mov	a,sp
      0016FC 24 FA            [12] 5106 	add	a,#0xfa
      0016FE F8               [12] 5107 	mov	r0,a
      0016FF E6               [12] 5108 	mov	a,@r0
      001700 C0 E0            [24] 5109 	push	acc
      001702 08               [12] 5110 	inc	r0
      001703 E6               [12] 5111 	mov	a,@r0
      001704 C0 E0            [24] 5112 	push	acc
      001706 E5 81            [12] 5113 	mov	a,sp
      001708 24 D5            [12] 5114 	add	a,#0xd5
      00170A F8               [12] 5115 	mov	r0,a
      00170B E6               [12] 5116 	mov	a,@r0
      00170C C0 E0            [24] 5117 	push	acc
      00170E 08               [12] 5118 	inc	r0
      00170F E6               [12] 5119 	mov	a,@r0
      001710 C0 E0            [24] 5120 	push	acc
      001712 C0 04            [24] 5121 	push	ar4
      001714 C0 06            [24] 5122 	push	ar6
      001716 C0 07            [24] 5123 	push	ar7
      001718 E5 81            [12] 5124 	mov	a,sp
      00171A 24 E7            [12] 5125 	add	a,#0xe7
      00171C F8               [12] 5126 	mov	r0,a
      00171D E6               [12] 5127 	mov	a,@r0
      00171E C0 E0            [24] 5128 	push	acc
      001720 08               [12] 5129 	inc	r0
      001721 E6               [12] 5130 	mov	a,@r0
      001722 C0 E0            [24] 5131 	push	acc
      001724 E5 81            [12] 5132 	mov	a,sp
      001726 24 38            [12] 5133 	add	a,#0x38
      001728 F8               [12] 5134 	mov	r0,a
      001729 E6               [12] 5135 	mov	a,@r0
      00172A C0 E0            [24] 5136 	push	acc
      00172C 08               [12] 5137 	inc	r0
      00172D E6               [12] 5138 	mov	a,@r0
      00172E C0 E0            [24] 5139 	push	acc
      001730 C0 02            [24] 5140 	push	ar2
      001732 C0 05            [24] 5141 	push	ar5
      001734 E5 81            [12] 5142 	mov	a,sp
      001736 24 1D            [12] 5143 	add	a,#0x1d
      001738 F8               [12] 5144 	mov	r0,a
      001739 86 82            [24] 5145 	mov	dpl,@r0
      00173B 08               [12] 5146 	inc	r0
      00173C 86 83            [24] 5147 	mov	dph,@r0
      00173E 78r8D            [12] 5148 	mov	r0,#_relocate_section
      001740 79s02            [12] 5149 	mov	r1,#(_relocate_section >> 8)
      001742 7As00            [12] 5150 	mov	r2,#(_relocate_section >> 16)
      001744 12r00r00         [24] 5151 	lcall	__sdcc_banked_call
      001747 AE 82            [24] 5152 	mov	r6,dpl
      001749 AF 83            [24] 5153 	mov	r7,dph
      00174B E5 81            [12] 5154 	mov	a,sp
      00174D 24 EE            [12] 5155 	add	a,#0xee
      00174F F5 81            [12] 5156 	mov	sp,a
                                   5157 ;	../../../../core/loader/elfloader.c:529: if(ret != ELFLOADER_OK) {
      001751 EE               [12] 5158 	mov	a,r6
      001752 4F               [12] 5159 	orl	a,r7
      001753 60 07            [24] 5160 	jz	00175$
                                   5161 ;	../../../../core/loader/elfloader.c:530: return ret;
      001755 8E 82            [24] 5162 	mov	dpl,r6
      001757 8F 83            [24] 5163 	mov	dph,r7
      001759 02r1Ar3C         [24] 5164 	ljmp	00207$
                                   5165 ;	../../../../core/loader/elfloader.c:535: PRINTF("elfloader: relocate rodata\n");
      00175C                       5166 00175$:
                                   5167 ;	../../../../core/loader/elfloader.c:536: if(rodatarelasize > 0) {
      00175C E5 81            [12] 5168 	mov	a,sp
      00175E 24 38            [12] 5169 	add	a,#0x38
      001760 F8               [12] 5170 	mov	r0,a
      001761 E6               [12] 5171 	mov	a,@r0
      001762 08               [12] 5172 	inc	r0
      001763 46               [12] 5173 	orl	a,@r0
      001764 70 03            [24] 5174 	jnz	00307$
      001766 02r18r02         [24] 5175 	ljmp	00183$
      001769                       5176 00307$:
                                   5177 ;	../../../../core/loader/elfloader.c:540: rodata.address,
      001769 90r00r30         [24] 5178 	mov	dptr,#(_rodata + 0x0003)
      00176C E0               [24] 5179 	movx	a,@dptr
      00176D FB               [12] 5180 	mov	r3,a
      00176E A3               [24] 5181 	inc	dptr
      00176F E0               [24] 5182 	movx	a,@dptr
      001770 FC               [12] 5183 	mov	r4,a
      001771 A3               [24] 5184 	inc	dptr
      001772 E0               [24] 5185 	movx	a,@dptr
      001773 FD               [12] 5186 	mov	r5,a
                                   5187 ;	../../../../core/loader/elfloader.c:537: ret = relocate_section(fd,
      001774 E5 81            [12] 5188 	mov	a,sp
      001776 24 F2            [12] 5189 	add	a,#0xf2
      001778 F8               [12] 5190 	mov	r0,a
      001779 E6               [12] 5191 	mov	a,@r0
      00177A C0 E0            [24] 5192 	push	acc
      00177C E5 81            [12] 5193 	mov	a,sp
      00177E 24 FC            [12] 5194 	add	a,#0xfc
      001780 F8               [12] 5195 	mov	r0,a
      001781 E6               [12] 5196 	mov	a,@r0
      001782 C0 E0            [24] 5197 	push	acc
      001784 08               [12] 5198 	inc	r0
      001785 E6               [12] 5199 	mov	a,@r0
      001786 C0 E0            [24] 5200 	push	acc
      001788 E5 81            [12] 5201 	mov	a,sp
      00178A 24 F8            [12] 5202 	add	a,#0xf8
      00178C F8               [12] 5203 	mov	r0,a
      00178D E6               [12] 5204 	mov	a,@r0
      00178E C0 E0            [24] 5205 	push	acc
      001790 08               [12] 5206 	inc	r0
      001791 E6               [12] 5207 	mov	a,@r0
      001792 C0 E0            [24] 5208 	push	acc
      001794 E5 81            [12] 5209 	mov	a,sp
      001796 24 FA            [12] 5210 	add	a,#0xfa
      001798 F8               [12] 5211 	mov	r0,a
      001799 E6               [12] 5212 	mov	a,@r0
      00179A C0 E0            [24] 5213 	push	acc
      00179C 08               [12] 5214 	inc	r0
      00179D E6               [12] 5215 	mov	a,@r0
      00179E C0 E0            [24] 5216 	push	acc
      0017A0 E5 81            [12] 5217 	mov	a,sp
      0017A2 24 D5            [12] 5218 	add	a,#0xd5
      0017A4 F8               [12] 5219 	mov	r0,a
      0017A5 E6               [12] 5220 	mov	a,@r0
      0017A6 C0 E0            [24] 5221 	push	acc
      0017A8 08               [12] 5222 	inc	r0
      0017A9 E6               [12] 5223 	mov	a,@r0
      0017AA C0 E0            [24] 5224 	push	acc
      0017AC C0 03            [24] 5225 	push	ar3
      0017AE C0 04            [24] 5226 	push	ar4
      0017B0 C0 05            [24] 5227 	push	ar5
      0017B2 E5 81            [12] 5228 	mov	a,sp
      0017B4 24 ED            [12] 5229 	add	a,#0xed
      0017B6 F8               [12] 5230 	mov	r0,a
      0017B7 E6               [12] 5231 	mov	a,@r0
      0017B8 C0 E0            [24] 5232 	push	acc
      0017BA 08               [12] 5233 	inc	r0
      0017BB E6               [12] 5234 	mov	a,@r0
      0017BC C0 E0            [24] 5235 	push	acc
      0017BE E5 81            [12] 5236 	mov	a,sp
      0017C0 24 2A            [12] 5237 	add	a,#0x2a
      0017C2 F8               [12] 5238 	mov	r0,a
      0017C3 E6               [12] 5239 	mov	a,@r0
      0017C4 C0 E0            [24] 5240 	push	acc
      0017C6 08               [12] 5241 	inc	r0
      0017C7 E6               [12] 5242 	mov	a,@r0
      0017C8 C0 E0            [24] 5243 	push	acc
      0017CA E5 81            [12] 5244 	mov	a,sp
      0017CC 24 23            [12] 5245 	add	a,#0x23
      0017CE F8               [12] 5246 	mov	r0,a
      0017CF E6               [12] 5247 	mov	a,@r0
      0017D0 C0 E0            [24] 5248 	push	acc
      0017D2 08               [12] 5249 	inc	r0
      0017D3 E6               [12] 5250 	mov	a,@r0
      0017D4 C0 E0            [24] 5251 	push	acc
      0017D6 E5 81            [12] 5252 	mov	a,sp
      0017D8 24 1D            [12] 5253 	add	a,#0x1d
      0017DA F8               [12] 5254 	mov	r0,a
      0017DB 86 82            [24] 5255 	mov	dpl,@r0
      0017DD 08               [12] 5256 	inc	r0
      0017DE 86 83            [24] 5257 	mov	dph,@r0
      0017E0 78r8D            [12] 5258 	mov	r0,#_relocate_section
      0017E2 79s02            [12] 5259 	mov	r1,#(_relocate_section >> 8)
      0017E4 7As00            [12] 5260 	mov	r2,#(_relocate_section >> 16)
      0017E6 12r00r00         [24] 5261 	lcall	__sdcc_banked_call
      0017E9 AC 82            [24] 5262 	mov	r4,dpl
      0017EB AD 83            [24] 5263 	mov	r5,dph
      0017ED E5 81            [12] 5264 	mov	a,sp
      0017EF 24 EE            [12] 5265 	add	a,#0xee
      0017F1 F5 81            [12] 5266 	mov	sp,a
      0017F3 8C 06            [24] 5267 	mov	ar6,r4
      0017F5 8D 07            [24] 5268 	mov	ar7,r5
                                   5269 ;	../../../../core/loader/elfloader.c:544: if(ret != ELFLOADER_OK) {
      0017F7 EE               [12] 5270 	mov	a,r6
      0017F8 4F               [12] 5271 	orl	a,r7
      0017F9 60 07            [24] 5272 	jz	00183$
                                   5273 ;	../../../../core/loader/elfloader.c:546: return ret;
      0017FB 8E 82            [24] 5274 	mov	dpl,r6
      0017FD 8F 83            [24] 5275 	mov	dph,r7
      0017FF 02r1Ar3C         [24] 5276 	ljmp	00207$
                                   5277 ;	../../../../core/loader/elfloader.c:551: PRINTF("elfloader: relocate data\n");
      001802                       5278 00183$:
                                   5279 ;	../../../../core/loader/elfloader.c:552: if(datarelasize > 0) {
      001802 E5 81            [12] 5280 	mov	a,sp
      001804 24 42            [12] 5281 	add	a,#0x42
      001806 F8               [12] 5282 	mov	r0,a
      001807 E6               [12] 5283 	mov	a,@r0
      001808 08               [12] 5284 	inc	r0
      001809 46               [12] 5285 	orl	a,@r0
      00180A 70 03            [24] 5286 	jnz	00309$
      00180C 02r18rA8         [24] 5287 	ljmp	00190$
      00180F                       5288 00309$:
                                   5289 ;	../../../../core/loader/elfloader.c:556: data.address,
      00180F 90r00r2A         [24] 5290 	mov	dptr,#(_data + 0x0003)
      001812 E0               [24] 5291 	movx	a,@dptr
      001813 FB               [12] 5292 	mov	r3,a
      001814 A3               [24] 5293 	inc	dptr
      001815 E0               [24] 5294 	movx	a,@dptr
      001816 FC               [12] 5295 	mov	r4,a
      001817 A3               [24] 5296 	inc	dptr
      001818 E0               [24] 5297 	movx	a,@dptr
      001819 FD               [12] 5298 	mov	r5,a
                                   5299 ;	../../../../core/loader/elfloader.c:553: ret = relocate_section(fd,
      00181A E5 81            [12] 5300 	mov	a,sp
      00181C 24 F2            [12] 5301 	add	a,#0xf2
      00181E F8               [12] 5302 	mov	r0,a
      00181F E6               [12] 5303 	mov	a,@r0
      001820 C0 E0            [24] 5304 	push	acc
      001822 E5 81            [12] 5305 	mov	a,sp
      001824 24 FC            [12] 5306 	add	a,#0xfc
      001826 F8               [12] 5307 	mov	r0,a
      001827 E6               [12] 5308 	mov	a,@r0
      001828 C0 E0            [24] 5309 	push	acc
      00182A 08               [12] 5310 	inc	r0
      00182B E6               [12] 5311 	mov	a,@r0
      00182C C0 E0            [24] 5312 	push	acc
      00182E E5 81            [12] 5313 	mov	a,sp
      001830 24 F8            [12] 5314 	add	a,#0xf8
      001832 F8               [12] 5315 	mov	r0,a
      001833 E6               [12] 5316 	mov	a,@r0
      001834 C0 E0            [24] 5317 	push	acc
      001836 08               [12] 5318 	inc	r0
      001837 E6               [12] 5319 	mov	a,@r0
      001838 C0 E0            [24] 5320 	push	acc
      00183A E5 81            [12] 5321 	mov	a,sp
      00183C 24 FA            [12] 5322 	add	a,#0xfa
      00183E F8               [12] 5323 	mov	r0,a
      00183F E6               [12] 5324 	mov	a,@r0
      001840 C0 E0            [24] 5325 	push	acc
      001842 08               [12] 5326 	inc	r0
      001843 E6               [12] 5327 	mov	a,@r0
      001844 C0 E0            [24] 5328 	push	acc
      001846 E5 81            [12] 5329 	mov	a,sp
      001848 24 D5            [12] 5330 	add	a,#0xd5
      00184A F8               [12] 5331 	mov	r0,a
      00184B E6               [12] 5332 	mov	a,@r0
      00184C C0 E0            [24] 5333 	push	acc
      00184E 08               [12] 5334 	inc	r0
      00184F E6               [12] 5335 	mov	a,@r0
      001850 C0 E0            [24] 5336 	push	acc
      001852 C0 03            [24] 5337 	push	ar3
      001854 C0 04            [24] 5338 	push	ar4
      001856 C0 05            [24] 5339 	push	ar5
      001858 E5 81            [12] 5340 	mov	a,sp
      00185A 24 EB            [12] 5341 	add	a,#0xeb
      00185C F8               [12] 5342 	mov	r0,a
      00185D E6               [12] 5343 	mov	a,@r0
      00185E C0 E0            [24] 5344 	push	acc
      001860 08               [12] 5345 	inc	r0
      001861 E6               [12] 5346 	mov	a,@r0
      001862 C0 E0            [24] 5347 	push	acc
      001864 E5 81            [12] 5348 	mov	a,sp
      001866 24 34            [12] 5349 	add	a,#0x34
      001868 F8               [12] 5350 	mov	r0,a
      001869 E6               [12] 5351 	mov	a,@r0
      00186A C0 E0            [24] 5352 	push	acc
      00186C 08               [12] 5353 	inc	r0
      00186D E6               [12] 5354 	mov	a,@r0
      00186E C0 E0            [24] 5355 	push	acc
      001870 E5 81            [12] 5356 	mov	a,sp
      001872 24 21            [12] 5357 	add	a,#0x21
      001874 F8               [12] 5358 	mov	r0,a
      001875 E6               [12] 5359 	mov	a,@r0
      001876 C0 E0            [24] 5360 	push	acc
      001878 08               [12] 5361 	inc	r0
      001879 E6               [12] 5362 	mov	a,@r0
      00187A C0 E0            [24] 5363 	push	acc
      00187C E5 81            [12] 5364 	mov	a,sp
      00187E 24 1D            [12] 5365 	add	a,#0x1d
      001880 F8               [12] 5366 	mov	r0,a
      001881 86 82            [24] 5367 	mov	dpl,@r0
      001883 08               [12] 5368 	inc	r0
      001884 86 83            [24] 5369 	mov	dph,@r0
      001886 78r8D            [12] 5370 	mov	r0,#_relocate_section
      001888 79s02            [12] 5371 	mov	r1,#(_relocate_section >> 8)
      00188A 7As00            [12] 5372 	mov	r2,#(_relocate_section >> 16)
      00188C 12r00r00         [24] 5373 	lcall	__sdcc_banked_call
      00188F AC 82            [24] 5374 	mov	r4,dpl
      001891 AD 83            [24] 5375 	mov	r5,dph
      001893 E5 81            [12] 5376 	mov	a,sp
      001895 24 EE            [12] 5377 	add	a,#0xee
      001897 F5 81            [12] 5378 	mov	sp,a
      001899 8C 06            [24] 5379 	mov	ar6,r4
      00189B 8D 07            [24] 5380 	mov	ar7,r5
                                   5381 ;	../../../../core/loader/elfloader.c:560: if(ret != ELFLOADER_OK) {
      00189D EE               [12] 5382 	mov	a,r6
      00189E 4F               [12] 5383 	orl	a,r7
      00189F 60 07            [24] 5384 	jz	00190$
                                   5385 ;	../../../../core/loader/elfloader.c:562: return ret;
      0018A1 8E 82            [24] 5386 	mov	dpl,r6
      0018A3 8F 83            [24] 5387 	mov	dph,r7
      0018A5 02r1Ar3C         [24] 5388 	ljmp	00207$
      0018A8                       5389 00190$:
                                   5390 ;	../../../../core/loader/elfloader.c:567: elfloader_arch_write_rom(fd, textoff, textsize, text.address);
      0018A8 90r00r36         [24] 5391 	mov	dptr,#(_text + 0x0003)
      0018AB E0               [24] 5392 	movx	a,@dptr
      0018AC FD               [12] 5393 	mov	r5,a
      0018AD A3               [24] 5394 	inc	dptr
      0018AE E0               [24] 5395 	movx	a,@dptr
      0018AF FE               [12] 5396 	mov	r6,a
      0018B0 A3               [24] 5397 	inc	dptr
      0018B1 E0               [24] 5398 	movx	a,@dptr
      0018B2 FF               [12] 5399 	mov	r7,a
      0018B3 C0 05            [24] 5400 	push	ar5
      0018B5 C0 06            [24] 5401 	push	ar6
      0018B7 C0 07            [24] 5402 	push	ar7
      0018B9 E5 81            [12] 5403 	mov	a,sp
      0018BB 24 F2            [12] 5404 	add	a,#0xf2
      0018BD F8               [12] 5405 	mov	r0,a
      0018BE E6               [12] 5406 	mov	a,@r0
      0018BF C0 E0            [24] 5407 	push	acc
      0018C1 08               [12] 5408 	inc	r0
      0018C2 E6               [12] 5409 	mov	a,@r0
      0018C3 C0 E0            [24] 5410 	push	acc
      0018C5 E5 81            [12] 5411 	mov	a,sp
      0018C7 24 EE            [12] 5412 	add	a,#0xee
      0018C9 F8               [12] 5413 	mov	r0,a
      0018CA E6               [12] 5414 	mov	a,@r0
      0018CB C0 E0            [24] 5415 	push	acc
      0018CD 08               [12] 5416 	inc	r0
      0018CE E6               [12] 5417 	mov	a,@r0
      0018CF C0 E0            [24] 5418 	push	acc
      0018D1 E5 81            [12] 5419 	mov	a,sp
      0018D3 24 28            [12] 5420 	add	a,#0x28
      0018D5 F8               [12] 5421 	mov	r0,a
      0018D6 86 82            [24] 5422 	mov	dpl,@r0
      0018D8 08               [12] 5423 	inc	r0
      0018D9 86 83            [24] 5424 	mov	dph,@r0
      0018DB 78r00            [12] 5425 	mov	r0,#_elfloader_arch_write_rom
      0018DD 79s00            [12] 5426 	mov	r1,#(_elfloader_arch_write_rom >> 8)
      0018DF 7As00            [12] 5427 	mov	r2,#(_elfloader_arch_write_rom >> 16)
      0018E1 12r00r00         [24] 5428 	lcall	__sdcc_banked_call
      0018E4 E5 81            [12] 5429 	mov	a,sp
      0018E6 24 F9            [12] 5430 	add	a,#0xf9
      0018E8 F5 81            [12] 5431 	mov	sp,a
                                   5432 ;	../../../../core/loader/elfloader.c:568: elfloader_arch_write_rom(fd, rodataoff, rodatasize, rodata.address);
      0018EA 90r00r30         [24] 5433 	mov	dptr,#(_rodata + 0x0003)
      0018ED E0               [24] 5434 	movx	a,@dptr
      0018EE FD               [12] 5435 	mov	r5,a
      0018EF A3               [24] 5436 	inc	dptr
      0018F0 E0               [24] 5437 	movx	a,@dptr
      0018F1 FE               [12] 5438 	mov	r6,a
      0018F2 A3               [24] 5439 	inc	dptr
      0018F3 E0               [24] 5440 	movx	a,@dptr
      0018F4 FF               [12] 5441 	mov	r7,a
      0018F5 C0 05            [24] 5442 	push	ar5
      0018F7 C0 06            [24] 5443 	push	ar6
      0018F9 C0 07            [24] 5444 	push	ar7
      0018FB E5 81            [12] 5445 	mov	a,sp
      0018FD 24 3D            [12] 5446 	add	a,#0x3d
      0018FF F8               [12] 5447 	mov	r0,a
      001900 E6               [12] 5448 	mov	a,@r0
      001901 C0 E0            [24] 5449 	push	acc
      001903 08               [12] 5450 	inc	r0
      001904 E6               [12] 5451 	mov	a,@r0
      001905 C0 E0            [24] 5452 	push	acc
      001907 E5 81            [12] 5453 	mov	a,sp
      001909 24 F4            [12] 5454 	add	a,#0xf4
      00190B F8               [12] 5455 	mov	r0,a
      00190C E6               [12] 5456 	mov	a,@r0
      00190D C0 E0            [24] 5457 	push	acc
      00190F 08               [12] 5458 	inc	r0
      001910 E6               [12] 5459 	mov	a,@r0
      001911 C0 E0            [24] 5460 	push	acc
      001913 E5 81            [12] 5461 	mov	a,sp
      001915 24 28            [12] 5462 	add	a,#0x28
      001917 F8               [12] 5463 	mov	r0,a
      001918 86 82            [24] 5464 	mov	dpl,@r0
      00191A 08               [12] 5465 	inc	r0
      00191B 86 83            [24] 5466 	mov	dph,@r0
      00191D 78r00            [12] 5467 	mov	r0,#_elfloader_arch_write_rom
      00191F 79s00            [12] 5468 	mov	r1,#(_elfloader_arch_write_rom >> 8)
      001921 7As00            [12] 5469 	mov	r2,#(_elfloader_arch_write_rom >> 16)
      001923 12r00r00         [24] 5470 	lcall	__sdcc_banked_call
      001926 E5 81            [12] 5471 	mov	a,sp
      001928 24 F9            [12] 5472 	add	a,#0xf9
      00192A F5 81            [12] 5473 	mov	sp,a
                                   5474 ;	../../../../core/loader/elfloader.c:570: memset(bss.address, 0, bsssize);
      00192C 90r00r24         [24] 5475 	mov	dptr,#(_bss + 0x0003)
      00192F E0               [24] 5476 	movx	a,@dptr
      001930 FD               [12] 5477 	mov	r5,a
      001931 A3               [24] 5478 	inc	dptr
      001932 E0               [24] 5479 	movx	a,@dptr
      001933 FE               [12] 5480 	mov	r6,a
      001934 A3               [24] 5481 	inc	dptr
      001935 E0               [24] 5482 	movx	a,@dptr
      001936 FF               [12] 5483 	mov	r7,a
      001937 E5 81            [12] 5484 	mov	a,sp
      001939 24 35            [12] 5485 	add	a,#0x35
      00193B F8               [12] 5486 	mov	r0,a
      00193C E6               [12] 5487 	mov	a,@r0
      00193D C0 E0            [24] 5488 	push	acc
      00193F 08               [12] 5489 	inc	r0
      001940 E6               [12] 5490 	mov	a,@r0
      001941 C0 E0            [24] 5491 	push	acc
      001943 E4               [12] 5492 	clr	a
      001944 C0 E0            [24] 5493 	push	acc
      001946 8D 82            [24] 5494 	mov	dpl,r5
      001948 8E 83            [24] 5495 	mov	dph,r6
      00194A 8F F0            [24] 5496 	mov	b,r7
      00194C 78r00            [12] 5497 	mov	r0,#_memset
      00194E 79s00            [12] 5498 	mov	r1,#(_memset >> 8)
      001950 7As00            [12] 5499 	mov	r2,#(_memset >> 16)
      001952 12r00r00         [24] 5500 	lcall	__sdcc_banked_call
      001955 15 81            [12] 5501 	dec	sp
      001957 15 81            [12] 5502 	dec	sp
      001959 15 81            [12] 5503 	dec	sp
                                   5504 ;	../../../../core/loader/elfloader.c:571: seek_read(fd, dataoff, data.address, datasize);
      00195B 90r00r2A         [24] 5505 	mov	dptr,#(_data + 0x0003)
      00195E E0               [24] 5506 	movx	a,@dptr
      00195F FD               [12] 5507 	mov	r5,a
      001960 A3               [24] 5508 	inc	dptr
      001961 E0               [24] 5509 	movx	a,@dptr
      001962 FE               [12] 5510 	mov	r6,a
      001963 A3               [24] 5511 	inc	dptr
      001964 E0               [24] 5512 	movx	a,@dptr
      001965 FF               [12] 5513 	mov	r7,a
      001966 E5 81            [12] 5514 	mov	a,sp
      001968 24 44            [12] 5515 	add	a,#0x44
      00196A F8               [12] 5516 	mov	r0,a
      00196B E6               [12] 5517 	mov	a,@r0
      00196C C0 E0            [24] 5518 	push	acc
      00196E 08               [12] 5519 	inc	r0
      00196F E6               [12] 5520 	mov	a,@r0
      001970 C0 E0            [24] 5521 	push	acc
      001972 C0 05            [24] 5522 	push	ar5
      001974 C0 06            [24] 5523 	push	ar6
      001976 C0 07            [24] 5524 	push	ar7
      001978 E5 81            [12] 5525 	mov	a,sp
      00197A 24 F2            [12] 5526 	add	a,#0xf2
      00197C F8               [12] 5527 	mov	r0,a
      00197D E6               [12] 5528 	mov	a,@r0
      00197E C0 E0            [24] 5529 	push	acc
      001980 08               [12] 5530 	inc	r0
      001981 E6               [12] 5531 	mov	a,@r0
      001982 C0 E0            [24] 5532 	push	acc
      001984 E5 81            [12] 5533 	mov	a,sp
      001986 24 28            [12] 5534 	add	a,#0x28
      001988 F8               [12] 5535 	mov	r0,a
      001989 86 82            [24] 5536 	mov	dpl,@r0
      00198B 08               [12] 5537 	inc	r0
      00198C 86 83            [24] 5538 	mov	dph,@r0
      00198E 78r00            [12] 5539 	mov	r0,#_seek_read
      001990 79s00            [12] 5540 	mov	r1,#(_seek_read >> 8)
      001992 7As00            [12] 5541 	mov	r2,#(_seek_read >> 16)
      001994 12r00r00         [24] 5542 	lcall	__sdcc_banked_call
      001997 E5 81            [12] 5543 	mov	a,sp
      001999 24 F9            [12] 5544 	add	a,#0xf9
      00199B F5 81            [12] 5545 	mov	sp,a
                                   5546 ;	../../../../core/loader/elfloader.c:574: process = (struct process **) find_local_symbol(fd, "autostart_processes", symtaboff, symtabsize, strtaboff);
      00199D A8 81            [24] 5547 	mov	r0,sp
      00199F 18               [12] 5548 	dec	r0
      0019A0 E6               [12] 5549 	mov	a,@r0
      0019A1 C0 E0            [24] 5550 	push	acc
      0019A3 08               [12] 5551 	inc	r0
      0019A4 E6               [12] 5552 	mov	a,@r0
      0019A5 C0 E0            [24] 5553 	push	acc
      0019A7 E5 81            [12] 5554 	mov	a,sp
      0019A9 24 FB            [12] 5555 	add	a,#0xfb
      0019AB F8               [12] 5556 	mov	r0,a
      0019AC E6               [12] 5557 	mov	a,@r0
      0019AD C0 E0            [24] 5558 	push	acc
      0019AF 08               [12] 5559 	inc	r0
      0019B0 E6               [12] 5560 	mov	a,@r0
      0019B1 C0 E0            [24] 5561 	push	acc
      0019B3 E5 81            [12] 5562 	mov	a,sp
      0019B5 24 F7            [12] 5563 	add	a,#0xf7
      0019B7 F8               [12] 5564 	mov	r0,a
      0019B8 E6               [12] 5565 	mov	a,@r0
      0019B9 C0 E0            [24] 5566 	push	acc
      0019BB 08               [12] 5567 	inc	r0
      0019BC E6               [12] 5568 	mov	a,@r0
      0019BD C0 E0            [24] 5569 	push	acc
      0019BF 74r07            [12] 5570 	mov	a,#__str_0
      0019C1 C0 E0            [24] 5571 	push	acc
      0019C3 74s00            [12] 5572 	mov	a,#(__str_0 >> 8)
      0019C5 C0 E0            [24] 5573 	push	acc
      0019C7 74 80            [12] 5574 	mov	a,#0x80
      0019C9 C0 E0            [24] 5575 	push	acc
      0019CB E5 81            [12] 5576 	mov	a,sp
      0019CD 24 26            [12] 5577 	add	a,#0x26
      0019CF F8               [12] 5578 	mov	r0,a
      0019D0 86 82            [24] 5579 	mov	dpl,@r0
      0019D2 08               [12] 5580 	inc	r0
      0019D3 86 83            [24] 5581 	mov	dph,@r0
      0019D5 78r65            [12] 5582 	mov	r0,#_find_local_symbol
      0019D7 79s00            [12] 5583 	mov	r1,#(_find_local_symbol >> 8)
      0019D9 7As00            [12] 5584 	mov	r2,#(_find_local_symbol >> 16)
      0019DB 12r00r00         [24] 5585 	lcall	__sdcc_banked_call
      0019DE AD 82            [24] 5586 	mov	r5,dpl
      0019E0 AE 83            [24] 5587 	mov	r6,dph
      0019E2 AF F0            [24] 5588 	mov	r7,b
      0019E4 E5 81            [12] 5589 	mov	a,sp
      0019E6 24 F7            [12] 5590 	add	a,#0xf7
      0019E8 F5 81            [12] 5591 	mov	sp,a
                                   5592 ;	../../../../core/loader/elfloader.c:575: if(process != NULL) {
      0019EA ED               [12] 5593 	mov	a,r5
      0019EB 4E               [12] 5594 	orl	a,r6
      0019EC 60 10            [24] 5595 	jz	00195$
                                   5596 ;	../../../../core/loader/elfloader.c:577: elfloader_autostart_processes = process;
      0019EE 90r00r1E         [24] 5597 	mov	dptr,#_elfloader_autostart_processes
      0019F1 ED               [12] 5598 	mov	a,r5
      0019F2 F0               [24] 5599 	movx	@dptr,a
      0019F3 EE               [12] 5600 	mov	a,r6
      0019F4 A3               [24] 5601 	inc	dptr
      0019F5 F0               [24] 5602 	movx	@dptr,a
      0019F6 EF               [12] 5603 	mov	a,r7
      0019F7 A3               [24] 5604 	inc	dptr
      0019F8 F0               [24] 5605 	movx	@dptr,a
                                   5606 ;	../../../../core/loader/elfloader.c:578: return ELFLOADER_OK;
      0019F9 90 00 00         [24] 5607 	mov	dptr,#0x0000
                                   5608 ;	../../../../core/loader/elfloader.c:580: PRINTF("elfloader: no autostart\n");
      0019FC 80 3E            [24] 5609 	sjmp	00207$
      0019FE                       5610 00195$:
                                   5611 ;	../../../../core/loader/elfloader.c:581: process = (struct process **) find_program_processes(fd, symtaboff, symtabsize, strtaboff);
      0019FE A8 81            [24] 5612 	mov	r0,sp
      001A00 18               [12] 5613 	dec	r0
      001A01 E6               [12] 5614 	mov	a,@r0
      001A02 C0 E0            [24] 5615 	push	acc
      001A04 08               [12] 5616 	inc	r0
      001A05 E6               [12] 5617 	mov	a,@r0
      001A06 C0 E0            [24] 5618 	push	acc
      001A08 E5 81            [12] 5619 	mov	a,sp
      001A0A 24 FB            [12] 5620 	add	a,#0xfb
      001A0C F8               [12] 5621 	mov	r0,a
      001A0D E6               [12] 5622 	mov	a,@r0
      001A0E C0 E0            [24] 5623 	push	acc
      001A10 08               [12] 5624 	inc	r0
      001A11 E6               [12] 5625 	mov	a,@r0
      001A12 C0 E0            [24] 5626 	push	acc
      001A14 E5 81            [12] 5627 	mov	a,sp
      001A16 24 F7            [12] 5628 	add	a,#0xf7
      001A18 F8               [12] 5629 	mov	r0,a
      001A19 E6               [12] 5630 	mov	a,@r0
      001A1A C0 E0            [24] 5631 	push	acc
      001A1C 08               [12] 5632 	inc	r0
      001A1D E6               [12] 5633 	mov	a,@r0
      001A1E C0 E0            [24] 5634 	push	acc
      001A20 E5 81            [12] 5635 	mov	a,sp
      001A22 24 29            [12] 5636 	add	a,#0x29
      001A24 F8               [12] 5637 	mov	r0,a
      001A25 86 82            [24] 5638 	mov	dpl,@r0
      001A27 08               [12] 5639 	inc	r0
      001A28 86 83            [24] 5640 	mov	dph,@r0
      001A2A 78r25            [12] 5641 	mov	r0,#_find_program_processes
      001A2C 79s08            [12] 5642 	mov	r1,#(_find_program_processes >> 8)
      001A2E 7As00            [12] 5643 	mov	r2,#(_find_program_processes >> 16)
      001A30 12r00r00         [24] 5644 	lcall	__sdcc_banked_call
      001A33 E5 81            [12] 5645 	mov	a,sp
      001A35 24 FA            [12] 5646 	add	a,#0xfa
      001A37 F5 81            [12] 5647 	mov	sp,a
                                   5648 ;	../../../../core/loader/elfloader.c:585: return ELFLOADER_NO_STARTPOINT;
      001A39 90 00 07         [24] 5649 	mov	dptr,#0x0007
      001A3C                       5650 00207$:
      001A3C E5 81            [12] 5651 	mov	a,sp
      001A3E 24 2E            [12] 5652 	add	a,#0x2E
      001A40 F5 81            [12] 5653 	mov	sp,a
      001A42 02r00r00         [24] 5654 	ljmp	__sdcc_banked_ret
                                   5655 	.area CSEG    (CODE)
                                   5656 	.area CONST   (CODE)
      000000                       5657 _elf_magic_header:
      000000 7F                    5658 	.db #0x7F	; 127
      000001 45                    5659 	.db #0x45	; 69	'E'
      000002 4C                    5660 	.db #0x4C	; 76	'L'
      000003 46                    5661 	.db #0x46	; 70	'F'
      000004 01                    5662 	.db #0x01	; 1
      000005 01                    5663 	.db #0x01	; 1
      000006 01                    5664 	.db #0x01	; 1
      000007                       5665 __str_0:
      000007 61 75 74 6F 73 74 61  5666 	.ascii "autostart_processes"
             72 74 5F 70 72 6F 63
             65 73 73 65 73
      00001A 00                    5667 	.db 0x00
      00001B                       5668 __str_1:
      00001B 2E 74 65 78 74        5669 	.ascii ".text"
      000020 00                    5670 	.db 0x00
      000021                       5671 __str_2:
      000021 2E 72 65 6C 2E 74 65  5672 	.ascii ".rel.text"
             78 74
      00002A 00                    5673 	.db 0x00
      00002B                       5674 __str_3:
      00002B 2E 72 65 6C 61 2E 74  5675 	.ascii ".rela.text"
             65 78 74
      000035 00                    5676 	.db 0x00
      000036                       5677 __str_4:
      000036 2E 64 61 74 61        5678 	.ascii ".data"
      00003B 00                    5679 	.db 0x00
      00003C                       5680 __str_5:
      00003C 2E 72 6F 64 61 74 61  5681 	.ascii ".rodata"
      000043 00                    5682 	.db 0x00
      000044                       5683 __str_6:
      000044 2E 72 65 6C 2E 72 6F  5684 	.ascii ".rel.rodata"
             64 61 74 61
      00004F 00                    5685 	.db 0x00
      000050                       5686 __str_7:
      000050 2E 72 65 6C 61 2E 72  5687 	.ascii ".rela.rodata"
             6F 64 61 74 61
      00005C 00                    5688 	.db 0x00
      00005D                       5689 __str_8:
      00005D 2E 72 65 6C 2E 64 61  5690 	.ascii ".rel.data"
             74 61
      000066 00                    5691 	.db 0x00
      000067                       5692 __str_9:
      000067 2E 72 65 6C 61 2E 64  5693 	.ascii ".rela.data"
             61 74 61
      000071 00                    5694 	.db 0x00
      000072                       5695 __str_10:
      000072 2E 62 73 73           5696 	.ascii ".bss"
      000076 00                    5697 	.db 0x00
                                   5698 	.area XINIT   (CODE)
                                   5699 	.area CABS    (ABS,CODE)
