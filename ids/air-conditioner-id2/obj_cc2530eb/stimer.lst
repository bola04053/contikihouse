                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8804 (Aug  6 2013) (Linux)
                                      4 ; This file was generated Mon Aug 25 04:16:30 2014
                                      5 ;--------------------------------------------------------
                                      6 	.module stimer
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _clock_seconds
                                     13 	.globl _stimer_set
                                     14 	.globl _stimer_reset
                                     15 	.globl _stimer_restart
                                     16 	.globl _stimer_expired
                                     17 	.globl _stimer_remaining
                                     18 	.globl _stimer_elapsed
                                     19 ;--------------------------------------------------------
                                     20 ; special function registers
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; special function bits
                                     26 ;--------------------------------------------------------
                                     27 	.area RSEG    (ABS,DATA)
      000000                         28 	.org 0x0000
                                     29 ;--------------------------------------------------------
                                     30 ; overlayable register banks
                                     31 ;--------------------------------------------------------
                                     32 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         33 	.ds 8
                                     34 ;--------------------------------------------------------
                                     35 ; internal ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area DSEG    (DATA)
                                     38 ;--------------------------------------------------------
                                     39 ; overlayable items in internal ram 
                                     40 ;--------------------------------------------------------
                                     41 ;--------------------------------------------------------
                                     42 ; indirectly addressable internal ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area ISEG    (DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; absolute internal ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area IABS    (ABS,DATA)
                                     49 	.area IABS    (ABS,DATA)
                                     50 ;--------------------------------------------------------
                                     51 ; bit data
                                     52 ;--------------------------------------------------------
                                     53 	.area BSEG    (BIT)
                                     54 ;--------------------------------------------------------
                                     55 ; paged external ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area PSEG    (PAG,XDATA)
                                     58 ;--------------------------------------------------------
                                     59 ; external ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area XSEG    (XDATA)
                                     62 ;--------------------------------------------------------
                                     63 ; absolute external ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area XABS    (ABS,XDATA)
                                     66 ;--------------------------------------------------------
                                     67 ; external initialized ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area XISEG   (XDATA)
                                     70 	.area HOME    (CODE)
                                     71 	.area GSINIT0 (CODE)
                                     72 	.area GSINIT1 (CODE)
                                     73 	.area GSINIT2 (CODE)
                                     74 	.area GSINIT3 (CODE)
                                     75 	.area GSINIT4 (CODE)
                                     76 	.area GSINIT5 (CODE)
                                     77 	.area GSINIT  (CODE)
                                     78 	.area GSFINAL (CODE)
                                     79 	.area CSEG    (CODE)
                                     80 ;--------------------------------------------------------
                                     81 ; global & static initialisations
                                     82 ;--------------------------------------------------------
                                     83 	.area HOME    (CODE)
                                     84 	.area GSINIT  (CODE)
                                     85 	.area GSFINAL (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 ;--------------------------------------------------------
                                     88 ; Home
                                     89 ;--------------------------------------------------------
                                     90 	.area HOME    (CODE)
                                     91 	.area HOME    (CODE)
                                     92 ;--------------------------------------------------------
                                     93 ; code
                                     94 ;--------------------------------------------------------
                                     95 	.area BANK1   (CODE)
                                     96 ;------------------------------------------------------------
                                     97 ;Allocation info for local variables in function 'stimer_set'
                                     98 ;------------------------------------------------------------
                                     99 ;interval                  Allocated to stack - sp -9
                                    100 ;t                         Allocated to stack - sp -2
                                    101 ;------------------------------------------------------------
                                    102 ;	../../../../core/sys/stimer.c:67: stimer_set(struct stimer *t, unsigned long interval)
                                    103 ;	-----------------------------------------
                                    104 ;	 function stimer_set
                                    105 ;	-----------------------------------------
      000000                        106 _stimer_set:
                           000007   107 	ar7 = 0x07
                           000006   108 	ar6 = 0x06
                           000005   109 	ar5 = 0x05
                           000004   110 	ar4 = 0x04
                           000003   111 	ar3 = 0x03
                           000002   112 	ar2 = 0x02
                           000001   113 	ar1 = 0x01
                           000000   114 	ar0 = 0x00
      000000 C0 82            [24]  115 	push	dpl
      000002 C0 83            [24]  116 	push	dph
      000004 C0 F0            [24]  117 	push	b
                                    118 ;	../../../../core/sys/stimer.c:69: t->interval = interval;
      000006 A8 81            [24]  119 	mov	r0,sp
      000008 18               [12]  120 	dec	r0
      000009 18               [12]  121 	dec	r0
      00000A 74 04            [12]  122 	mov	a,#0x04
      00000C 26               [12]  123 	add	a,@r0
      00000D FA               [12]  124 	mov	r2,a
      00000E E4               [12]  125 	clr	a
      00000F 08               [12]  126 	inc	r0
      000010 36               [12]  127 	addc	a,@r0
      000011 FB               [12]  128 	mov	r3,a
      000012 08               [12]  129 	inc	r0
      000013 86 04            [24]  130 	mov	ar4,@r0
      000015 8A 82            [24]  131 	mov	dpl,r2
      000017 8B 83            [24]  132 	mov	dph,r3
      000019 8C F0            [24]  133 	mov	b,r4
      00001B E5 81            [12]  134 	mov	a,sp
      00001D 24 F7            [12]  135 	add	a,#0xf7
      00001F F8               [12]  136 	mov	r0,a
      000020 E6               [12]  137 	mov	a,@r0
      000021 12r00r00         [24]  138 	lcall	__gptrput
      000024 A3               [24]  139 	inc	dptr
      000025 08               [12]  140 	inc	r0
      000026 E6               [12]  141 	mov	a,@r0
      000027 12r00r00         [24]  142 	lcall	__gptrput
      00002A A3               [24]  143 	inc	dptr
      00002B 08               [12]  144 	inc	r0
      00002C E6               [12]  145 	mov	a,@r0
      00002D 12r00r00         [24]  146 	lcall	__gptrput
      000030 A3               [24]  147 	inc	dptr
      000031 08               [12]  148 	inc	r0
      000032 E6               [12]  149 	mov	a,@r0
      000033 12r00r00         [24]  150 	lcall	__gptrput
                                    151 ;	../../../../core/sys/stimer.c:70: t->start = clock_seconds();
      000036 78r00            [12]  152 	mov	r0,#_clock_seconds
      000038 79s00            [12]  153 	mov	r1,#(_clock_seconds >> 8)
      00003A 7As00            [12]  154 	mov	r2,#(_clock_seconds >> 16)
      00003C 12r00r00         [24]  155 	lcall	__sdcc_banked_call
      00003F AA 82            [24]  156 	mov	r2,dpl
      000041 AB 83            [24]  157 	mov	r3,dph
      000043 AC F0            [24]  158 	mov	r4,b
      000045 FF               [12]  159 	mov	r7,a
      000046 A8 81            [24]  160 	mov	r0,sp
      000048 18               [12]  161 	dec	r0
      000049 18               [12]  162 	dec	r0
      00004A 86 82            [24]  163 	mov	dpl,@r0
      00004C 08               [12]  164 	inc	r0
      00004D 86 83            [24]  165 	mov	dph,@r0
      00004F 08               [12]  166 	inc	r0
      000050 86 F0            [24]  167 	mov	b,@r0
      000052 EA               [12]  168 	mov	a,r2
      000053 12r00r00         [24]  169 	lcall	__gptrput
      000056 A3               [24]  170 	inc	dptr
      000057 EB               [12]  171 	mov	a,r3
      000058 12r00r00         [24]  172 	lcall	__gptrput
      00005B A3               [24]  173 	inc	dptr
      00005C EC               [12]  174 	mov	a,r4
      00005D 12r00r00         [24]  175 	lcall	__gptrput
      000060 A3               [24]  176 	inc	dptr
      000061 EF               [12]  177 	mov	a,r7
      000062 12r00r00         [24]  178 	lcall	__gptrput
      000065 15 81            [12]  179 	dec	sp
      000067 15 81            [12]  180 	dec	sp
      000069 15 81            [12]  181 	dec	sp
      00006B 02r00r00         [24]  182 	ljmp	__sdcc_banked_ret
                                    183 ;------------------------------------------------------------
                                    184 ;Allocation info for local variables in function 'stimer_reset'
                                    185 ;------------------------------------------------------------
                                    186 ;t                         Allocated to stack - sp -6
                                    187 ;sloc0                     Allocated to stack - sp -3
                                    188 ;sloc1                     Allocated to stack - sp +1
                                    189 ;------------------------------------------------------------
                                    190 ;	../../../../core/sys/stimer.c:87: stimer_reset(struct stimer *t)
                                    191 ;	-----------------------------------------
                                    192 ;	 function stimer_reset
                                    193 ;	-----------------------------------------
      00006E                        194 _stimer_reset:
      00006E C0 82            [24]  195 	push	dpl
      000070 C0 83            [24]  196 	push	dph
      000072 C0 F0            [24]  197 	push	b
      000074 E5 81            [12]  198 	mov	a,sp
      000076 24 04            [12]  199 	add	a,#0x04
                                    200 ;	../../../../core/sys/stimer.c:89: t->start += t->interval;
      000078 F5 81            [12]  201 	mov	sp,a
      00007A 24 FA            [12]  202 	add	a,#0xfa
      00007C F8               [12]  203 	mov	r0,a
      00007D 86 82            [24]  204 	mov	dpl,@r0
      00007F 08               [12]  205 	inc	r0
      000080 86 83            [24]  206 	mov	dph,@r0
      000082 08               [12]  207 	inc	r0
      000083 86 F0            [24]  208 	mov	b,@r0
      000085 E5 81            [12]  209 	mov	a,sp
      000087 24 FD            [12]  210 	add	a,#0xfd
      000089 F9               [12]  211 	mov	r1,a
      00008A 12r00r00         [24]  212 	lcall	__gptrget
      00008D F7               [12]  213 	mov	@r1,a
      00008E A3               [24]  214 	inc	dptr
      00008F 12r00r00         [24]  215 	lcall	__gptrget
      000092 09               [12]  216 	inc	r1
      000093 F7               [12]  217 	mov	@r1,a
      000094 A3               [24]  218 	inc	dptr
      000095 12r00r00         [24]  219 	lcall	__gptrget
      000098 09               [12]  220 	inc	r1
      000099 F7               [12]  221 	mov	@r1,a
      00009A A3               [24]  222 	inc	dptr
      00009B 12r00r00         [24]  223 	lcall	__gptrget
      00009E 09               [12]  224 	inc	r1
      00009F F7               [12]  225 	mov	@r1,a
      0000A0 E5 81            [12]  226 	mov	a,sp
      0000A2 24 FA            [12]  227 	add	a,#0xfa
      0000A4 F8               [12]  228 	mov	r0,a
      0000A5 74 04            [12]  229 	mov	a,#0x04
      0000A7 26               [12]  230 	add	a,@r0
      0000A8 FF               [12]  231 	mov	r7,a
      0000A9 E4               [12]  232 	clr	a
      0000AA 08               [12]  233 	inc	r0
      0000AB 36               [12]  234 	addc	a,@r0
      0000AC FE               [12]  235 	mov	r6,a
      0000AD 08               [12]  236 	inc	r0
      0000AE 86 05            [24]  237 	mov	ar5,@r0
      0000B0 8F 82            [24]  238 	mov	dpl,r7
      0000B2 8E 83            [24]  239 	mov	dph,r6
      0000B4 8D F0            [24]  240 	mov	b,r5
      0000B6 12r00r00         [24]  241 	lcall	__gptrget
      0000B9 FA               [12]  242 	mov	r2,a
      0000BA A3               [24]  243 	inc	dptr
      0000BB 12r00r00         [24]  244 	lcall	__gptrget
      0000BE FB               [12]  245 	mov	r3,a
      0000BF A3               [24]  246 	inc	dptr
      0000C0 12r00r00         [24]  247 	lcall	__gptrget
      0000C3 FC               [12]  248 	mov	r4,a
      0000C4 A3               [24]  249 	inc	dptr
      0000C5 12r00r00         [24]  250 	lcall	__gptrget
      0000C8 FD               [12]  251 	mov	r5,a
      0000C9 E5 81            [12]  252 	mov	a,sp
      0000CB 24 FD            [12]  253 	add	a,#0xfd
      0000CD F8               [12]  254 	mov	r0,a
      0000CE EA               [12]  255 	mov	a,r2
      0000CF 26               [12]  256 	add	a,@r0
      0000D0 FA               [12]  257 	mov	r2,a
      0000D1 EB               [12]  258 	mov	a,r3
      0000D2 08               [12]  259 	inc	r0
      0000D3 36               [12]  260 	addc	a,@r0
      0000D4 FB               [12]  261 	mov	r3,a
      0000D5 EC               [12]  262 	mov	a,r4
      0000D6 08               [12]  263 	inc	r0
      0000D7 36               [12]  264 	addc	a,@r0
      0000D8 FC               [12]  265 	mov	r4,a
      0000D9 ED               [12]  266 	mov	a,r5
      0000DA 08               [12]  267 	inc	r0
      0000DB 36               [12]  268 	addc	a,@r0
      0000DC FD               [12]  269 	mov	r5,a
      0000DD E5 81            [12]  270 	mov	a,sp
      0000DF 24 FA            [12]  271 	add	a,#0xfa
      0000E1 F8               [12]  272 	mov	r0,a
      0000E2 86 82            [24]  273 	mov	dpl,@r0
      0000E4 08               [12]  274 	inc	r0
      0000E5 86 83            [24]  275 	mov	dph,@r0
      0000E7 08               [12]  276 	inc	r0
      0000E8 86 F0            [24]  277 	mov	b,@r0
      0000EA EA               [12]  278 	mov	a,r2
      0000EB 12r00r00         [24]  279 	lcall	__gptrput
      0000EE A3               [24]  280 	inc	dptr
      0000EF EB               [12]  281 	mov	a,r3
      0000F0 12r00r00         [24]  282 	lcall	__gptrput
      0000F3 A3               [24]  283 	inc	dptr
      0000F4 EC               [12]  284 	mov	a,r4
      0000F5 12r00r00         [24]  285 	lcall	__gptrput
      0000F8 A3               [24]  286 	inc	dptr
      0000F9 ED               [12]  287 	mov	a,r5
      0000FA 12r00r00         [24]  288 	lcall	__gptrput
      0000FD E5 81            [12]  289 	mov	a,sp
      0000FF 24 F9            [12]  290 	add	a,#0xF9
      000101 F5 81            [12]  291 	mov	sp,a
      000103 02r00r00         [24]  292 	ljmp	__sdcc_banked_ret
                                    293 ;------------------------------------------------------------
                                    294 ;Allocation info for local variables in function 'stimer_restart'
                                    295 ;------------------------------------------------------------
                                    296 ;t                         Allocated to registers r5 r6 r7 
                                    297 ;------------------------------------------------------------
                                    298 ;	../../../../core/sys/stimer.c:107: stimer_restart(struct stimer *t)
                                    299 ;	-----------------------------------------
                                    300 ;	 function stimer_restart
                                    301 ;	-----------------------------------------
      000106                        302 _stimer_restart:
      000106 AD 82            [24]  303 	mov	r5,dpl
      000108 AE 83            [24]  304 	mov	r6,dph
      00010A AF F0            [24]  305 	mov	r7,b
                                    306 ;	../../../../core/sys/stimer.c:109: t->start = clock_seconds();
      00010C C0 07            [24]  307 	push	ar7
      00010E C0 06            [24]  308 	push	ar6
      000110 C0 05            [24]  309 	push	ar5
      000112 78r00            [12]  310 	mov	r0,#_clock_seconds
      000114 79s00            [12]  311 	mov	r1,#(_clock_seconds >> 8)
      000116 7As00            [12]  312 	mov	r2,#(_clock_seconds >> 16)
      000118 12r00r00         [24]  313 	lcall	__sdcc_banked_call
      00011B A9 82            [24]  314 	mov	r1,dpl
      00011D AA 83            [24]  315 	mov	r2,dph
      00011F AB F0            [24]  316 	mov	r3,b
      000121 FC               [12]  317 	mov	r4,a
      000122 D0 05            [24]  318 	pop	ar5
      000124 D0 06            [24]  319 	pop	ar6
      000126 D0 07            [24]  320 	pop	ar7
      000128 8D 82            [24]  321 	mov	dpl,r5
      00012A 8E 83            [24]  322 	mov	dph,r6
      00012C 8F F0            [24]  323 	mov	b,r7
      00012E E9               [12]  324 	mov	a,r1
      00012F 12r00r00         [24]  325 	lcall	__gptrput
      000132 A3               [24]  326 	inc	dptr
      000133 EA               [12]  327 	mov	a,r2
      000134 12r00r00         [24]  328 	lcall	__gptrput
      000137 A3               [24]  329 	inc	dptr
      000138 EB               [12]  330 	mov	a,r3
      000139 12r00r00         [24]  331 	lcall	__gptrput
      00013C A3               [24]  332 	inc	dptr
      00013D EC               [12]  333 	mov	a,r4
      00013E 12r00r00         [24]  334 	lcall	__gptrput
      000141 02r00r00         [24]  335 	ljmp	__sdcc_banked_ret
                                    336 ;------------------------------------------------------------
                                    337 ;Allocation info for local variables in function 'stimer_expired'
                                    338 ;------------------------------------------------------------
                                    339 ;t                         Allocated to registers r7 r6 r5 
                                    340 ;sloc0                     Allocated to stack - sp -11
                                    341 ;sloc1                     Allocated to stack - sp -7
                                    342 ;sloc2                     Allocated to stack - sp -3
                                    343 ;------------------------------------------------------------
                                    344 ;	../../../../core/sys/stimer.c:124: stimer_expired(struct stimer *t)
                                    345 ;	-----------------------------------------
                                    346 ;	 function stimer_expired
                                    347 ;	-----------------------------------------
      000144                        348 _stimer_expired:
      000144 E5 81            [12]  349 	mov	a,sp
      000146 24 0C            [12]  350 	add	a,#0x0C
      000148 F5 81            [12]  351 	mov	sp,a
      00014A AF 82            [24]  352 	mov	r7,dpl
      00014C AE 83            [24]  353 	mov	r6,dph
      00014E AD F0            [24]  354 	mov	r5,b
                                    355 ;	../../../../core/sys/stimer.c:126: return SCLOCK_GEQ(clock_seconds(), t->start + t->interval);
      000150 C0 07            [24]  356 	push	ar7
      000152 C0 06            [24]  357 	push	ar6
      000154 C0 05            [24]  358 	push	ar5
      000156 78r00            [12]  359 	mov	r0,#_clock_seconds
      000158 79s00            [12]  360 	mov	r1,#(_clock_seconds >> 8)
      00015A 7As00            [12]  361 	mov	r2,#(_clock_seconds >> 16)
      00015C 12r00r00         [24]  362 	lcall	__sdcc_banked_call
      00015F C8               [12]  363 	xch	a,r0
      000160 E5 81            [12]  364 	mov	a,sp
      000162 24 F2            [12]  365 	add	a,#0xf2
      000164 C8               [12]  366 	xch	a,r0
      000165 A6 82            [24]  367 	mov	@r0,dpl
      000167 08               [12]  368 	inc	r0
      000168 A6 83            [24]  369 	mov	@r0,dph
      00016A 08               [12]  370 	inc	r0
      00016B A6 F0            [24]  371 	mov	@r0,b
      00016D 08               [12]  372 	inc	r0
      00016E F6               [12]  373 	mov	@r0,a
      00016F D0 05            [24]  374 	pop	ar5
      000171 D0 06            [24]  375 	pop	ar6
      000173 D0 07            [24]  376 	pop	ar7
      000175 8F 82            [24]  377 	mov	dpl,r7
      000177 8E 83            [24]  378 	mov	dph,r6
      000179 8D F0            [24]  379 	mov	b,r5
      00017B E5 81            [12]  380 	mov	a,sp
      00017D 24 F9            [12]  381 	add	a,#0xf9
      00017F F8               [12]  382 	mov	r0,a
      000180 12r00r00         [24]  383 	lcall	__gptrget
      000183 F6               [12]  384 	mov	@r0,a
      000184 A3               [24]  385 	inc	dptr
      000185 12r00r00         [24]  386 	lcall	__gptrget
      000188 08               [12]  387 	inc	r0
      000189 F6               [12]  388 	mov	@r0,a
      00018A A3               [24]  389 	inc	dptr
      00018B 12r00r00         [24]  390 	lcall	__gptrget
      00018E 08               [12]  391 	inc	r0
      00018F F6               [12]  392 	mov	@r0,a
      000190 A3               [24]  393 	inc	dptr
      000191 12r00r00         [24]  394 	lcall	__gptrget
      000194 08               [12]  395 	inc	r0
      000195 F6               [12]  396 	mov	@r0,a
      000196 74 04            [12]  397 	mov	a,#0x04
      000198 2F               [12]  398 	add	a,r7
      000199 FA               [12]  399 	mov	r2,a
      00019A E4               [12]  400 	clr	a
      00019B 3E               [12]  401 	addc	a,r6
      00019C FB               [12]  402 	mov	r3,a
      00019D 8D 04            [24]  403 	mov	ar4,r5
      00019F 8A 82            [24]  404 	mov	dpl,r2
      0001A1 8B 83            [24]  405 	mov	dph,r3
      0001A3 8C F0            [24]  406 	mov	b,r4
      0001A5 12r00r00         [24]  407 	lcall	__gptrget
      0001A8 FF               [12]  408 	mov	r7,a
      0001A9 A3               [24]  409 	inc	dptr
      0001AA 12r00r00         [24]  410 	lcall	__gptrget
      0001AD FE               [12]  411 	mov	r6,a
      0001AE A3               [24]  412 	inc	dptr
      0001AF 12r00r00         [24]  413 	lcall	__gptrget
      0001B2 FD               [12]  414 	mov	r5,a
      0001B3 A3               [24]  415 	inc	dptr
      0001B4 12r00r00         [24]  416 	lcall	__gptrget
      0001B7 FC               [12]  417 	mov	r4,a
      0001B8 E5 81            [12]  418 	mov	a,sp
      0001BA 24 F9            [12]  419 	add	a,#0xf9
      0001BC F8               [12]  420 	mov	r0,a
      0001BD EF               [12]  421 	mov	a,r7
      0001BE 26               [12]  422 	add	a,@r0
      0001BF FF               [12]  423 	mov	r7,a
      0001C0 EE               [12]  424 	mov	a,r6
      0001C1 08               [12]  425 	inc	r0
      0001C2 36               [12]  426 	addc	a,@r0
      0001C3 FE               [12]  427 	mov	r6,a
      0001C4 ED               [12]  428 	mov	a,r5
      0001C5 08               [12]  429 	inc	r0
      0001C6 36               [12]  430 	addc	a,@r0
      0001C7 FD               [12]  431 	mov	r5,a
      0001C8 EC               [12]  432 	mov	a,r4
      0001C9 08               [12]  433 	inc	r0
      0001CA 36               [12]  434 	addc	a,@r0
      0001CB FC               [12]  435 	mov	r4,a
      0001CC E5 81            [12]  436 	mov	a,sp
      0001CE 24 F5            [12]  437 	add	a,#0xf5
      0001D0 F8               [12]  438 	mov	r0,a
      0001D1 E5 81            [12]  439 	mov	a,sp
      0001D3 24 FD            [12]  440 	add	a,#0xfd
      0001D5 F9               [12]  441 	mov	r1,a
      0001D6 E6               [12]  442 	mov	a,@r0
      0001D7 C3               [12]  443 	clr	c
      0001D8 9F               [12]  444 	subb	a,r7
      0001D9 F7               [12]  445 	mov	@r1,a
      0001DA 08               [12]  446 	inc	r0
      0001DB E6               [12]  447 	mov	a,@r0
      0001DC 9E               [12]  448 	subb	a,r6
      0001DD 09               [12]  449 	inc	r1
      0001DE F7               [12]  450 	mov	@r1,a
      0001DF 08               [12]  451 	inc	r0
      0001E0 E6               [12]  452 	mov	a,@r0
      0001E1 9D               [12]  453 	subb	a,r5
      0001E2 09               [12]  454 	inc	r1
      0001E3 F7               [12]  455 	mov	@r1,a
      0001E4 08               [12]  456 	inc	r0
      0001E5 E6               [12]  457 	mov	a,@r0
      0001E6 9C               [12]  458 	subb	a,r4
      0001E7 09               [12]  459 	inc	r1
      0001E8 F7               [12]  460 	mov	@r1,a
      0001E9 E5 81            [12]  461 	mov	a,sp
      0001EB 24 FD            [12]  462 	add	a,#0xfd
      0001ED F8               [12]  463 	mov	r0,a
      0001EE C3               [12]  464 	clr	c
      0001EF E6               [12]  465 	mov	a,@r0
      0001F0 94 FF            [12]  466 	subb	a,#0xFF
      0001F2 08               [12]  467 	inc	r0
      0001F3 E6               [12]  468 	mov	a,@r0
      0001F4 94 FF            [12]  469 	subb	a,#0xFF
      0001F6 08               [12]  470 	inc	r0
      0001F7 E6               [12]  471 	mov	a,@r0
      0001F8 94 FF            [12]  472 	subb	a,#0xFF
      0001FA 08               [12]  473 	inc	r0
      0001FB E6               [12]  474 	mov	a,@r0
      0001FC 94 7F            [12]  475 	subb	a,#0x7F
      0001FE E4               [12]  476 	clr	a
      0001FF 33               [12]  477 	rlc	a
      000200 FC               [12]  478 	mov	r4,a
      000201 33               [12]  479 	rlc	a
      000202 95 E0            [12]  480 	subb	a,acc
      000204 FB               [12]  481 	mov	r3,a
      000205 8C 82            [24]  482 	mov	dpl,r4
      000207 8B 83            [24]  483 	mov	dph,r3
      000209 E5 81            [12]  484 	mov	a,sp
      00020B 24 F4            [12]  485 	add	a,#0xF4
      00020D F5 81            [12]  486 	mov	sp,a
      00020F 02r00r00         [24]  487 	ljmp	__sdcc_banked_ret
                                    488 ;------------------------------------------------------------
                                    489 ;Allocation info for local variables in function 'stimer_remaining'
                                    490 ;------------------------------------------------------------
                                    491 ;t                         Allocated to registers r5 r6 r7 
                                    492 ;------------------------------------------------------------
                                    493 ;	../../../../core/sys/stimer.c:140: stimer_remaining(struct stimer *t)
                                    494 ;	-----------------------------------------
                                    495 ;	 function stimer_remaining
                                    496 ;	-----------------------------------------
      000212                        497 _stimer_remaining:
                                    498 ;	../../../../core/sys/stimer.c:142: return t->start + t->interval - clock_seconds();
      000212 AD 82            [24]  499 	mov	r5,dpl
      000214 AE 83            [24]  500 	mov	r6,dph
      000216 AF F0            [24]  501 	mov	r7,b
      000218 12r00r00         [24]  502 	lcall	__gptrget
      00021B F9               [12]  503 	mov	r1,a
      00021C A3               [24]  504 	inc	dptr
      00021D 12r00r00         [24]  505 	lcall	__gptrget
      000220 FA               [12]  506 	mov	r2,a
      000221 A3               [24]  507 	inc	dptr
      000222 12r00r00         [24]  508 	lcall	__gptrget
      000225 FB               [12]  509 	mov	r3,a
      000226 A3               [24]  510 	inc	dptr
      000227 12r00r00         [24]  511 	lcall	__gptrget
      00022A FC               [12]  512 	mov	r4,a
      00022B 74 04            [12]  513 	mov	a,#0x04
      00022D 2D               [12]  514 	add	a,r5
      00022E FD               [12]  515 	mov	r5,a
      00022F E4               [12]  516 	clr	a
      000230 3E               [12]  517 	addc	a,r6
      000231 FE               [12]  518 	mov	r6,a
      000232 8D 82            [24]  519 	mov	dpl,r5
      000234 8E 83            [24]  520 	mov	dph,r6
      000236 8F F0            [24]  521 	mov	b,r7
      000238 12r00r00         [24]  522 	lcall	__gptrget
      00023B F8               [12]  523 	mov	r0,a
      00023C A3               [24]  524 	inc	dptr
      00023D 12r00r00         [24]  525 	lcall	__gptrget
      000240 FD               [12]  526 	mov	r5,a
      000241 A3               [24]  527 	inc	dptr
      000242 12r00r00         [24]  528 	lcall	__gptrget
      000245 FE               [12]  529 	mov	r6,a
      000246 A3               [24]  530 	inc	dptr
      000247 12r00r00         [24]  531 	lcall	__gptrget
      00024A FF               [12]  532 	mov	r7,a
      00024B E8               [12]  533 	mov	a,r0
      00024C 29               [12]  534 	add	a,r1
      00024D F9               [12]  535 	mov	r1,a
      00024E ED               [12]  536 	mov	a,r5
      00024F 3A               [12]  537 	addc	a,r2
      000250 FA               [12]  538 	mov	r2,a
      000251 EE               [12]  539 	mov	a,r6
      000252 3B               [12]  540 	addc	a,r3
      000253 FB               [12]  541 	mov	r3,a
      000254 EF               [12]  542 	mov	a,r7
      000255 3C               [12]  543 	addc	a,r4
      000256 FC               [12]  544 	mov	r4,a
      000257 C0 04            [24]  545 	push	ar4
      000259 C0 03            [24]  546 	push	ar3
      00025B C0 02            [24]  547 	push	ar2
      00025D C0 01            [24]  548 	push	ar1
      00025F 78r00            [12]  549 	mov	r0,#_clock_seconds
      000261 79s00            [12]  550 	mov	r1,#(_clock_seconds >> 8)
      000263 7As00            [12]  551 	mov	r2,#(_clock_seconds >> 16)
      000265 12r00r00         [24]  552 	lcall	__sdcc_banked_call
      000268 A8 82            [24]  553 	mov	r0,dpl
      00026A AD 83            [24]  554 	mov	r5,dph
      00026C AE F0            [24]  555 	mov	r6,b
      00026E FF               [12]  556 	mov	r7,a
      00026F D0 01            [24]  557 	pop	ar1
      000271 D0 02            [24]  558 	pop	ar2
      000273 D0 03            [24]  559 	pop	ar3
      000275 D0 04            [24]  560 	pop	ar4
      000277 E9               [12]  561 	mov	a,r1
      000278 C3               [12]  562 	clr	c
      000279 98               [12]  563 	subb	a,r0
      00027A F9               [12]  564 	mov	r1,a
      00027B EA               [12]  565 	mov	a,r2
      00027C 9D               [12]  566 	subb	a,r5
      00027D FA               [12]  567 	mov	r2,a
      00027E EB               [12]  568 	mov	a,r3
      00027F 9E               [12]  569 	subb	a,r6
      000280 FB               [12]  570 	mov	r3,a
      000281 EC               [12]  571 	mov	a,r4
      000282 9F               [12]  572 	subb	a,r7
      000283 FC               [12]  573 	mov	r4,a
      000284 89 82            [24]  574 	mov	dpl,r1
      000286 8A 83            [24]  575 	mov	dph,r2
      000288 8B F0            [24]  576 	mov	b,r3
      00028A 02r00r00         [24]  577 	ljmp	__sdcc_banked_ret
                                    578 ;------------------------------------------------------------
                                    579 ;Allocation info for local variables in function 'stimer_elapsed'
                                    580 ;------------------------------------------------------------
                                    581 ;t                         Allocated to registers r5 r6 r7 
                                    582 ;------------------------------------------------------------
                                    583 ;	../../../../core/sys/stimer.c:156: stimer_elapsed(struct stimer *t)
                                    584 ;	-----------------------------------------
                                    585 ;	 function stimer_elapsed
                                    586 ;	-----------------------------------------
      00028D                        587 _stimer_elapsed:
      00028D AD 82            [24]  588 	mov	r5,dpl
      00028F AE 83            [24]  589 	mov	r6,dph
      000291 AF F0            [24]  590 	mov	r7,b
                                    591 ;	../../../../core/sys/stimer.c:158: return clock_seconds() - t->start;
      000293 C0 07            [24]  592 	push	ar7
      000295 C0 06            [24]  593 	push	ar6
      000297 C0 05            [24]  594 	push	ar5
      000299 78r00            [12]  595 	mov	r0,#_clock_seconds
      00029B 79s00            [12]  596 	mov	r1,#(_clock_seconds >> 8)
      00029D 7As00            [12]  597 	mov	r2,#(_clock_seconds >> 16)
      00029F 12r00r00         [24]  598 	lcall	__sdcc_banked_call
      0002A2 A9 82            [24]  599 	mov	r1,dpl
      0002A4 AA 83            [24]  600 	mov	r2,dph
      0002A6 AB F0            [24]  601 	mov	r3,b
      0002A8 FC               [12]  602 	mov	r4,a
      0002A9 D0 05            [24]  603 	pop	ar5
      0002AB D0 06            [24]  604 	pop	ar6
      0002AD D0 07            [24]  605 	pop	ar7
      0002AF 8D 82            [24]  606 	mov	dpl,r5
      0002B1 8E 83            [24]  607 	mov	dph,r6
      0002B3 8F F0            [24]  608 	mov	b,r7
      0002B5 12r00r00         [24]  609 	lcall	__gptrget
      0002B8 F8               [12]  610 	mov	r0,a
      0002B9 A3               [24]  611 	inc	dptr
      0002BA 12r00r00         [24]  612 	lcall	__gptrget
      0002BD FD               [12]  613 	mov	r5,a
      0002BE A3               [24]  614 	inc	dptr
      0002BF 12r00r00         [24]  615 	lcall	__gptrget
      0002C2 FE               [12]  616 	mov	r6,a
      0002C3 A3               [24]  617 	inc	dptr
      0002C4 12r00r00         [24]  618 	lcall	__gptrget
      0002C7 FF               [12]  619 	mov	r7,a
      0002C8 E9               [12]  620 	mov	a,r1
      0002C9 C3               [12]  621 	clr	c
      0002CA 98               [12]  622 	subb	a,r0
      0002CB F9               [12]  623 	mov	r1,a
      0002CC EA               [12]  624 	mov	a,r2
      0002CD 9D               [12]  625 	subb	a,r5
      0002CE FA               [12]  626 	mov	r2,a
      0002CF EB               [12]  627 	mov	a,r3
      0002D0 9E               [12]  628 	subb	a,r6
      0002D1 FB               [12]  629 	mov	r3,a
      0002D2 EC               [12]  630 	mov	a,r4
      0002D3 9F               [12]  631 	subb	a,r7
      0002D4 FC               [12]  632 	mov	r4,a
      0002D5 89 82            [24]  633 	mov	dpl,r1
      0002D7 8A 83            [24]  634 	mov	dph,r2
      0002D9 8B F0            [24]  635 	mov	b,r3
      0002DB 02r00r00         [24]  636 	ljmp	__sdcc_banked_ret
                                    637 	.area CSEG    (CODE)
                                    638 	.area CONST   (CODE)
                                    639 	.area XINIT   (CODE)
                                    640 	.area CABS    (ABS,CODE)
