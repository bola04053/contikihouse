                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8804 (Aug  6 2013) (Linux)
                                      4 ; This file was generated Mon Aug 25 04:16:52 2014
                                      5 ;--------------------------------------------------------
                                      6 	.module slip
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _slip_arch_writeb
                                     13 	.globl _tcpip_input
                                     14 	.globl _process_poll
                                     15 	.globl _memset
                                     16 	.globl _memcmp
                                     17 	.globl _memcpy
                                     18 	.globl _ACTIVE
                                     19 	.globl _TX_BYTE
                                     20 	.globl _RX_BYTE
                                     21 	.globl _ERR
                                     22 	.globl _FE
                                     23 	.globl _SLAVE
                                     24 	.globl _RE
                                     25 	.globl _MODE
                                     26 	.globl _T3OVFIF
                                     27 	.globl _T3CH0IF
                                     28 	.globl _T3CH1IF
                                     29 	.globl _T4OVFIF
                                     30 	.globl _T4CH0IF
                                     31 	.globl _T4CH1IF
                                     32 	.globl _OVFIM
                                     33 	.globl _B_0
                                     34 	.globl _B_1
                                     35 	.globl _B_2
                                     36 	.globl _B_3
                                     37 	.globl _B_4
                                     38 	.globl _B_5
                                     39 	.globl _B_6
                                     40 	.globl _B_7
                                     41 	.globl _P2IF
                                     42 	.globl _UTX0IF
                                     43 	.globl _UTX1IF
                                     44 	.globl _P1IF
                                     45 	.globl _WDTIF
                                     46 	.globl _ACC_0
                                     47 	.globl _ACC_1
                                     48 	.globl _ACC_2
                                     49 	.globl _ACC_3
                                     50 	.globl _ACC_4
                                     51 	.globl _ACC_5
                                     52 	.globl _ACC_6
                                     53 	.globl _ACC_7
                                     54 	.globl _P
                                     55 	.globl _F1
                                     56 	.globl _OV
                                     57 	.globl _RS0
                                     58 	.globl _RS1
                                     59 	.globl _F0
                                     60 	.globl _AC
                                     61 	.globl _CY
                                     62 	.globl _DMAIF
                                     63 	.globl _T1IF
                                     64 	.globl _T2IF
                                     65 	.globl _T3IF
                                     66 	.globl _T4IF
                                     67 	.globl _P0IF
                                     68 	.globl _STIF
                                     69 	.globl _DMAIE
                                     70 	.globl _T1IE
                                     71 	.globl _T2IE
                                     72 	.globl _T3IE
                                     73 	.globl _T4IE
                                     74 	.globl _P0IE
                                     75 	.globl _RFERRIE
                                     76 	.globl _ADCIE
                                     77 	.globl _URX0IE
                                     78 	.globl _URX1IE
                                     79 	.globl _ENCIE
                                     80 	.globl _STIE
                                     81 	.globl _EA
                                     82 	.globl _P2_0
                                     83 	.globl _P2_1
                                     84 	.globl _P2_2
                                     85 	.globl _P2_3
                                     86 	.globl _P2_4
                                     87 	.globl _P2_5
                                     88 	.globl _P2_6
                                     89 	.globl _P2_7
                                     90 	.globl _ENCIF_0
                                     91 	.globl _ENCIF_1
                                     92 	.globl _P1_0
                                     93 	.globl _P1_1
                                     94 	.globl _P1_2
                                     95 	.globl _P1_3
                                     96 	.globl _P1_4
                                     97 	.globl _P1_5
                                     98 	.globl _P1_6
                                     99 	.globl _P1_7
                                    100 	.globl _IT0
                                    101 	.globl _RFERRIF
                                    102 	.globl _IT1
                                    103 	.globl _URX0IF
                                    104 	.globl _ADCIF
                                    105 	.globl _URX1IF
                                    106 	.globl _P0_0
                                    107 	.globl _P0_1
                                    108 	.globl _P0_2
                                    109 	.globl _P0_3
                                    110 	.globl _P0_4
                                    111 	.globl _P0_5
                                    112 	.globl _P0_6
                                    113 	.globl _P0_7
                                    114 	.globl _WDCTL
                                    115 	.globl _U1GCR
                                    116 	.globl _U1UCR
                                    117 	.globl _U1BAUD
                                    118 	.globl _U1DBUF
                                    119 	.globl _U1CSR
                                    120 	.globl _U0GCR
                                    121 	.globl _U0UCR
                                    122 	.globl _U0BAUD
                                    123 	.globl _U0DBUF
                                    124 	.globl _U0CSR
                                    125 	.globl _TIMIF
                                    126 	.globl _T4CC1
                                    127 	.globl _T4CCTL1
                                    128 	.globl _T4CC0
                                    129 	.globl _T4CCTL0
                                    130 	.globl _T4CTL
                                    131 	.globl _T4CNT
                                    132 	.globl _T3CC1
                                    133 	.globl _T3CCTL1
                                    134 	.globl _T3CC0
                                    135 	.globl _T3CCTL0
                                    136 	.globl _T3CTL
                                    137 	.globl _T3CNT
                                    138 	.globl _T2MSEL
                                    139 	.globl _T2IRQM
                                    140 	.globl _T2MOVF2
                                    141 	.globl _T2MOVF1
                                    142 	.globl _T2MOVF0
                                    143 	.globl _T2M1
                                    144 	.globl _T2M0
                                    145 	.globl _T2IRQF
                                    146 	.globl _T2EVTCFG
                                    147 	.globl _T2CTRL
                                    148 	.globl _T1STAT
                                    149 	.globl _T1CCTL2
                                    150 	.globl _T1CCTL1
                                    151 	.globl _T1CCTL0
                                    152 	.globl _T1CTL
                                    153 	.globl _T1CNTH
                                    154 	.globl _T1CNTL
                                    155 	.globl _T1CC2H
                                    156 	.globl _T1CC2L
                                    157 	.globl _T1CC1H
                                    158 	.globl _T1CC1L
                                    159 	.globl _T1CC0H
                                    160 	.globl _T1CC0L
                                    161 	.globl _CLKCONSTA
                                    162 	.globl _CLKCONCMD
                                    163 	.globl _SLEEPSTA
                                    164 	.globl _SLEEPCMD
                                    165 	.globl _STLOAD
                                    166 	.globl _ST2
                                    167 	.globl _ST1
                                    168 	.globl _ST0
                                    169 	.globl _RFERRF
                                    170 	.globl _RFIRQF0
                                    171 	.globl _RFST
                                    172 	.globl _RFD
                                    173 	.globl _RFIRQF1
                                    174 	.globl _PSBANK
                                    175 	.globl _FMAP
                                    176 	.globl _MEMCTR
                                    177 	.globl __XPAGE
                                    178 	.globl _MPAGE
                                    179 	.globl _PMUX
                                    180 	.globl _P2DIR
                                    181 	.globl _P1DIR
                                    182 	.globl _P0DIR
                                    183 	.globl _P2INP
                                    184 	.globl _P1INP
                                    185 	.globl _P2SEL
                                    186 	.globl _P1SEL
                                    187 	.globl _P0SEL
                                    188 	.globl _APCFG
                                    189 	.globl _PERCFG
                                    190 	.globl _P0INP
                                    191 	.globl _P2IEN
                                    192 	.globl _P1IEN
                                    193 	.globl _P0IEN
                                    194 	.globl _PICTL
                                    195 	.globl _P2IFG
                                    196 	.globl _P1IFG
                                    197 	.globl _P0IFG
                                    198 	.globl _DMAREQ
                                    199 	.globl _DMAARM
                                    200 	.globl _DMA0CFGH
                                    201 	.globl _DMA0CFGL
                                    202 	.globl _DMA1CFGH
                                    203 	.globl _DMA1CFGL
                                    204 	.globl _DMAIRQ
                                    205 	.globl _ENCCS
                                    206 	.globl _ENCDO
                                    207 	.globl _ENCDI
                                    208 	.globl _RNDH
                                    209 	.globl _RNDL
                                    210 	.globl _ADCH
                                    211 	.globl _ADCL
                                    212 	.globl _ADCCON3
                                    213 	.globl _ADCCON2
                                    214 	.globl _ADCCON1
                                    215 	.globl _B
                                    216 	.globl _IRCON2
                                    217 	.globl _ACC
                                    218 	.globl _PSW
                                    219 	.globl _IRCON
                                    220 	.globl _IP1
                                    221 	.globl _IEN1
                                    222 	.globl _IP0
                                    223 	.globl _IEN0
                                    224 	.globl _P2
                                    225 	.globl _S1CON
                                    226 	.globl _IEN2
                                    227 	.globl _S0CON
                                    228 	.globl _DPS
                                    229 	.globl _P1
                                    230 	.globl _TCON
                                    231 	.globl _PCON
                                    232 	.globl _DPH1
                                    233 	.globl _DPL1
                                    234 	.globl _DPH0
                                    235 	.globl _DPL0
                                    236 	.globl _SP
                                    237 	.globl _P0
                                    238 	.globl _slip_process
                                    239 	.globl _slip_active
                                    240 	.globl _X_IEEE_ADDR
                                    241 	.globl _X_INFOPAGE
                                    242 	.globl _X_P2DIR
                                    243 	.globl _X_P1DIR
                                    244 	.globl _X_P0DIR
                                    245 	.globl _X_U1GCR
                                    246 	.globl _X_U1UCR
                                    247 	.globl _X_U1BAUD
                                    248 	.globl _X_U1DBUF
                                    249 	.globl _X_U1CSR
                                    250 	.globl _X_P2INP
                                    251 	.globl _X_P1INP
                                    252 	.globl _X_P2SEL
                                    253 	.globl _X_P1SEL
                                    254 	.globl _X_P0SEL
                                    255 	.globl _X_APCFG
                                    256 	.globl _X_PERCFG
                                    257 	.globl _X_T4CC1
                                    258 	.globl _X_T4CCTL1
                                    259 	.globl _X_T4CC0
                                    260 	.globl _X_T4CCTL0
                                    261 	.globl _X_T4CTL
                                    262 	.globl _X_T4CNT
                                    263 	.globl _X_RFIRQF0
                                    264 	.globl _X_T1CCTL2
                                    265 	.globl _X_T1CCTL1
                                    266 	.globl _X_T1CCTL0
                                    267 	.globl _X_T1CTL
                                    268 	.globl _X_T1CNTH
                                    269 	.globl _X_T1CNTL
                                    270 	.globl _X_RFST
                                    271 	.globl _X_T1CC2H
                                    272 	.globl _X_T1CC2L
                                    273 	.globl _X_T1CC1H
                                    274 	.globl _X_T1CC1L
                                    275 	.globl _X_T1CC0H
                                    276 	.globl _X_T1CC0L
                                    277 	.globl _X_RFD
                                    278 	.globl _X_TIMIF
                                    279 	.globl _X_DMAREQ
                                    280 	.globl _X_DMAARM
                                    281 	.globl _X_DMA0CFGH
                                    282 	.globl _X_DMA0CFGL
                                    283 	.globl _X_DMA1CFGH
                                    284 	.globl _X_DMA1CFGL
                                    285 	.globl _X_DMAIRQ
                                    286 	.globl _X_T3CC1
                                    287 	.globl _X_T3CCTL1
                                    288 	.globl _X_T3CC0
                                    289 	.globl _X_T3CCTL0
                                    290 	.globl _X_T3CTL
                                    291 	.globl _X_T3CNT
                                    292 	.globl _X_WDCTL
                                    293 	.globl _X_MEMCTR
                                    294 	.globl _X_CLKCONCMD
                                    295 	.globl _X_U0GCR
                                    296 	.globl _X_U0UCR
                                    297 	.globl _X_T2MSEL
                                    298 	.globl _X_U0BAUD
                                    299 	.globl _X_U0DBUF
                                    300 	.globl _X_RFERRF
                                    301 	.globl _X_SLEEPCMD
                                    302 	.globl _X_RNDH
                                    303 	.globl _X_RNDL
                                    304 	.globl _X_ADCH
                                    305 	.globl _X_ADCL
                                    306 	.globl _X_ADCCON3
                                    307 	.globl _X_ADCCON2
                                    308 	.globl _X_ADCCON1
                                    309 	.globl _X_ENCCS
                                    310 	.globl _X_ENCDO
                                    311 	.globl _X_ENCDI
                                    312 	.globl _X_T1STAT
                                    313 	.globl _X_PMUX
                                    314 	.globl _X_STLOAD
                                    315 	.globl _X_P2IEN
                                    316 	.globl _X_P0IEN
                                    317 	.globl _X_T2IRQM
                                    318 	.globl _X_T2MOVF2
                                    319 	.globl _X_T2MOVF1
                                    320 	.globl _X_T2MOVF0
                                    321 	.globl _X_T2M1
                                    322 	.globl _X_T2M0
                                    323 	.globl _X_T2IRQF
                                    324 	.globl _X_P2
                                    325 	.globl _X_PSBANK
                                    326 	.globl _X_FMAP
                                    327 	.globl _X_CLKCONSTA
                                    328 	.globl _X_SLEEPSTA
                                    329 	.globl _X_T2EVTCFG
                                    330 	.globl _X_ST2
                                    331 	.globl _X_ST1
                                    332 	.globl _X_ST0
                                    333 	.globl _X_T2CTRL
                                    334 	.globl _X__XPAGE
                                    335 	.globl _X_MPAGE
                                    336 	.globl _X_RFIRQF1
                                    337 	.globl _X_P1
                                    338 	.globl _X_P0INP
                                    339 	.globl _X_P1IEN
                                    340 	.globl _X_PICTL
                                    341 	.globl _X_P2IFG
                                    342 	.globl _X_P1IFG
                                    343 	.globl _X_P0IFG
                                    344 	.globl _X_U0CSR
                                    345 	.globl _X_P0
                                    346 	.globl _USBF5
                                    347 	.globl _USBF4
                                    348 	.globl _USBF3
                                    349 	.globl _USBF2
                                    350 	.globl _USBF1
                                    351 	.globl _USBF0
                                    352 	.globl _USBCNTH
                                    353 	.globl _USBCNTL
                                    354 	.globl _USBCNT0
                                    355 	.globl _USBCSOH
                                    356 	.globl _USBCSOL
                                    357 	.globl _USBMAXO
                                    358 	.globl _USBCSIH
                                    359 	.globl _USBCSIL
                                    360 	.globl _USBCS0
                                    361 	.globl _USBMAXI
                                    362 	.globl _USBCTRL
                                    363 	.globl _USBINDEX
                                    364 	.globl _USBFRMH
                                    365 	.globl _USBFRML
                                    366 	.globl _USBCIE
                                    367 	.globl _USBOIE
                                    368 	.globl _USBIIE
                                    369 	.globl _USBCIF
                                    370 	.globl _USBOIF
                                    371 	.globl _USBIIF
                                    372 	.globl _USBPOW
                                    373 	.globl _USBADDR
                                    374 	.globl _CSPT
                                    375 	.globl _CSPZ
                                    376 	.globl _CSPY
                                    377 	.globl _CSPX
                                    378 	.globl _CSPSTAT
                                    379 	.globl _CSPCTRL
                                    380 	.globl _CSPPROG23
                                    381 	.globl _CSPPROG22
                                    382 	.globl _CSPPROG21
                                    383 	.globl _CSPPROG20
                                    384 	.globl _CSPPROG19
                                    385 	.globl _CSPPROG18
                                    386 	.globl _CSPPROG17
                                    387 	.globl _CSPPROG16
                                    388 	.globl _CSPPROG15
                                    389 	.globl _CSPPROG14
                                    390 	.globl _CSPPROG13
                                    391 	.globl _CSPPROG12
                                    392 	.globl _CSPPROG11
                                    393 	.globl _CSPPROG10
                                    394 	.globl _CSPPROG9
                                    395 	.globl _CSPPROG8
                                    396 	.globl _CSPPROG7
                                    397 	.globl _CSPPROG6
                                    398 	.globl _CSPPROG5
                                    399 	.globl _CSPPROG4
                                    400 	.globl _CSPPROG3
                                    401 	.globl _CSPPROG2
                                    402 	.globl _CSPPROG1
                                    403 	.globl _CSPPROG0
                                    404 	.globl _RFC_OBS_CTRL2
                                    405 	.globl _RFC_OBS_CTRL1
                                    406 	.globl _RFC_OBS_CTRL0
                                    407 	.globl _TXFILTCFG
                                    408 	.globl _PTEST1
                                    409 	.globl _PTEST0
                                    410 	.globl _ATEST
                                    411 	.globl _DACTEST2
                                    412 	.globl _DACTEST1
                                    413 	.globl _DACTEST0
                                    414 	.globl _MDMTEST1
                                    415 	.globl _MDMTEST0
                                    416 	.globl _ADCTEST2
                                    417 	.globl _ADCTEST1
                                    418 	.globl _ADCTEST0
                                    419 	.globl _AGCCTRL3
                                    420 	.globl _AGCCTRL2
                                    421 	.globl _AGCCTRL1
                                    422 	.globl _AGCCTRL0
                                    423 	.globl _FSCAL3
                                    424 	.globl _FSCAL2
                                    425 	.globl _FSCAL1
                                    426 	.globl _FSCAL0
                                    427 	.globl _FSCTRL
                                    428 	.globl _RXCTRL
                                    429 	.globl _FREQEST
                                    430 	.globl _MDMCTRL1
                                    431 	.globl _MDMCTRL0
                                    432 	.globl _RFRND
                                    433 	.globl _RFERRM
                                    434 	.globl _RFIRQM1
                                    435 	.globl _RFIRQM0
                                    436 	.globl _TXLAST_PTR
                                    437 	.globl _TXFIRST_PTR
                                    438 	.globl _RXP1_PTR
                                    439 	.globl _RXLAST_PTR
                                    440 	.globl _RXFIRST_PTR
                                    441 	.globl _TXFIFOCNT
                                    442 	.globl _RXFIFOCNT
                                    443 	.globl _RXFIRST
                                    444 	.globl _RSSISTAT
                                    445 	.globl _RSSI
                                    446 	.globl _CCACTRL1
                                    447 	.globl _CCACTRL0
                                    448 	.globl _FSMCTRL
                                    449 	.globl _FIFOPCTRL
                                    450 	.globl _FSMSTAT1
                                    451 	.globl _FSMSTAT0
                                    452 	.globl _TXCTRL
                                    453 	.globl _TXPOWER
                                    454 	.globl _FREQCTRL
                                    455 	.globl _FREQTUNE
                                    456 	.globl _RXMASKCLR
                                    457 	.globl _RXMASKSET
                                    458 	.globl _RXENABLE
                                    459 	.globl _FRMCTRL1
                                    460 	.globl _FRMCTRL0
                                    461 	.globl _SRCEXTEN2
                                    462 	.globl _SRCEXTEN1
                                    463 	.globl _SRCEXTEN0
                                    464 	.globl _SRCSHORTEN2
                                    465 	.globl _SRCSHORTEN1
                                    466 	.globl _SRCSHORTEN0
                                    467 	.globl _SRCMATCH
                                    468 	.globl _FRMFILT1
                                    469 	.globl _FRMFILT0
                                    470 	.globl _SHORT_ADDR1
                                    471 	.globl _SHORT_ADDR0
                                    472 	.globl _PAN_ID1
                                    473 	.globl _PAN_ID0
                                    474 	.globl _EXT_ADDR7
                                    475 	.globl _EXT_ADDR6
                                    476 	.globl _EXT_ADDR5
                                    477 	.globl _EXT_ADDR4
                                    478 	.globl _EXT_ADDR3
                                    479 	.globl _EXT_ADDR2
                                    480 	.globl _EXT_ADDR1
                                    481 	.globl _EXT_ADDR0
                                    482 	.globl _SRCSHORTPENDEN2
                                    483 	.globl _SRCSHORTPENDEN1
                                    484 	.globl _SRCSHORTPENDEN0
                                    485 	.globl _SRCEXTPENDEN2
                                    486 	.globl _SRCEXTPENDEN1
                                    487 	.globl _SRCEXTPENDEN0
                                    488 	.globl _SRCRESINDEX
                                    489 	.globl _SRCRESMASK2
                                    490 	.globl _SRCRESMASK1
                                    491 	.globl _SRCRESMASK0
                                    492 	.globl _SRC_ADDR_TABLE
                                    493 	.globl _TXFIFO
                                    494 	.globl _RXFIFO
                                    495 	.globl _RFCORE_RAM
                                    496 	.globl _CMPCTL
                                    497 	.globl _OPAMPS
                                    498 	.globl _OPAMPC
                                    499 	.globl _STCV2
                                    500 	.globl _STCV1
                                    501 	.globl _STCV0
                                    502 	.globl _STCS
                                    503 	.globl _STCC
                                    504 	.globl _T1CC4H
                                    505 	.globl _T1CC4L
                                    506 	.globl _T1CC3H
                                    507 	.globl _T1CC3L
                                    508 	.globl _XX_T1CC2H
                                    509 	.globl _XX_T1CC2L
                                    510 	.globl _XX_T1CC1H
                                    511 	.globl _XX_T1CC1L
                                    512 	.globl _XX_T1CC0H
                                    513 	.globl _XX_T1CC0L
                                    514 	.globl _T1CCTL4
                                    515 	.globl _T1CCTL3
                                    516 	.globl _XX_T1CCTL2
                                    517 	.globl _XX_T1CCTL1
                                    518 	.globl _XX_T1CCTL0
                                    519 	.globl _CLD
                                    520 	.globl _IRCTL
                                    521 	.globl _CHIPINFO1
                                    522 	.globl _CHIPINFO0
                                    523 	.globl _FWDATA
                                    524 	.globl _FADDRH
                                    525 	.globl _FADDRL
                                    526 	.globl _FCTL
                                    527 	.globl _IVCTRL
                                    528 	.globl _BATTMON
                                    529 	.globl _SRCRC
                                    530 	.globl _DBGDATA
                                    531 	.globl _TESTREG0
                                    532 	.globl _CHIPID
                                    533 	.globl _CHVER
                                    534 	.globl _OBSSEL5
                                    535 	.globl _OBSSEL4
                                    536 	.globl _OBSSEL3
                                    537 	.globl _OBSSEL2
                                    538 	.globl _OBSSEL1
                                    539 	.globl _OBSSEL0
                                    540 	.globl _I2CIO
                                    541 	.globl _I2CWC
                                    542 	.globl _I2CADDR
                                    543 	.globl _I2CDATA
                                    544 	.globl _I2CSTAT
                                    545 	.globl _I2CCFG
                                    546 	.globl _OPAMPMC
                                    547 	.globl _MONMUX
                                    548 	.globl _slip_set_input_callback
                                    549 	.globl _slip_send
                                    550 	.globl _slip_write
                                    551 	.globl _slip_input_byte
                                    552 ;--------------------------------------------------------
                                    553 ; special function registers
                                    554 ;--------------------------------------------------------
                                    555 	.area RSEG    (ABS,DATA)
      000000                        556 	.org 0x0000
                           000080   557 _P0	=	0x0080
                           000081   558 _SP	=	0x0081
                           000082   559 _DPL0	=	0x0082
                           000083   560 _DPH0	=	0x0083
                           000084   561 _DPL1	=	0x0084
                           000085   562 _DPH1	=	0x0085
                           000087   563 _PCON	=	0x0087
                           000088   564 _TCON	=	0x0088
                           000090   565 _P1	=	0x0090
                           000092   566 _DPS	=	0x0092
                           000098   567 _S0CON	=	0x0098
                           00009A   568 _IEN2	=	0x009a
                           00009B   569 _S1CON	=	0x009b
                           0000A0   570 _P2	=	0x00a0
                           0000A8   571 _IEN0	=	0x00a8
                           0000A9   572 _IP0	=	0x00a9
                           0000B8   573 _IEN1	=	0x00b8
                           0000B9   574 _IP1	=	0x00b9
                           0000C0   575 _IRCON	=	0x00c0
                           0000D0   576 _PSW	=	0x00d0
                           0000E0   577 _ACC	=	0x00e0
                           0000E8   578 _IRCON2	=	0x00e8
                           0000F0   579 _B	=	0x00f0
                           0000B4   580 _ADCCON1	=	0x00b4
                           0000B5   581 _ADCCON2	=	0x00b5
                           0000B6   582 _ADCCON3	=	0x00b6
                           0000BA   583 _ADCL	=	0x00ba
                           0000BB   584 _ADCH	=	0x00bb
                           0000BC   585 _RNDL	=	0x00bc
                           0000BD   586 _RNDH	=	0x00bd
                           0000B1   587 _ENCDI	=	0x00b1
                           0000B2   588 _ENCDO	=	0x00b2
                           0000B3   589 _ENCCS	=	0x00b3
                           0000D1   590 _DMAIRQ	=	0x00d1
                           0000D2   591 _DMA1CFGL	=	0x00d2
                           0000D3   592 _DMA1CFGH	=	0x00d3
                           0000D4   593 _DMA0CFGL	=	0x00d4
                           0000D5   594 _DMA0CFGH	=	0x00d5
                           0000D6   595 _DMAARM	=	0x00d6
                           0000D7   596 _DMAREQ	=	0x00d7
                           000089   597 _P0IFG	=	0x0089
                           00008A   598 _P1IFG	=	0x008a
                           00008B   599 _P2IFG	=	0x008b
                           00008C   600 _PICTL	=	0x008c
                           0000AB   601 _P0IEN	=	0x00ab
                           00008D   602 _P1IEN	=	0x008d
                           0000AC   603 _P2IEN	=	0x00ac
                           00008F   604 _P0INP	=	0x008f
                           0000F1   605 _PERCFG	=	0x00f1
                           0000F2   606 _APCFG	=	0x00f2
                           0000F3   607 _P0SEL	=	0x00f3
                           0000F4   608 _P1SEL	=	0x00f4
                           0000F5   609 _P2SEL	=	0x00f5
                           0000F6   610 _P1INP	=	0x00f6
                           0000F7   611 _P2INP	=	0x00f7
                           0000FD   612 _P0DIR	=	0x00fd
                           0000FE   613 _P1DIR	=	0x00fe
                           0000FF   614 _P2DIR	=	0x00ff
                           0000AE   615 _PMUX	=	0x00ae
                           000093   616 _MPAGE	=	0x0093
                           000093   617 __XPAGE	=	0x0093
                           0000C7   618 _MEMCTR	=	0x00c7
                           00009F   619 _FMAP	=	0x009f
                           00009F   620 _PSBANK	=	0x009f
                           000091   621 _RFIRQF1	=	0x0091
                           0000D9   622 _RFD	=	0x00d9
                           0000E1   623 _RFST	=	0x00e1
                           0000E9   624 _RFIRQF0	=	0x00e9
                           0000BF   625 _RFERRF	=	0x00bf
                           000095   626 _ST0	=	0x0095
                           000096   627 _ST1	=	0x0096
                           000097   628 _ST2	=	0x0097
                           0000AD   629 _STLOAD	=	0x00ad
                           0000BE   630 _SLEEPCMD	=	0x00be
                           00009D   631 _SLEEPSTA	=	0x009d
                           0000C6   632 _CLKCONCMD	=	0x00c6
                           00009E   633 _CLKCONSTA	=	0x009e
                           0000DA   634 _T1CC0L	=	0x00da
                           0000DB   635 _T1CC0H	=	0x00db
                           0000DC   636 _T1CC1L	=	0x00dc
                           0000DD   637 _T1CC1H	=	0x00dd
                           0000DE   638 _T1CC2L	=	0x00de
                           0000DF   639 _T1CC2H	=	0x00df
                           0000E2   640 _T1CNTL	=	0x00e2
                           0000E3   641 _T1CNTH	=	0x00e3
                           0000E4   642 _T1CTL	=	0x00e4
                           0000E5   643 _T1CCTL0	=	0x00e5
                           0000E6   644 _T1CCTL1	=	0x00e6
                           0000E7   645 _T1CCTL2	=	0x00e7
                           0000AF   646 _T1STAT	=	0x00af
                           000094   647 _T2CTRL	=	0x0094
                           00009C   648 _T2EVTCFG	=	0x009c
                           0000A1   649 _T2IRQF	=	0x00a1
                           0000A2   650 _T2M0	=	0x00a2
                           0000A3   651 _T2M1	=	0x00a3
                           0000A4   652 _T2MOVF0	=	0x00a4
                           0000A5   653 _T2MOVF1	=	0x00a5
                           0000A6   654 _T2MOVF2	=	0x00a6
                           0000A7   655 _T2IRQM	=	0x00a7
                           0000C3   656 _T2MSEL	=	0x00c3
                           0000CA   657 _T3CNT	=	0x00ca
                           0000CB   658 _T3CTL	=	0x00cb
                           0000CC   659 _T3CCTL0	=	0x00cc
                           0000CD   660 _T3CC0	=	0x00cd
                           0000CE   661 _T3CCTL1	=	0x00ce
                           0000CF   662 _T3CC1	=	0x00cf
                           0000EA   663 _T4CNT	=	0x00ea
                           0000EB   664 _T4CTL	=	0x00eb
                           0000EC   665 _T4CCTL0	=	0x00ec
                           0000ED   666 _T4CC0	=	0x00ed
                           0000EE   667 _T4CCTL1	=	0x00ee
                           0000EF   668 _T4CC1	=	0x00ef
                           0000D8   669 _TIMIF	=	0x00d8
                           000086   670 _U0CSR	=	0x0086
                           0000C1   671 _U0DBUF	=	0x00c1
                           0000C2   672 _U0BAUD	=	0x00c2
                           0000C4   673 _U0UCR	=	0x00c4
                           0000C5   674 _U0GCR	=	0x00c5
                           0000F8   675 _U1CSR	=	0x00f8
                           0000F9   676 _U1DBUF	=	0x00f9
                           0000FA   677 _U1BAUD	=	0x00fa
                           0000FB   678 _U1UCR	=	0x00fb
                           0000FC   679 _U1GCR	=	0x00fc
                           0000C9   680 _WDCTL	=	0x00c9
                                    681 ;--------------------------------------------------------
                                    682 ; special function bits
                                    683 ;--------------------------------------------------------
                                    684 	.area RSEG    (ABS,DATA)
      000000                        685 	.org 0x0000
                           000087   686 _P0_7	=	0x0087
                           000086   687 _P0_6	=	0x0086
                           000085   688 _P0_5	=	0x0085
                           000084   689 _P0_4	=	0x0084
                           000083   690 _P0_3	=	0x0083
                           000082   691 _P0_2	=	0x0082
                           000081   692 _P0_1	=	0x0081
                           000080   693 _P0_0	=	0x0080
                           00008F   694 _URX1IF	=	0x008f
                           00008D   695 _ADCIF	=	0x008d
                           00008B   696 _URX0IF	=	0x008b
                           00008A   697 _IT1	=	0x008a
                           000089   698 _RFERRIF	=	0x0089
                           000088   699 _IT0	=	0x0088
                           000097   700 _P1_7	=	0x0097
                           000096   701 _P1_6	=	0x0096
                           000095   702 _P1_5	=	0x0095
                           000094   703 _P1_4	=	0x0094
                           000093   704 _P1_3	=	0x0093
                           000092   705 _P1_2	=	0x0092
                           000091   706 _P1_1	=	0x0091
                           000090   707 _P1_0	=	0x0090
                           000099   708 _ENCIF_1	=	0x0099
                           000098   709 _ENCIF_0	=	0x0098
                           0000A7   710 _P2_7	=	0x00a7
                           0000A6   711 _P2_6	=	0x00a6
                           0000A5   712 _P2_5	=	0x00a5
                           0000A4   713 _P2_4	=	0x00a4
                           0000A3   714 _P2_3	=	0x00a3
                           0000A2   715 _P2_2	=	0x00a2
                           0000A1   716 _P2_1	=	0x00a1
                           0000A0   717 _P2_0	=	0x00a0
                           0000AF   718 _EA	=	0x00af
                           0000AD   719 _STIE	=	0x00ad
                           0000AC   720 _ENCIE	=	0x00ac
                           0000AB   721 _URX1IE	=	0x00ab
                           0000AA   722 _URX0IE	=	0x00aa
                           0000A9   723 _ADCIE	=	0x00a9
                           0000A8   724 _RFERRIE	=	0x00a8
                           0000BD   725 _P0IE	=	0x00bd
                           0000BC   726 _T4IE	=	0x00bc
                           0000BB   727 _T3IE	=	0x00bb
                           0000BA   728 _T2IE	=	0x00ba
                           0000B9   729 _T1IE	=	0x00b9
                           0000B8   730 _DMAIE	=	0x00b8
                           0000C7   731 _STIF	=	0x00c7
                           0000C5   732 _P0IF	=	0x00c5
                           0000C4   733 _T4IF	=	0x00c4
                           0000C3   734 _T3IF	=	0x00c3
                           0000C2   735 _T2IF	=	0x00c2
                           0000C1   736 _T1IF	=	0x00c1
                           0000C0   737 _DMAIF	=	0x00c0
                           0000D7   738 _CY	=	0x00d7
                           0000D6   739 _AC	=	0x00d6
                           0000D5   740 _F0	=	0x00d5
                           0000D4   741 _RS1	=	0x00d4
                           0000D3   742 _RS0	=	0x00d3
                           0000D2   743 _OV	=	0x00d2
                           0000D1   744 _F1	=	0x00d1
                           0000D0   745 _P	=	0x00d0
                           0000E7   746 _ACC_7	=	0x00e7
                           0000E6   747 _ACC_6	=	0x00e6
                           0000E5   748 _ACC_5	=	0x00e5
                           0000E4   749 _ACC_4	=	0x00e4
                           0000E3   750 _ACC_3	=	0x00e3
                           0000E2   751 _ACC_2	=	0x00e2
                           0000E1   752 _ACC_1	=	0x00e1
                           0000E0   753 _ACC_0	=	0x00e0
                           0000EC   754 _WDTIF	=	0x00ec
                           0000EB   755 _P1IF	=	0x00eb
                           0000EA   756 _UTX1IF	=	0x00ea
                           0000E9   757 _UTX0IF	=	0x00e9
                           0000E8   758 _P2IF	=	0x00e8
                           0000F7   759 _B_7	=	0x00f7
                           0000F6   760 _B_6	=	0x00f6
                           0000F5   761 _B_5	=	0x00f5
                           0000F4   762 _B_4	=	0x00f4
                           0000F3   763 _B_3	=	0x00f3
                           0000F2   764 _B_2	=	0x00f2
                           0000F1   765 _B_1	=	0x00f1
                           0000F0   766 _B_0	=	0x00f0
                           0000DE   767 _OVFIM	=	0x00de
                           0000DD   768 _T4CH1IF	=	0x00dd
                           0000DC   769 _T4CH0IF	=	0x00dc
                           0000DB   770 _T4OVFIF	=	0x00db
                           0000DA   771 _T3CH1IF	=	0x00da
                           0000D9   772 _T3CH0IF	=	0x00d9
                           0000D8   773 _T3OVFIF	=	0x00d8
                           0000FF   774 _MODE	=	0x00ff
                           0000FE   775 _RE	=	0x00fe
                           0000FD   776 _SLAVE	=	0x00fd
                           0000FC   777 _FE	=	0x00fc
                           0000FB   778 _ERR	=	0x00fb
                           0000FA   779 _RX_BYTE	=	0x00fa
                           0000F9   780 _TX_BYTE	=	0x00f9
                           0000F8   781 _ACTIVE	=	0x00f8
                                    782 ;--------------------------------------------------------
                                    783 ; overlayable register banks
                                    784 ;--------------------------------------------------------
                                    785 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        786 	.ds 8
                                    787 ;--------------------------------------------------------
                                    788 ; internal ram data
                                    789 ;--------------------------------------------------------
                                    790 	.area DSEG    (DATA)
                                    791 ;--------------------------------------------------------
                                    792 ; overlayable items in internal ram 
                                    793 ;--------------------------------------------------------
                                    794 ;--------------------------------------------------------
                                    795 ; indirectly addressable internal ram data
                                    796 ;--------------------------------------------------------
                                    797 	.area ISEG    (DATA)
                                    798 ;--------------------------------------------------------
                                    799 ; absolute internal ram data
                                    800 ;--------------------------------------------------------
                                    801 	.area IABS    (ABS,DATA)
                                    802 	.area IABS    (ABS,DATA)
                                    803 ;--------------------------------------------------------
                                    804 ; bit data
                                    805 ;--------------------------------------------------------
                                    806 	.area BSEG    (BIT)
                                    807 ;--------------------------------------------------------
                                    808 ; paged external ram data
                                    809 ;--------------------------------------------------------
                                    810 	.area PSEG    (PAG,XDATA)
                                    811 ;--------------------------------------------------------
                                    812 ; external ram data
                                    813 ;--------------------------------------------------------
                                    814 	.area XSEG    (XDATA)
                           0061A6   815 _MONMUX	=	0x61a6
                           0061A6   816 _OPAMPMC	=	0x61a6
                           006230   817 _I2CCFG	=	0x6230
                           006231   818 _I2CSTAT	=	0x6231
                           006232   819 _I2CDATA	=	0x6232
                           006233   820 _I2CADDR	=	0x6233
                           006234   821 _I2CWC	=	0x6234
                           006235   822 _I2CIO	=	0x6235
                           006243   823 _OBSSEL0	=	0x6243
                           006244   824 _OBSSEL1	=	0x6244
                           006245   825 _OBSSEL2	=	0x6245
                           006246   826 _OBSSEL3	=	0x6246
                           006247   827 _OBSSEL4	=	0x6247
                           006248   828 _OBSSEL5	=	0x6248
                           006249   829 _CHVER	=	0x6249
                           00624A   830 _CHIPID	=	0x624a
                           00624B   831 _TESTREG0	=	0x624b
                           006260   832 _DBGDATA	=	0x6260
                           006262   833 _SRCRC	=	0x6262
                           006264   834 _BATTMON	=	0x6264
                           006265   835 _IVCTRL	=	0x6265
                           006270   836 _FCTL	=	0x6270
                           006271   837 _FADDRL	=	0x6271
                           006272   838 _FADDRH	=	0x6272
                           006273   839 _FWDATA	=	0x6273
                           006276   840 _CHIPINFO0	=	0x6276
                           006277   841 _CHIPINFO1	=	0x6277
                           006281   842 _IRCTL	=	0x6281
                           006290   843 _CLD	=	0x6290
                           0062A0   844 _XX_T1CCTL0	=	0x62a0
                           0062A1   845 _XX_T1CCTL1	=	0x62a1
                           0062A2   846 _XX_T1CCTL2	=	0x62a2
                           0062A3   847 _T1CCTL3	=	0x62a3
                           0062A4   848 _T1CCTL4	=	0x62a4
                           0062A6   849 _XX_T1CC0L	=	0x62a6
                           0062A7   850 _XX_T1CC0H	=	0x62a7
                           0062A8   851 _XX_T1CC1L	=	0x62a8
                           0062A9   852 _XX_T1CC1H	=	0x62a9
                           0062AA   853 _XX_T1CC2L	=	0x62aa
                           0062AB   854 _XX_T1CC2H	=	0x62ab
                           0062AC   855 _T1CC3L	=	0x62ac
                           0062AD   856 _T1CC3H	=	0x62ad
                           0062AE   857 _T1CC4L	=	0x62ae
                           0062AF   858 _T1CC4H	=	0x62af
                           0062B0   859 _STCC	=	0x62b0
                           0062B1   860 _STCS	=	0x62b1
                           0062B2   861 _STCV0	=	0x62b2
                           0062B3   862 _STCV1	=	0x62b3
                           0062B4   863 _STCV2	=	0x62b4
                           0062C0   864 _OPAMPC	=	0x62c0
                           0062C1   865 _OPAMPS	=	0x62c1
                           0062D0   866 _CMPCTL	=	0x62d0
                           006000   867 _RFCORE_RAM	=	0x6000
                           006000   868 _RXFIFO	=	0x6000
                           006080   869 _TXFIFO	=	0x6080
                           006100   870 _SRC_ADDR_TABLE	=	0x6100
                           006160   871 _SRCRESMASK0	=	0x6160
                           006161   872 _SRCRESMASK1	=	0x6161
                           006162   873 _SRCRESMASK2	=	0x6162
                           006163   874 _SRCRESINDEX	=	0x6163
                           006164   875 _SRCEXTPENDEN0	=	0x6164
                           006165   876 _SRCEXTPENDEN1	=	0x6165
                           006166   877 _SRCEXTPENDEN2	=	0x6166
                           006167   878 _SRCSHORTPENDEN0	=	0x6167
                           006168   879 _SRCSHORTPENDEN1	=	0x6168
                           006169   880 _SRCSHORTPENDEN2	=	0x6169
                           00616A   881 _EXT_ADDR0	=	0x616a
                           00616B   882 _EXT_ADDR1	=	0x616b
                           00616C   883 _EXT_ADDR2	=	0x616c
                           00616D   884 _EXT_ADDR3	=	0x616d
                           00616E   885 _EXT_ADDR4	=	0x616e
                           00616F   886 _EXT_ADDR5	=	0x616f
                           006170   887 _EXT_ADDR6	=	0x6170
                           006171   888 _EXT_ADDR7	=	0x6171
                           006172   889 _PAN_ID0	=	0x6172
                           006173   890 _PAN_ID1	=	0x6173
                           006174   891 _SHORT_ADDR0	=	0x6174
                           006175   892 _SHORT_ADDR1	=	0x6175
                           006180   893 _FRMFILT0	=	0x6180
                           006181   894 _FRMFILT1	=	0x6181
                           006182   895 _SRCMATCH	=	0x6182
                           006183   896 _SRCSHORTEN0	=	0x6183
                           006184   897 _SRCSHORTEN1	=	0x6184
                           006185   898 _SRCSHORTEN2	=	0x6185
                           006186   899 _SRCEXTEN0	=	0x6186
                           006187   900 _SRCEXTEN1	=	0x6187
                           006188   901 _SRCEXTEN2	=	0x6188
                           006189   902 _FRMCTRL0	=	0x6189
                           00618A   903 _FRMCTRL1	=	0x618a
                           00618B   904 _RXENABLE	=	0x618b
                           00618C   905 _RXMASKSET	=	0x618c
                           00618D   906 _RXMASKCLR	=	0x618d
                           00618E   907 _FREQTUNE	=	0x618e
                           00618F   908 _FREQCTRL	=	0x618f
                           006190   909 _TXPOWER	=	0x6190
                           006191   910 _TXCTRL	=	0x6191
                           006192   911 _FSMSTAT0	=	0x6192
                           006193   912 _FSMSTAT1	=	0x6193
                           006194   913 _FIFOPCTRL	=	0x6194
                           006195   914 _FSMCTRL	=	0x6195
                           006196   915 _CCACTRL0	=	0x6196
                           006197   916 _CCACTRL1	=	0x6197
                           006198   917 _RSSI	=	0x6198
                           006199   918 _RSSISTAT	=	0x6199
                           00619A   919 _RXFIRST	=	0x619a
                           00619B   920 _RXFIFOCNT	=	0x619b
                           00619C   921 _TXFIFOCNT	=	0x619c
                           00619D   922 _RXFIRST_PTR	=	0x619d
                           00619E   923 _RXLAST_PTR	=	0x619e
                           00619F   924 _RXP1_PTR	=	0x619f
                           0061A1   925 _TXFIRST_PTR	=	0x61a1
                           0061A2   926 _TXLAST_PTR	=	0x61a2
                           0061A3   927 _RFIRQM0	=	0x61a3
                           0061A4   928 _RFIRQM1	=	0x61a4
                           0061A5   929 _RFERRM	=	0x61a5
                           0061A7   930 _RFRND	=	0x61a7
                           0061A8   931 _MDMCTRL0	=	0x61a8
                           0061A9   932 _MDMCTRL1	=	0x61a9
                           0061AA   933 _FREQEST	=	0x61aa
                           0061AB   934 _RXCTRL	=	0x61ab
                           0061AC   935 _FSCTRL	=	0x61ac
                           0061AD   936 _FSCAL0	=	0x61ad
                           0061AE   937 _FSCAL1	=	0x61ae
                           0061AF   938 _FSCAL2	=	0x61af
                           0061B0   939 _FSCAL3	=	0x61b0
                           0061B1   940 _AGCCTRL0	=	0x61b1
                           0061B2   941 _AGCCTRL1	=	0x61b2
                           0061B3   942 _AGCCTRL2	=	0x61b3
                           0061B4   943 _AGCCTRL3	=	0x61b4
                           0061B5   944 _ADCTEST0	=	0x61b5
                           0061B6   945 _ADCTEST1	=	0x61b6
                           0061B7   946 _ADCTEST2	=	0x61b7
                           0061B8   947 _MDMTEST0	=	0x61b8
                           0061B9   948 _MDMTEST1	=	0x61b9
                           0061BA   949 _DACTEST0	=	0x61ba
                           0061BB   950 _DACTEST1	=	0x61bb
                           0061BC   951 _DACTEST2	=	0x61bc
                           0061BD   952 _ATEST	=	0x61bd
                           0061BE   953 _PTEST0	=	0x61be
                           0061BF   954 _PTEST1	=	0x61bf
                           0061FA   955 _TXFILTCFG	=	0x61fa
                           0061EB   956 _RFC_OBS_CTRL0	=	0x61eb
                           0061EC   957 _RFC_OBS_CTRL1	=	0x61ec
                           0061ED   958 _RFC_OBS_CTRL2	=	0x61ed
                           0061C0   959 _CSPPROG0	=	0x61c0
                           0061C1   960 _CSPPROG1	=	0x61c1
                           0061C2   961 _CSPPROG2	=	0x61c2
                           0061C3   962 _CSPPROG3	=	0x61c3
                           0061C4   963 _CSPPROG4	=	0x61c4
                           0061C5   964 _CSPPROG5	=	0x61c5
                           0061C6   965 _CSPPROG6	=	0x61c6
                           0061C7   966 _CSPPROG7	=	0x61c7
                           0061C8   967 _CSPPROG8	=	0x61c8
                           0061C9   968 _CSPPROG9	=	0x61c9
                           0061CA   969 _CSPPROG10	=	0x61ca
                           0061CB   970 _CSPPROG11	=	0x61cb
                           0061CC   971 _CSPPROG12	=	0x61cc
                           0061CD   972 _CSPPROG13	=	0x61cd
                           0061CE   973 _CSPPROG14	=	0x61ce
                           0061CF   974 _CSPPROG15	=	0x61cf
                           0061D0   975 _CSPPROG16	=	0x61d0
                           0061D1   976 _CSPPROG17	=	0x61d1
                           0061D2   977 _CSPPROG18	=	0x61d2
                           0061D3   978 _CSPPROG19	=	0x61d3
                           0061D4   979 _CSPPROG20	=	0x61d4
                           0061D5   980 _CSPPROG21	=	0x61d5
                           0061D6   981 _CSPPROG22	=	0x61d6
                           0061D7   982 _CSPPROG23	=	0x61d7
                           0061E0   983 _CSPCTRL	=	0x61e0
                           0061E1   984 _CSPSTAT	=	0x61e1
                           0061E2   985 _CSPX	=	0x61e2
                           0061E3   986 _CSPY	=	0x61e3
                           0061E4   987 _CSPZ	=	0x61e4
                           0061E5   988 _CSPT	=	0x61e5
                           006200   989 _USBADDR	=	0x6200
                           006201   990 _USBPOW	=	0x6201
                           006202   991 _USBIIF	=	0x6202
                           006204   992 _USBOIF	=	0x6204
                           006206   993 _USBCIF	=	0x6206
                           006207   994 _USBIIE	=	0x6207
                           006209   995 _USBOIE	=	0x6209
                           00620B   996 _USBCIE	=	0x620b
                           00620C   997 _USBFRML	=	0x620c
                           00620D   998 _USBFRMH	=	0x620d
                           00620E   999 _USBINDEX	=	0x620e
                           00620F  1000 _USBCTRL	=	0x620f
                           006210  1001 _USBMAXI	=	0x6210
                           006211  1002 _USBCS0	=	0x6211
                           006211  1003 _USBCSIL	=	0x6211
                           006212  1004 _USBCSIH	=	0x6212
                           006213  1005 _USBMAXO	=	0x6213
                           006214  1006 _USBCSOL	=	0x6214
                           006215  1007 _USBCSOH	=	0x6215
                           006216  1008 _USBCNT0	=	0x6216
                           006216  1009 _USBCNTL	=	0x6216
                           006217  1010 _USBCNTH	=	0x6217
                           006220  1011 _USBF0	=	0x6220
                           006222  1012 _USBF1	=	0x6222
                           006224  1013 _USBF2	=	0x6224
                           006226  1014 _USBF3	=	0x6226
                           006228  1015 _USBF4	=	0x6228
                           00622A  1016 _USBF5	=	0x622a
                           007080  1017 _X_P0	=	0x7080
                           007086  1018 _X_U0CSR	=	0x7086
                           007089  1019 _X_P0IFG	=	0x7089
                           00708A  1020 _X_P1IFG	=	0x708a
                           00708B  1021 _X_P2IFG	=	0x708b
                           00708C  1022 _X_PICTL	=	0x708c
                           00708D  1023 _X_P1IEN	=	0x708d
                           00708F  1024 _X_P0INP	=	0x708f
                           007090  1025 _X_P1	=	0x7090
                           007091  1026 _X_RFIRQF1	=	0x7091
                           007093  1027 _X_MPAGE	=	0x7093
                           007093  1028 _X__XPAGE	=	0x7093
                           007094  1029 _X_T2CTRL	=	0x7094
                           007095  1030 _X_ST0	=	0x7095
                           007096  1031 _X_ST1	=	0x7096
                           007097  1032 _X_ST2	=	0x7097
                           00709C  1033 _X_T2EVTCFG	=	0x709c
                           00709D  1034 _X_SLEEPSTA	=	0x709d
                           00709E  1035 _X_CLKCONSTA	=	0x709e
                           00709F  1036 _X_FMAP	=	0x709f
                           00709F  1037 _X_PSBANK	=	0x709f
                           0070A0  1038 _X_P2	=	0x70a0
                           0070A1  1039 _X_T2IRQF	=	0x70a1
                           0070A2  1040 _X_T2M0	=	0x70a2
                           0070A3  1041 _X_T2M1	=	0x70a3
                           0070A4  1042 _X_T2MOVF0	=	0x70a4
                           0070A5  1043 _X_T2MOVF1	=	0x70a5
                           0070A6  1044 _X_T2MOVF2	=	0x70a6
                           0070A7  1045 _X_T2IRQM	=	0x70a7
                           0070AB  1046 _X_P0IEN	=	0x70ab
                           0070AC  1047 _X_P2IEN	=	0x70ac
                           0070AD  1048 _X_STLOAD	=	0x70ad
                           0070AE  1049 _X_PMUX	=	0x70ae
                           0070AF  1050 _X_T1STAT	=	0x70af
                           0070B1  1051 _X_ENCDI	=	0x70b1
                           0070B2  1052 _X_ENCDO	=	0x70b2
                           0070B3  1053 _X_ENCCS	=	0x70b3
                           0070B4  1054 _X_ADCCON1	=	0x70b4
                           0070B5  1055 _X_ADCCON2	=	0x70b5
                           0070B6  1056 _X_ADCCON3	=	0x70b6
                           0070BA  1057 _X_ADCL	=	0x70ba
                           0070BB  1058 _X_ADCH	=	0x70bb
                           0070BC  1059 _X_RNDL	=	0x70bc
                           0070BD  1060 _X_RNDH	=	0x70bd
                           0070BE  1061 _X_SLEEPCMD	=	0x70be
                           0070BF  1062 _X_RFERRF	=	0x70bf
                           0070C1  1063 _X_U0DBUF	=	0x70c1
                           0070C2  1064 _X_U0BAUD	=	0x70c2
                           0070C3  1065 _X_T2MSEL	=	0x70c3
                           0070C4  1066 _X_U0UCR	=	0x70c4
                           0070C5  1067 _X_U0GCR	=	0x70c5
                           0070C6  1068 _X_CLKCONCMD	=	0x70c6
                           0070C7  1069 _X_MEMCTR	=	0x70c7
                           0070C9  1070 _X_WDCTL	=	0x70c9
                           0070CA  1071 _X_T3CNT	=	0x70ca
                           0070CB  1072 _X_T3CTL	=	0x70cb
                           0070CC  1073 _X_T3CCTL0	=	0x70cc
                           0070CD  1074 _X_T3CC0	=	0x70cd
                           0070CE  1075 _X_T3CCTL1	=	0x70ce
                           0070CF  1076 _X_T3CC1	=	0x70cf
                           0070D1  1077 _X_DMAIRQ	=	0x70d1
                           0070D2  1078 _X_DMA1CFGL	=	0x70d2
                           0070D3  1079 _X_DMA1CFGH	=	0x70d3
                           0070D4  1080 _X_DMA0CFGL	=	0x70d4
                           0070D5  1081 _X_DMA0CFGH	=	0x70d5
                           0070D6  1082 _X_DMAARM	=	0x70d6
                           0070D7  1083 _X_DMAREQ	=	0x70d7
                           0070D8  1084 _X_TIMIF	=	0x70d8
                           0070D9  1085 _X_RFD	=	0x70d9
                           0070DA  1086 _X_T1CC0L	=	0x70da
                           0070DB  1087 _X_T1CC0H	=	0x70db
                           0070DC  1088 _X_T1CC1L	=	0x70dc
                           0070DD  1089 _X_T1CC1H	=	0x70dd
                           0070DE  1090 _X_T1CC2L	=	0x70de
                           0070DF  1091 _X_T1CC2H	=	0x70df
                           0070E1  1092 _X_RFST	=	0x70e1
                           0070E2  1093 _X_T1CNTL	=	0x70e2
                           0070E3  1094 _X_T1CNTH	=	0x70e3
                           0070E4  1095 _X_T1CTL	=	0x70e4
                           0070E5  1096 _X_T1CCTL0	=	0x70e5
                           0070E6  1097 _X_T1CCTL1	=	0x70e6
                           0070E7  1098 _X_T1CCTL2	=	0x70e7
                           0070E9  1099 _X_RFIRQF0	=	0x70e9
                           0070EA  1100 _X_T4CNT	=	0x70ea
                           0070EB  1101 _X_T4CTL	=	0x70eb
                           0070EC  1102 _X_T4CCTL0	=	0x70ec
                           0070ED  1103 _X_T4CC0	=	0x70ed
                           0070EE  1104 _X_T4CCTL1	=	0x70ee
                           0070EF  1105 _X_T4CC1	=	0x70ef
                           0070F1  1106 _X_PERCFG	=	0x70f1
                           0070F2  1107 _X_APCFG	=	0x70f2
                           0070F3  1108 _X_P0SEL	=	0x70f3
                           0070F4  1109 _X_P1SEL	=	0x70f4
                           0070F5  1110 _X_P2SEL	=	0x70f5
                           0070F6  1111 _X_P1INP	=	0x70f6
                           0070F7  1112 _X_P2INP	=	0x70f7
                           0070F8  1113 _X_U1CSR	=	0x70f8
                           0070F9  1114 _X_U1DBUF	=	0x70f9
                           0070FA  1115 _X_U1BAUD	=	0x70fa
                           0070FB  1116 _X_U1UCR	=	0x70fb
                           0070FC  1117 _X_U1GCR	=	0x70fc
                           0070FD  1118 _X_P0DIR	=	0x70fd
                           0070FE  1119 _X_P1DIR	=	0x70fe
                           0070FF  1120 _X_P2DIR	=	0x70ff
                           007800  1121 _X_INFOPAGE	=	0x7800
                           00780C  1122 _X_IEEE_ADDR	=	0x780c
      000000                       1123 _slip_active::
      000000                       1124 	.ds 1
      000001                       1125 _begin:
      000001                       1126 	.ds 2
      000003                       1127 _end:
      000003                       1128 	.ds 2
      000005                       1129 _rxbuf:
      000005                       1130 	.ds 256
      000105                       1131 _pkt_end:
      000105                       1132 	.ds 2
                                   1133 ;--------------------------------------------------------
                                   1134 ; absolute external ram data
                                   1135 ;--------------------------------------------------------
                                   1136 	.area XABS    (ABS,XDATA)
                                   1137 ;--------------------------------------------------------
                                   1138 ; external initialized ram data
                                   1139 ;--------------------------------------------------------
                                   1140 	.area XISEG   (XDATA)
      000000                       1141 _slip_process::
      000000                       1142 	.ds 10
      00000A                       1143 _state:
      00000A                       1144 	.ds 1
      00000B                       1145 _input_callback:
      00000B                       1146 	.ds 3
                                   1147 	.area HOME    (CODE)
                                   1148 	.area GSINIT0 (CODE)
                                   1149 	.area GSINIT1 (CODE)
                                   1150 	.area GSINIT2 (CODE)
                                   1151 	.area GSINIT3 (CODE)
                                   1152 	.area GSINIT4 (CODE)
                                   1153 	.area GSINIT5 (CODE)
                                   1154 	.area GSINIT  (CODE)
                                   1155 	.area GSFINAL (CODE)
                                   1156 	.area CSEG    (CODE)
                                   1157 ;--------------------------------------------------------
                                   1158 ; global & static initialisations
                                   1159 ;--------------------------------------------------------
                                   1160 	.area HOME    (CODE)
                                   1161 	.area GSINIT  (CODE)
                                   1162 	.area GSFINAL (CODE)
                                   1163 	.area GSINIT  (CODE)
                                   1164 ;--------------------------------------------------------
                                   1165 ; Home
                                   1166 ;--------------------------------------------------------
                                   1167 	.area HOME    (CODE)
                                   1168 	.area HOME    (CODE)
                                   1169 ;--------------------------------------------------------
                                   1170 ; code
                                   1171 ;--------------------------------------------------------
                                   1172 	.area BANK1   (CODE)
                                   1173 ;------------------------------------------------------------
                                   1174 ;Allocation info for local variables in function 'slip_set_input_callback'
                                   1175 ;------------------------------------------------------------
                                   1176 ;c                         Allocated to registers 
                                   1177 ;------------------------------------------------------------
                                   1178 ;	../../../../core/dev/slip.c:91: slip_set_input_callback(void (*c)(void))
                                   1179 ;	-----------------------------------------
                                   1180 ;	 function slip_set_input_callback
                                   1181 ;	-----------------------------------------
      000000                       1182 _slip_set_input_callback:
                           000007  1183 	ar7 = 0x07
                           000006  1184 	ar6 = 0x06
                           000005  1185 	ar5 = 0x05
                           000004  1186 	ar4 = 0x04
                           000003  1187 	ar3 = 0x03
                           000002  1188 	ar2 = 0x02
                           000001  1189 	ar1 = 0x01
                           000000  1190 	ar0 = 0x00
      000000 AF F0            [24] 1191 	mov	r7,b
      000002 AE 83            [24] 1192 	mov	r6,dph
      000004 E5 82            [12] 1193 	mov	a,dpl
      000006 90r00r0B         [24] 1194 	mov	dptr,#_input_callback
      000009 F0               [24] 1195 	movx	@dptr,a
      00000A EE               [12] 1196 	mov	a,r6
      00000B A3               [24] 1197 	inc	dptr
      00000C F0               [24] 1198 	movx	@dptr,a
      00000D EF               [12] 1199 	mov	a,r7
      00000E A3               [24] 1200 	inc	dptr
      00000F F0               [24] 1201 	movx	@dptr,a
                                   1202 ;	../../../../core/dev/slip.c:93: input_callback = c;
      000010 02r00r00         [24] 1203 	ljmp	__sdcc_banked_ret
                                   1204 ;------------------------------------------------------------
                                   1205 ;Allocation info for local variables in function 'slip_send'
                                   1206 ;------------------------------------------------------------
                                   1207 ;i                         Allocated to stack - sp -1
                                   1208 ;ptr                       Allocated to registers r5 r6 r7 
                                   1209 ;c                         Allocated to registers r4 
                                   1210 ;------------------------------------------------------------
                                   1211 ;	../../../../core/dev/slip.c:101: slip_send(void)
                                   1212 ;	-----------------------------------------
                                   1213 ;	 function slip_send
                                   1214 ;	-----------------------------------------
      000013                       1215 _slip_send:
      000013 05 81            [12] 1216 	inc	sp
      000015 05 81            [12] 1217 	inc	sp
                                   1218 ;	../../../../core/dev/slip.c:107: slip_arch_writeb(SLIP_END);
      000017 75 82 C0         [24] 1219 	mov	dpl,#0xC0
      00001A 78r00            [12] 1220 	mov	r0,#_slip_arch_writeb
      00001C 79s00            [12] 1221 	mov	r1,#(_slip_arch_writeb >> 8)
      00001E 7As00            [12] 1222 	mov	r2,#(_slip_arch_writeb >> 16)
      000020 12r00r00         [24] 1223 	lcall	__sdcc_banked_call
                                   1224 ;	../../../../core/dev/slip.c:109: ptr = &uip_buf[UIP_LLH_LEN];
      000023 7Dr00            [12] 1225 	mov	r5,#_uip_aligned_buf
      000025 7Es00            [12] 1226 	mov	r6,#(_uip_aligned_buf >> 8)
      000027 7F 00            [12] 1227 	mov	r7,#0x00
                                   1228 ;	../../../../core/dev/slip.c:110: for(i = 0; i < uip_len; ++i) {
      000029 A8 81            [24] 1229 	mov	r0,sp
      00002B 18               [12] 1230 	dec	r0
      00002C E4               [12] 1231 	clr	a
      00002D F6               [12] 1232 	mov	@r0,a
      00002E 08               [12] 1233 	inc	r0
      00002F F6               [12] 1234 	mov	@r0,a
      000030                       1235 00110$:
      000030 C0 05            [24] 1236 	push	ar5
      000032 C0 06            [24] 1237 	push	ar6
      000034 C0 07            [24] 1238 	push	ar7
      000036 90r00r00         [24] 1239 	mov	dptr,#_uip_len
      000039 E0               [24] 1240 	movx	a,@dptr
      00003A FA               [12] 1241 	mov	r2,a
      00003B A3               [24] 1242 	inc	dptr
      00003C E0               [24] 1243 	movx	a,@dptr
      00003D FF               [12] 1244 	mov	r7,a
      00003E E5 81            [12] 1245 	mov	a,sp
      000040 24 FC            [12] 1246 	add	a,#0xfc
      000042 F8               [12] 1247 	mov	r0,a
      000043 C3               [12] 1248 	clr	c
      000044 E6               [12] 1249 	mov	a,@r0
      000045 9A               [12] 1250 	subb	a,r2
      000046 08               [12] 1251 	inc	r0
      000047 E6               [12] 1252 	mov	a,@r0
      000048 9F               [12] 1253 	subb	a,r7
      000049 D0 07            [24] 1254 	pop	ar7
      00004B D0 06            [24] 1255 	pop	ar6
      00004D D0 05            [24] 1256 	pop	ar5
      00004F 40 03            [24] 1257 	jc	00130$
      000051 02r00rDD         [24] 1258 	ljmp	00108$
      000054                       1259 00130$:
                                   1260 ;	../../../../core/dev/slip.c:111: if(i == UIP_TCPIP_HLEN) {
      000054 A8 81            [24] 1261 	mov	r0,sp
      000056 18               [12] 1262 	dec	r0
      000057 B6 3C 15         [24] 1263 	cjne	@r0,#0x3C,00102$
      00005A 08               [12] 1264 	inc	r0
      00005B B6 00 11         [24] 1265 	cjne	@r0,#0x00,00102$
                                   1266 ;	../../../../core/dev/slip.c:112: ptr = (uint8_t *)uip_appdata;
      00005E 90r00r00         [24] 1267 	mov	dptr,#_uip_appdata
      000061 E0               [24] 1268 	movx	a,@dptr
      000062 FA               [12] 1269 	mov	r2,a
      000063 A3               [24] 1270 	inc	dptr
      000064 E0               [24] 1271 	movx	a,@dptr
      000065 FB               [12] 1272 	mov	r3,a
      000066 A3               [24] 1273 	inc	dptr
      000067 E0               [24] 1274 	movx	a,@dptr
      000068 FC               [12] 1275 	mov	r4,a
      000069 8A 05            [24] 1276 	mov	ar5,r2
      00006B 8B 06            [24] 1277 	mov	ar6,r3
      00006D 8C 07            [24] 1278 	mov	ar7,r4
      00006F                       1279 00102$:
                                   1280 ;	../../../../core/dev/slip.c:114: c = *ptr++;
      00006F 8D 82            [24] 1281 	mov	dpl,r5
      000071 8E 83            [24] 1282 	mov	dph,r6
      000073 8F F0            [24] 1283 	mov	b,r7
      000075 12r00r00         [24] 1284 	lcall	__gptrget
      000078 FC               [12] 1285 	mov	r4,a
      000079 A3               [24] 1286 	inc	dptr
      00007A AD 82            [24] 1287 	mov	r5,dpl
      00007C AE 83            [24] 1288 	mov	r6,dph
                                   1289 ;	../../../../core/dev/slip.c:115: if(c == SLIP_END) {
      00007E BC C0 1C         [24] 1290 	cjne	r4,#0xC0,00106$
                                   1291 ;	../../../../core/dev/slip.c:116: slip_arch_writeb(SLIP_ESC);
      000081 75 82 DB         [24] 1292 	mov	dpl,#0xDB
      000084 C0 07            [24] 1293 	push	ar7
      000086 C0 06            [24] 1294 	push	ar6
      000088 C0 05            [24] 1295 	push	ar5
      00008A 78r00            [12] 1296 	mov	r0,#_slip_arch_writeb
      00008C 79s00            [12] 1297 	mov	r1,#(_slip_arch_writeb >> 8)
      00008E 7As00            [12] 1298 	mov	r2,#(_slip_arch_writeb >> 16)
      000090 12r00r00         [24] 1299 	lcall	__sdcc_banked_call
      000093 D0 05            [24] 1300 	pop	ar5
      000095 D0 06            [24] 1301 	pop	ar6
      000097 D0 07            [24] 1302 	pop	ar7
                                   1303 ;	../../../../core/dev/slip.c:117: c = SLIP_ESC_END;
      000099 7C DC            [12] 1304 	mov	r4,#0xDC
      00009B 80 1D            [24] 1305 	sjmp	00107$
      00009D                       1306 00106$:
                                   1307 ;	../../../../core/dev/slip.c:118: } else if(c == SLIP_ESC) {
      00009D BC DB 1A         [24] 1308 	cjne	r4,#0xDB,00107$
                                   1309 ;	../../../../core/dev/slip.c:119: slip_arch_writeb(SLIP_ESC);
      0000A0 75 82 DB         [24] 1310 	mov	dpl,#0xDB
      0000A3 C0 07            [24] 1311 	push	ar7
      0000A5 C0 06            [24] 1312 	push	ar6
      0000A7 C0 05            [24] 1313 	push	ar5
      0000A9 78r00            [12] 1314 	mov	r0,#_slip_arch_writeb
      0000AB 79s00            [12] 1315 	mov	r1,#(_slip_arch_writeb >> 8)
      0000AD 7As00            [12] 1316 	mov	r2,#(_slip_arch_writeb >> 16)
      0000AF 12r00r00         [24] 1317 	lcall	__sdcc_banked_call
      0000B2 D0 05            [24] 1318 	pop	ar5
      0000B4 D0 06            [24] 1319 	pop	ar6
      0000B6 D0 07            [24] 1320 	pop	ar7
                                   1321 ;	../../../../core/dev/slip.c:120: c = SLIP_ESC_ESC;
      0000B8 7C DD            [12] 1322 	mov	r4,#0xDD
      0000BA                       1323 00107$:
                                   1324 ;	../../../../core/dev/slip.c:122: slip_arch_writeb(c);
      0000BA 8C 82            [24] 1325 	mov	dpl,r4
      0000BC C0 07            [24] 1326 	push	ar7
      0000BE C0 06            [24] 1327 	push	ar6
      0000C0 C0 05            [24] 1328 	push	ar5
      0000C2 78r00            [12] 1329 	mov	r0,#_slip_arch_writeb
      0000C4 79s00            [12] 1330 	mov	r1,#(_slip_arch_writeb >> 8)
      0000C6 7As00            [12] 1331 	mov	r2,#(_slip_arch_writeb >> 16)
      0000C8 12r00r00         [24] 1332 	lcall	__sdcc_banked_call
      0000CB D0 05            [24] 1333 	pop	ar5
      0000CD D0 06            [24] 1334 	pop	ar6
      0000CF D0 07            [24] 1335 	pop	ar7
                                   1336 ;	../../../../core/dev/slip.c:110: for(i = 0; i < uip_len; ++i) {
      0000D1 A8 81            [24] 1337 	mov	r0,sp
      0000D3 18               [12] 1338 	dec	r0
      0000D4 06               [12] 1339 	inc	@r0
      0000D5 B6 00 02         [24] 1340 	cjne	@r0,#0x00,00137$
      0000D8 08               [12] 1341 	inc	r0
      0000D9 06               [12] 1342 	inc	@r0
      0000DA                       1343 00137$:
      0000DA 02r00r30         [24] 1344 	ljmp	00110$
      0000DD                       1345 00108$:
                                   1346 ;	../../../../core/dev/slip.c:124: slip_arch_writeb(SLIP_END);
      0000DD 75 82 C0         [24] 1347 	mov	dpl,#0xC0
      0000E0 78r00            [12] 1348 	mov	r0,#_slip_arch_writeb
      0000E2 79s00            [12] 1349 	mov	r1,#(_slip_arch_writeb >> 8)
      0000E4 7As00            [12] 1350 	mov	r2,#(_slip_arch_writeb >> 16)
      0000E6 12r00r00         [24] 1351 	lcall	__sdcc_banked_call
                                   1352 ;	../../../../core/dev/slip.c:126: return UIP_FW_OK;
      0000E9 75 82 00         [24] 1353 	mov	dpl,#0x00
      0000EC 15 81            [12] 1354 	dec	sp
      0000EE 15 81            [12] 1355 	dec	sp
      0000F0 02r00r00         [24] 1356 	ljmp	__sdcc_banked_ret
                                   1357 ;------------------------------------------------------------
                                   1358 ;Allocation info for local variables in function 'slip_write'
                                   1359 ;------------------------------------------------------------
                                   1360 ;len                       Allocated to stack - sp -4
                                   1361 ;_ptr                      Allocated to registers r5 r6 r7 
                                   1362 ;ptr                       Allocated to registers r5 r6 r7 
                                   1363 ;i                         Allocated to registers r3 r4 
                                   1364 ;c                         Allocated to registers r2 
                                   1365 ;------------------------------------------------------------
                                   1366 ;	../../../../core/dev/slip.c:131: slip_write(const void *_ptr, int len)
                                   1367 ;	-----------------------------------------
                                   1368 ;	 function slip_write
                                   1369 ;	-----------------------------------------
      0000F3                       1370 _slip_write:
      0000F3 AD 82            [24] 1371 	mov	r5,dpl
      0000F5 AE 83            [24] 1372 	mov	r6,dph
      0000F7 AF F0            [24] 1373 	mov	r7,b
                                   1374 ;	../../../../core/dev/slip.c:133: const uint8_t *ptr = _ptr;
                                   1375 ;	../../../../core/dev/slip.c:137: slip_arch_writeb(SLIP_END);
      0000F9 75 82 C0         [24] 1376 	mov	dpl,#0xC0
      0000FC C0 07            [24] 1377 	push	ar7
      0000FE C0 06            [24] 1378 	push	ar6
      000100 C0 05            [24] 1379 	push	ar5
      000102 78r00            [12] 1380 	mov	r0,#_slip_arch_writeb
      000104 79s00            [12] 1381 	mov	r1,#(_slip_arch_writeb >> 8)
      000106 7As00            [12] 1382 	mov	r2,#(_slip_arch_writeb >> 16)
      000108 12r00r00         [24] 1383 	lcall	__sdcc_banked_call
      00010B D0 05            [24] 1384 	pop	ar5
      00010D D0 06            [24] 1385 	pop	ar6
      00010F D0 07            [24] 1386 	pop	ar7
                                   1387 ;	../../../../core/dev/slip.c:139: for(i = 0; i < len; ++i) {
      000111 7B 00            [12] 1388 	mov	r3,#0x00
      000113 7C 00            [12] 1389 	mov	r4,#0x00
      000115                       1390 00108$:
      000115 C0 05            [24] 1391 	push	ar5
      000117 C0 06            [24] 1392 	push	ar6
      000119 C0 07            [24] 1393 	push	ar7
      00011B E5 81            [12] 1394 	mov	a,sp
      00011D 24 F9            [12] 1395 	add	a,#0xf9
      00011F F8               [12] 1396 	mov	r0,a
      000120 86 02            [24] 1397 	mov	ar2,@r0
      000122 08               [12] 1398 	inc	r0
      000123 86 07            [24] 1399 	mov	ar7,@r0
      000125 C3               [12] 1400 	clr	c
      000126 EB               [12] 1401 	mov	a,r3
      000127 9A               [12] 1402 	subb	a,r2
      000128 EC               [12] 1403 	mov	a,r4
      000129 9F               [12] 1404 	subb	a,r7
      00012A D0 07            [24] 1405 	pop	ar7
      00012C D0 06            [24] 1406 	pop	ar6
      00012E D0 05            [24] 1407 	pop	ar5
      000130 40 03            [24] 1408 	jc	00125$
      000132 02r01rB7         [24] 1409 	ljmp	00106$
      000135                       1410 00125$:
                                   1411 ;	../../../../core/dev/slip.c:140: c = *ptr++;
      000135 8D 82            [24] 1412 	mov	dpl,r5
      000137 8E 83            [24] 1413 	mov	dph,r6
      000139 8F F0            [24] 1414 	mov	b,r7
      00013B 12r00r00         [24] 1415 	lcall	__gptrget
      00013E FA               [12] 1416 	mov	r2,a
      00013F A3               [24] 1417 	inc	dptr
      000140 AD 82            [24] 1418 	mov	r5,dpl
      000142 AE 83            [24] 1419 	mov	r6,dph
                                   1420 ;	../../../../core/dev/slip.c:141: if(c == SLIP_END) {
      000144 BA C0 24         [24] 1421 	cjne	r2,#0xC0,00104$
                                   1422 ;	../../../../core/dev/slip.c:142: slip_arch_writeb(SLIP_ESC);
      000147 75 82 DB         [24] 1423 	mov	dpl,#0xDB
      00014A C0 07            [24] 1424 	push	ar7
      00014C C0 06            [24] 1425 	push	ar6
      00014E C0 05            [24] 1426 	push	ar5
      000150 C0 04            [24] 1427 	push	ar4
      000152 C0 03            [24] 1428 	push	ar3
      000154 78r00            [12] 1429 	mov	r0,#_slip_arch_writeb
      000156 79s00            [12] 1430 	mov	r1,#(_slip_arch_writeb >> 8)
      000158 7As00            [12] 1431 	mov	r2,#(_slip_arch_writeb >> 16)
      00015A 12r00r00         [24] 1432 	lcall	__sdcc_banked_call
      00015D D0 03            [24] 1433 	pop	ar3
      00015F D0 04            [24] 1434 	pop	ar4
      000161 D0 05            [24] 1435 	pop	ar5
      000163 D0 06            [24] 1436 	pop	ar6
      000165 D0 07            [24] 1437 	pop	ar7
                                   1438 ;	../../../../core/dev/slip.c:143: c = SLIP_ESC_END;
      000167 7A DC            [12] 1439 	mov	r2,#0xDC
      000169 80 25            [24] 1440 	sjmp	00105$
      00016B                       1441 00104$:
                                   1442 ;	../../../../core/dev/slip.c:144: } else if(c == SLIP_ESC) {
      00016B BA DB 22         [24] 1443 	cjne	r2,#0xDB,00105$
                                   1444 ;	../../../../core/dev/slip.c:145: slip_arch_writeb(SLIP_ESC);
      00016E 75 82 DB         [24] 1445 	mov	dpl,#0xDB
      000171 C0 07            [24] 1446 	push	ar7
      000173 C0 06            [24] 1447 	push	ar6
      000175 C0 05            [24] 1448 	push	ar5
      000177 C0 04            [24] 1449 	push	ar4
      000179 C0 03            [24] 1450 	push	ar3
      00017B 78r00            [12] 1451 	mov	r0,#_slip_arch_writeb
      00017D 79s00            [12] 1452 	mov	r1,#(_slip_arch_writeb >> 8)
      00017F 7As00            [12] 1453 	mov	r2,#(_slip_arch_writeb >> 16)
      000181 12r00r00         [24] 1454 	lcall	__sdcc_banked_call
      000184 D0 03            [24] 1455 	pop	ar3
      000186 D0 04            [24] 1456 	pop	ar4
      000188 D0 05            [24] 1457 	pop	ar5
      00018A D0 06            [24] 1458 	pop	ar6
      00018C D0 07            [24] 1459 	pop	ar7
                                   1460 ;	../../../../core/dev/slip.c:146: c = SLIP_ESC_ESC;
      00018E 7A DD            [12] 1461 	mov	r2,#0xDD
      000190                       1462 00105$:
                                   1463 ;	../../../../core/dev/slip.c:148: slip_arch_writeb(c);
      000190 8A 82            [24] 1464 	mov	dpl,r2
      000192 C0 07            [24] 1465 	push	ar7
      000194 C0 06            [24] 1466 	push	ar6
      000196 C0 05            [24] 1467 	push	ar5
      000198 C0 04            [24] 1468 	push	ar4
      00019A C0 03            [24] 1469 	push	ar3
      00019C 78r00            [12] 1470 	mov	r0,#_slip_arch_writeb
      00019E 79s00            [12] 1471 	mov	r1,#(_slip_arch_writeb >> 8)
      0001A0 7As00            [12] 1472 	mov	r2,#(_slip_arch_writeb >> 16)
      0001A2 12r00r00         [24] 1473 	lcall	__sdcc_banked_call
      0001A5 D0 03            [24] 1474 	pop	ar3
      0001A7 D0 04            [24] 1475 	pop	ar4
      0001A9 D0 05            [24] 1476 	pop	ar5
      0001AB D0 06            [24] 1477 	pop	ar6
      0001AD D0 07            [24] 1478 	pop	ar7
                                   1479 ;	../../../../core/dev/slip.c:139: for(i = 0; i < len; ++i) {
      0001AF 0B               [12] 1480 	inc	r3
      0001B0 BB 00 01         [24] 1481 	cjne	r3,#0x00,00130$
      0001B3 0C               [12] 1482 	inc	r4
      0001B4                       1483 00130$:
      0001B4 02r01r15         [24] 1484 	ljmp	00108$
      0001B7                       1485 00106$:
                                   1486 ;	../../../../core/dev/slip.c:150: slip_arch_writeb(SLIP_END);
      0001B7 75 82 C0         [24] 1487 	mov	dpl,#0xC0
      0001BA 78r00            [12] 1488 	mov	r0,#_slip_arch_writeb
      0001BC 79s00            [12] 1489 	mov	r1,#(_slip_arch_writeb >> 8)
      0001BE 7As00            [12] 1490 	mov	r2,#(_slip_arch_writeb >> 16)
      0001C0 12r00r00         [24] 1491 	lcall	__sdcc_banked_call
                                   1492 ;	../../../../core/dev/slip.c:152: return len;
      0001C3 E5 81            [12] 1493 	mov	a,sp
      0001C5 24 FC            [12] 1494 	add	a,#0xfc
      0001C7 F8               [12] 1495 	mov	r0,a
      0001C8 86 07            [24] 1496 	mov	ar7,@r0
      0001CA 8F 82            [24] 1497 	mov	dpl,r7
      0001CC 02r00r00         [24] 1498 	ljmp	__sdcc_banked_ret
                                   1499 ;------------------------------------------------------------
                                   1500 ;Allocation info for local variables in function 'rxbuf_init'
                                   1501 ;------------------------------------------------------------
                                   1502 ;	../../../../core/dev/slip.c:156: rxbuf_init(void)
                                   1503 ;	-----------------------------------------
                                   1504 ;	 function rxbuf_init
                                   1505 ;	-----------------------------------------
      0001CF                       1506 _rxbuf_init:
                                   1507 ;	../../../../core/dev/slip.c:158: begin = end = pkt_end = 0;
      0001CF 90r01r05         [24] 1508 	mov	dptr,#_pkt_end
      0001D2 E4               [12] 1509 	clr	a
      0001D3 F0               [24] 1510 	movx	@dptr,a
      0001D4 E4               [12] 1511 	clr	a
      0001D5 A3               [24] 1512 	inc	dptr
      0001D6 F0               [24] 1513 	movx	@dptr,a
      0001D7 90r00r03         [24] 1514 	mov	dptr,#_end
      0001DA E4               [12] 1515 	clr	a
      0001DB F0               [24] 1516 	movx	@dptr,a
      0001DC E4               [12] 1517 	clr	a
      0001DD A3               [24] 1518 	inc	dptr
      0001DE F0               [24] 1519 	movx	@dptr,a
      0001DF 90r00r01         [24] 1520 	mov	dptr,#_begin
      0001E2 E4               [12] 1521 	clr	a
      0001E3 F0               [24] 1522 	movx	@dptr,a
      0001E4 E4               [12] 1523 	clr	a
      0001E5 A3               [24] 1524 	inc	dptr
      0001E6 F0               [24] 1525 	movx	@dptr,a
                                   1526 ;	../../../../core/dev/slip.c:159: state = STATE_OK;
      0001E7 90r00r0A         [24] 1527 	mov	dptr,#_state
      0001EA 74 01            [12] 1528 	mov	a,#0x01
      0001EC F0               [24] 1529 	movx	@dptr,a
      0001ED 02r00r00         [24] 1530 	ljmp	__sdcc_banked_ret
                                   1531 ;------------------------------------------------------------
                                   1532 ;Allocation info for local variables in function 'slip_poll_handler'
                                   1533 ;------------------------------------------------------------
                                   1534 ;blen                      Allocated to stack - sp -9
                                   1535 ;outbuf                    Allocated to stack - sp -4
                                   1536 ;i                         Allocated to registers r3 r4 
                                   1537 ;len                       Allocated to stack - sp -1
                                   1538 ;i                         Allocated to registers 
                                   1539 ;sloc0                     Allocated to stack - sp +5
                                   1540 ;sloc1                     Allocated to stack - sp +7
                                   1541 ;sloc2                     Allocated to stack - sp +9
                                   1542 ;------------------------------------------------------------
                                   1543 ;	../../../../core/dev/slip.c:164: slip_poll_handler(uint8_t *outbuf, uint16_t blen)
                                   1544 ;	-----------------------------------------
                                   1545 ;	 function slip_poll_handler
                                   1546 ;	-----------------------------------------
      0001F0                       1547 _slip_poll_handler:
      0001F0 C0 82            [24] 1548 	push	dpl
      0001F2 C0 83            [24] 1549 	push	dph
      0001F4 C0 F0            [24] 1550 	push	b
      0001F6 05 81            [12] 1551 	inc	sp
      0001F8 05 81            [12] 1552 	inc	sp
                                   1553 ;	../../../../core/dev/slip.c:167: if(rxbuf[begin] == 'C') {
      0001FA 90r00r01         [24] 1554 	mov	dptr,#_begin
      0001FD E0               [24] 1555 	movx	a,@dptr
      0001FE FB               [12] 1556 	mov	r3,a
      0001FF A3               [24] 1557 	inc	dptr
      000200 E0               [24] 1558 	movx	a,@dptr
      000201 FC               [12] 1559 	mov	r4,a
      000202 EB               [12] 1560 	mov	a,r3
      000203 24r05            [12] 1561 	add	a,#_rxbuf
      000205 FF               [12] 1562 	mov	r7,a
      000206 EC               [12] 1563 	mov	a,r4
      000207 34s00            [12] 1564 	addc	a,#(_rxbuf >> 8)
      000209 FE               [12] 1565 	mov	r6,a
      00020A 8F 82            [24] 1566 	mov	dpl,r7
      00020C 8E 83            [24] 1567 	mov	dph,r6
      00020E E0               [24] 1568 	movx	a,@dptr
      00020F FA               [12] 1569 	mov	r2,a
      000210 BA 43 02         [24] 1570 	cjne	r2,#0x43,00181$
      000213 80 03            [24] 1571 	sjmp	00182$
      000215                       1572 00181$:
      000215 02r02rEE         [24] 1573 	ljmp	00107$
      000218                       1574 00182$:
                                   1575 ;	../../../../core/dev/slip.c:169: if(begin < end && (end - begin) >= 6
      000218 90r00r03         [24] 1576 	mov	dptr,#_end
      00021B E0               [24] 1577 	movx	a,@dptr
      00021C FD               [12] 1578 	mov	r5,a
      00021D A3               [24] 1579 	inc	dptr
      00021E E0               [24] 1580 	movx	a,@dptr
      00021F FA               [12] 1581 	mov	r2,a
      000220 C3               [12] 1582 	clr	c
      000221 EB               [12] 1583 	mov	a,r3
      000222 9D               [12] 1584 	subb	a,r5
      000223 EC               [12] 1585 	mov	a,r4
      000224 9A               [12] 1586 	subb	a,r2
      000225 40 03            [24] 1587 	jc	00183$
      000227 02r02rEE         [24] 1588 	ljmp	00107$
      00022A                       1589 00183$:
      00022A ED               [12] 1590 	mov	a,r5
      00022B C3               [12] 1591 	clr	c
      00022C 9B               [12] 1592 	subb	a,r3
      00022D FB               [12] 1593 	mov	r3,a
      00022E EA               [12] 1594 	mov	a,r2
      00022F 9C               [12] 1595 	subb	a,r4
      000230 FC               [12] 1596 	mov	r4,a
      000231 C3               [12] 1597 	clr	c
      000232 EB               [12] 1598 	mov	a,r3
      000233 94 06            [12] 1599 	subb	a,#0x06
      000235 EC               [12] 1600 	mov	a,r4
      000236 94 00            [12] 1601 	subb	a,#0x00
      000238 50 03            [24] 1602 	jnc	00184$
      00023A 02r02rEE         [24] 1603 	ljmp	00107$
      00023D                       1604 00184$:
                                   1605 ;	../../../../core/dev/slip.c:170: && memcmp(&rxbuf[begin], "CLIENT", 6) == 0) {
      00023D 8F 03            [24] 1606 	mov	ar3,r7
      00023F 8E 04            [24] 1607 	mov	ar4,r6
      000241 7A 00            [12] 1608 	mov	r2,#0x00
      000243 74 06            [12] 1609 	mov	a,#0x06
      000245 C0 E0            [24] 1610 	push	acc
      000247 E4               [12] 1611 	clr	a
      000248 C0 E0            [24] 1612 	push	acc
      00024A 74r00            [12] 1613 	mov	a,#__str_0
      00024C C0 E0            [24] 1614 	push	acc
      00024E 74s00            [12] 1615 	mov	a,#(__str_0 >> 8)
      000250 C0 E0            [24] 1616 	push	acc
      000252 74 80            [12] 1617 	mov	a,#0x80
      000254 C0 E0            [24] 1618 	push	acc
      000256 8B 82            [24] 1619 	mov	dpl,r3
      000258 8C 83            [24] 1620 	mov	dph,r4
      00025A 8A F0            [24] 1621 	mov	b,r2
      00025C 78r00            [12] 1622 	mov	r0,#_memcmp
      00025E 79s00            [12] 1623 	mov	r1,#(_memcmp >> 8)
      000260 7As00            [12] 1624 	mov	r2,#(_memcmp >> 16)
      000262 12r00r00         [24] 1625 	lcall	__sdcc_banked_call
      000265 AB 82            [24] 1626 	mov	r3,dpl
      000267 AC 83            [24] 1627 	mov	r4,dph
      000269 E5 81            [12] 1628 	mov	a,sp
      00026B 24 FB            [12] 1629 	add	a,#0xfb
      00026D F5 81            [12] 1630 	mov	sp,a
      00026F EB               [12] 1631 	mov	a,r3
      000270 4C               [12] 1632 	orl	a,r4
      000271 60 03            [24] 1633 	jz	00185$
      000273 02r02rEE         [24] 1634 	ljmp	00107$
      000276                       1635 00185$:
                                   1636 ;	../../../../core/dev/slip.c:171: state = STATE_TWOPACKETS;	/* Interrupts do nothing. */
      000276 90r00r0A         [24] 1637 	mov	dptr,#_state
      000279 E4               [12] 1638 	clr	a
      00027A F0               [24] 1639 	movx	@dptr,a
                                   1640 ;	../../../../core/dev/slip.c:172: memset(&rxbuf[begin], 0x0, 6);
      00027B 90r00r01         [24] 1641 	mov	dptr,#_begin
      00027E E0               [24] 1642 	movx	a,@dptr
      00027F FB               [12] 1643 	mov	r3,a
      000280 A3               [24] 1644 	inc	dptr
      000281 E0               [24] 1645 	movx	a,@dptr
      000282 FC               [12] 1646 	mov	r4,a
      000283 EB               [12] 1647 	mov	a,r3
      000284 24r05            [12] 1648 	add	a,#_rxbuf
      000286 FB               [12] 1649 	mov	r3,a
      000287 EC               [12] 1650 	mov	a,r4
      000288 34s00            [12] 1651 	addc	a,#(_rxbuf >> 8)
      00028A FC               [12] 1652 	mov	r4,a
      00028B 7A 00            [12] 1653 	mov	r2,#0x00
      00028D 74 06            [12] 1654 	mov	a,#0x06
      00028F C0 E0            [24] 1655 	push	acc
      000291 E4               [12] 1656 	clr	a
      000292 C0 E0            [24] 1657 	push	acc
      000294 E4               [12] 1658 	clr	a
      000295 C0 E0            [24] 1659 	push	acc
      000297 8B 82            [24] 1660 	mov	dpl,r3
      000299 8C 83            [24] 1661 	mov	dph,r4
      00029B 8A F0            [24] 1662 	mov	b,r2
      00029D 78r00            [12] 1663 	mov	r0,#_memset
      00029F 79s00            [12] 1664 	mov	r1,#(_memset >> 8)
      0002A1 7As00            [12] 1665 	mov	r2,#(_memset >> 16)
      0002A3 12r00r00         [24] 1666 	lcall	__sdcc_banked_call
      0002A6 15 81            [12] 1667 	dec	sp
      0002A8 15 81            [12] 1668 	dec	sp
      0002AA 15 81            [12] 1669 	dec	sp
                                   1670 ;	../../../../core/dev/slip.c:174: rxbuf_init();
      0002AC 78rCF            [12] 1671 	mov	r0,#_rxbuf_init
      0002AE 79s01            [12] 1672 	mov	r1,#(_rxbuf_init >> 8)
      0002B0 7As00            [12] 1673 	mov	r2,#(_rxbuf_init >> 16)
      0002B2 12r00r00         [24] 1674 	lcall	__sdcc_banked_call
                                   1675 ;	../../../../core/dev/slip.c:176: for(i = 0; i < 13; i++) {
      0002B5 7B 00            [12] 1676 	mov	r3,#0x00
      0002B7 7C 00            [12] 1677 	mov	r4,#0x00
      0002B9                       1678 00123$:
                                   1679 ;	../../../../core/dev/slip.c:177: slip_arch_writeb("CLIENTSERVER\300"[i]);
      0002B9 EB               [12] 1680 	mov	a,r3
      0002BA 24r07            [12] 1681 	add	a,#__str_1
      0002BC F5 82            [12] 1682 	mov	dpl,a
      0002BE EC               [12] 1683 	mov	a,r4
      0002BF 34s00            [12] 1684 	addc	a,#(__str_1 >> 8)
      0002C1 F5 83            [12] 1685 	mov	dph,a
      0002C3 E4               [12] 1686 	clr	a
      0002C4 93               [24] 1687 	movc	a,@a+dptr
      0002C5 F5 82            [12] 1688 	mov	dpl,a
      0002C7 C0 04            [24] 1689 	push	ar4
      0002C9 C0 03            [24] 1690 	push	ar3
      0002CB 78r00            [12] 1691 	mov	r0,#_slip_arch_writeb
      0002CD 79s00            [12] 1692 	mov	r1,#(_slip_arch_writeb >> 8)
      0002CF 7As00            [12] 1693 	mov	r2,#(_slip_arch_writeb >> 16)
      0002D1 12r00r00         [24] 1694 	lcall	__sdcc_banked_call
      0002D4 D0 03            [24] 1695 	pop	ar3
      0002D6 D0 04            [24] 1696 	pop	ar4
                                   1697 ;	../../../../core/dev/slip.c:176: for(i = 0; i < 13; i++) {
      0002D8 0B               [12] 1698 	inc	r3
      0002D9 BB 00 01         [24] 1699 	cjne	r3,#0x00,00186$
      0002DC 0C               [12] 1700 	inc	r4
      0002DD                       1701 00186$:
      0002DD C3               [12] 1702 	clr	c
      0002DE EB               [12] 1703 	mov	a,r3
      0002DF 94 0D            [12] 1704 	subb	a,#0x0D
      0002E1 EC               [12] 1705 	mov	a,r4
      0002E2 64 80            [12] 1706 	xrl	a,#0x80
      0002E4 94 80            [12] 1707 	subb	a,#0x80
      0002E6 40 D1            [24] 1708 	jc	00123$
                                   1709 ;	../../../../core/dev/slip.c:179: return 0;
      0002E8 90 00 00         [24] 1710 	mov	dptr,#0x0000
      0002EB 02r04r6E         [24] 1711 	ljmp	00131$
      0002EE                       1712 00107$:
                                   1713 ;	../../../../core/dev/slip.c:213: if(begin != pkt_end) {
      0002EE 90r00r01         [24] 1714 	mov	dptr,#_begin
      0002F1 E0               [24] 1715 	movx	a,@dptr
      0002F2 FB               [12] 1716 	mov	r3,a
      0002F3 A3               [24] 1717 	inc	dptr
      0002F4 E0               [24] 1718 	movx	a,@dptr
      0002F5 FC               [12] 1719 	mov	r4,a
      0002F6 90r01r05         [24] 1720 	mov	dptr,#_pkt_end
      0002F9 E0               [24] 1721 	movx	a,@dptr
      0002FA FD               [12] 1722 	mov	r5,a
      0002FB A3               [24] 1723 	inc	dptr
      0002FC E0               [24] 1724 	movx	a,@dptr
      0002FD FA               [12] 1725 	mov	r2,a
      0002FE EB               [12] 1726 	mov	a,r3
      0002FF B5 05 07         [24] 1727 	cjne	a,ar5,00188$
      000302 EC               [12] 1728 	mov	a,r4
      000303 B5 02 03         [24] 1729 	cjne	a,ar2,00188$
      000306 02r04r6B         [24] 1730 	ljmp	00122$
      000309                       1731 00188$:
                                   1732 ;	../../../../core/dev/slip.c:216: if(begin < pkt_end) {
      000309 C3               [12] 1733 	clr	c
      00030A EB               [12] 1734 	mov	a,r3
      00030B 9D               [12] 1735 	subb	a,r5
      00030C EC               [12] 1736 	mov	a,r4
      00030D 9A               [12] 1737 	subb	a,r2
      00030E 50 69            [24] 1738 	jnc	00117$
                                   1739 ;	../../../../core/dev/slip.c:217: len = pkt_end - begin;
      000310 ED               [12] 1740 	mov	a,r5
      000311 C3               [12] 1741 	clr	c
      000312 9B               [12] 1742 	subb	a,r3
      000313 FF               [12] 1743 	mov	r7,a
      000314 EA               [12] 1744 	mov	a,r2
      000315 9C               [12] 1745 	subb	a,r4
      000316 FE               [12] 1746 	mov	r6,a
      000317 A8 81            [24] 1747 	mov	r0,sp
      000319 18               [12] 1748 	dec	r0
      00031A A6 07            [24] 1749 	mov	@r0,ar7
      00031C 08               [12] 1750 	inc	r0
      00031D A6 06            [24] 1751 	mov	@r0,ar6
                                   1752 ;	../../../../core/dev/slip.c:218: if(len > blen) {
      00031F A8 81            [24] 1753 	mov	r0,sp
      000321 18               [12] 1754 	dec	r0
      000322 E5 81            [12] 1755 	mov	a,sp
      000324 24 F7            [12] 1756 	add	a,#0xf7
      000326 F9               [12] 1757 	mov	r1,a
      000327 C3               [12] 1758 	clr	c
      000328 E7               [12] 1759 	mov	a,@r1
      000329 96               [12] 1760 	subb	a,@r0
      00032A 09               [12] 1761 	inc	r1
      00032B E7               [12] 1762 	mov	a,@r1
      00032C 08               [12] 1763 	inc	r0
      00032D 96               [12] 1764 	subb	a,@r0
      00032E 50 0A            [24] 1765 	jnc	00109$
                                   1766 ;	../../../../core/dev/slip.c:219: len = 0;
      000330 A8 81            [24] 1767 	mov	r0,sp
      000332 18               [12] 1768 	dec	r0
      000333 E4               [12] 1769 	clr	a
      000334 F6               [12] 1770 	mov	@r0,a
      000335 08               [12] 1771 	inc	r0
      000336 F6               [12] 1772 	mov	@r0,a
      000337 02r04r25         [24] 1773 	ljmp	00118$
      00033A                       1774 00109$:
                                   1775 ;	../../../../core/dev/slip.c:221: memcpy(outbuf, &rxbuf[begin], len);
      00033A EB               [12] 1776 	mov	a,r3
      00033B 24r05            [12] 1777 	add	a,#_rxbuf
      00033D FD               [12] 1778 	mov	r5,a
      00033E EC               [12] 1779 	mov	a,r4
      00033F 34s00            [12] 1780 	addc	a,#(_rxbuf >> 8)
      000341 FC               [12] 1781 	mov	r4,a
      000342 7B 00            [12] 1782 	mov	r3,#0x00
      000344 E5 81            [12] 1783 	mov	a,sp
      000346 24 FC            [12] 1784 	add	a,#0xfc
      000348 F8               [12] 1785 	mov	r0,a
      000349 86 02            [24] 1786 	mov	ar2,@r0
      00034B 08               [12] 1787 	inc	r0
      00034C 86 06            [24] 1788 	mov	ar6,@r0
      00034E 08               [12] 1789 	inc	r0
      00034F 86 07            [24] 1790 	mov	ar7,@r0
      000351 A8 81            [24] 1791 	mov	r0,sp
      000353 18               [12] 1792 	dec	r0
      000354 E6               [12] 1793 	mov	a,@r0
      000355 C0 E0            [24] 1794 	push	acc
      000357 08               [12] 1795 	inc	r0
      000358 E6               [12] 1796 	mov	a,@r0
      000359 C0 E0            [24] 1797 	push	acc
      00035B C0 05            [24] 1798 	push	ar5
      00035D C0 04            [24] 1799 	push	ar4
      00035F C0 03            [24] 1800 	push	ar3
      000361 8A 82            [24] 1801 	mov	dpl,r2
      000363 8E 83            [24] 1802 	mov	dph,r6
      000365 8F F0            [24] 1803 	mov	b,r7
      000367 78r00            [12] 1804 	mov	r0,#_memcpy
      000369 79s00            [12] 1805 	mov	r1,#(_memcpy >> 8)
      00036B 7As00            [12] 1806 	mov	r2,#(_memcpy >> 16)
      00036D 12r00r00         [24] 1807 	lcall	__sdcc_banked_call
      000370 E5 81            [12] 1808 	mov	a,sp
      000372 24 FB            [12] 1809 	add	a,#0xfb
      000374 F5 81            [12] 1810 	mov	sp,a
      000376 02r04r25         [24] 1811 	ljmp	00118$
      000379                       1812 00117$:
                                   1813 ;	../../../../core/dev/slip.c:224: len = (RX_BUFSIZE - begin) + (pkt_end - 0);
      000379 E4               [12] 1814 	clr	a
      00037A C3               [12] 1815 	clr	c
      00037B 9B               [12] 1816 	subb	a,r3
      00037C FE               [12] 1817 	mov	r6,a
      00037D 74 01            [12] 1818 	mov	a,#0x01
      00037F 9C               [12] 1819 	subb	a,r4
      000380 FF               [12] 1820 	mov	r7,a
      000381 ED               [12] 1821 	mov	a,r5
      000382 2E               [12] 1822 	add	a,r6
      000383 FE               [12] 1823 	mov	r6,a
      000384 EA               [12] 1824 	mov	a,r2
      000385 3F               [12] 1825 	addc	a,r7
      000386 FF               [12] 1826 	mov	r7,a
      000387 A8 81            [24] 1827 	mov	r0,sp
      000389 18               [12] 1828 	dec	r0
      00038A A6 06            [24] 1829 	mov	@r0,ar6
      00038C 08               [12] 1830 	inc	r0
      00038D A6 07            [24] 1831 	mov	@r0,ar7
                                   1832 ;	../../../../core/dev/slip.c:225: if(len > blen) {
      00038F A8 81            [24] 1833 	mov	r0,sp
      000391 18               [12] 1834 	dec	r0
      000392 E5 81            [12] 1835 	mov	a,sp
      000394 24 F7            [12] 1836 	add	a,#0xf7
      000396 F9               [12] 1837 	mov	r1,a
      000397 C3               [12] 1838 	clr	c
      000398 E7               [12] 1839 	mov	a,@r1
      000399 96               [12] 1840 	subb	a,@r0
      00039A 09               [12] 1841 	inc	r1
      00039B E7               [12] 1842 	mov	a,@r1
      00039C 08               [12] 1843 	inc	r0
      00039D 96               [12] 1844 	subb	a,@r0
      00039E 50 0A            [24] 1845 	jnc	00114$
                                   1846 ;	../../../../core/dev/slip.c:226: len = 0;
      0003A0 A8 81            [24] 1847 	mov	r0,sp
      0003A2 18               [12] 1848 	dec	r0
      0003A3 E4               [12] 1849 	clr	a
      0003A4 F6               [12] 1850 	mov	@r0,a
      0003A5 08               [12] 1851 	inc	r0
      0003A6 F6               [12] 1852 	mov	@r0,a
      0003A7 02r04r25         [24] 1853 	ljmp	00118$
      0003AA                       1854 00114$:
                                   1855 ;	../../../../core/dev/slip.c:229: for(i = begin; i < RX_BUFSIZE; i++) {
      0003AA 8B 06            [24] 1856 	mov	ar6,r3
      0003AC 8C 07            [24] 1857 	mov	ar7,r4
      0003AE E5 81            [12] 1858 	mov	a,sp
      0003B0 24 FC            [12] 1859 	add	a,#0xfc
      0003B2 F8               [12] 1860 	mov	r0,a
      0003B3 86 03            [24] 1861 	mov	ar3,@r0
      0003B5 08               [12] 1862 	inc	r0
      0003B6 86 04            [24] 1863 	mov	ar4,@r0
      0003B8 08               [12] 1864 	inc	r0
      0003B9 86 05            [24] 1865 	mov	ar5,@r0
      0003BB                       1866 00126$:
      0003BB 74 FF            [12] 1867 	mov	a,#0x100 - 0x01
      0003BD 2F               [12] 1868 	add	a,r7
      0003BE 40 21            [24] 1869 	jc	00111$
                                   1870 ;	../../../../core/dev/slip.c:230: *outbuf++ = rxbuf[i];
      0003C0 EE               [12] 1871 	mov	a,r6
      0003C1 24r05            [12] 1872 	add	a,#_rxbuf
      0003C3 F5 82            [12] 1873 	mov	dpl,a
      0003C5 EF               [12] 1874 	mov	a,r7
      0003C6 34s00            [12] 1875 	addc	a,#(_rxbuf >> 8)
      0003C8 F5 83            [12] 1876 	mov	dph,a
      0003CA E0               [24] 1877 	movx	a,@dptr
      0003CB FA               [12] 1878 	mov	r2,a
      0003CC 8B 82            [24] 1879 	mov	dpl,r3
      0003CE 8C 83            [24] 1880 	mov	dph,r4
      0003D0 8D F0            [24] 1881 	mov	b,r5
      0003D2 12r00r00         [24] 1882 	lcall	__gptrput
      0003D5 A3               [24] 1883 	inc	dptr
      0003D6 AB 82            [24] 1884 	mov	r3,dpl
      0003D8 AC 83            [24] 1885 	mov	r4,dph
                                   1886 ;	../../../../core/dev/slip.c:229: for(i = begin; i < RX_BUFSIZE; i++) {
      0003DA 0E               [12] 1887 	inc	r6
      0003DB BE 00 DD         [24] 1888 	cjne	r6,#0x00,00126$
      0003DE 0F               [12] 1889 	inc	r7
      0003DF 80 DA            [24] 1890 	sjmp	00126$
      0003E1                       1891 00111$:
                                   1892 ;	../../../../core/dev/slip.c:232: for(i = 0; i < pkt_end; i++) {
      0003E1 8B 07            [24] 1893 	mov	ar7,r3
      0003E3 8C 06            [24] 1894 	mov	ar6,r4
      0003E5 7B 00            [12] 1895 	mov	r3,#0x00
      0003E7 7C 00            [12] 1896 	mov	r4,#0x00
      0003E9                       1897 00129$:
      0003E9 C0 07            [24] 1898 	push	ar7
      0003EB C0 06            [24] 1899 	push	ar6
      0003ED C0 05            [24] 1900 	push	ar5
      0003EF 90r01r05         [24] 1901 	mov	dptr,#_pkt_end
      0003F2 E0               [24] 1902 	movx	a,@dptr
      0003F3 FA               [12] 1903 	mov	r2,a
      0003F4 A3               [24] 1904 	inc	dptr
      0003F5 E0               [24] 1905 	movx	a,@dptr
      0003F6 FF               [12] 1906 	mov	r7,a
      0003F7 C3               [12] 1907 	clr	c
      0003F8 EB               [12] 1908 	mov	a,r3
      0003F9 9A               [12] 1909 	subb	a,r2
      0003FA EC               [12] 1910 	mov	a,r4
      0003FB 9F               [12] 1911 	subb	a,r7
      0003FC D0 05            [24] 1912 	pop	ar5
      0003FE D0 06            [24] 1913 	pop	ar6
      000400 D0 07            [24] 1914 	pop	ar7
      000402 50 21            [24] 1915 	jnc	00118$
                                   1916 ;	../../../../core/dev/slip.c:233: *outbuf++ = rxbuf[i];
      000404 EB               [12] 1917 	mov	a,r3
      000405 24r05            [12] 1918 	add	a,#_rxbuf
      000407 F5 82            [12] 1919 	mov	dpl,a
      000409 EC               [12] 1920 	mov	a,r4
      00040A 34s00            [12] 1921 	addc	a,#(_rxbuf >> 8)
      00040C F5 83            [12] 1922 	mov	dph,a
      00040E E0               [24] 1923 	movx	a,@dptr
      00040F FA               [12] 1924 	mov	r2,a
      000410 8F 82            [24] 1925 	mov	dpl,r7
      000412 8E 83            [24] 1926 	mov	dph,r6
      000414 8D F0            [24] 1927 	mov	b,r5
      000416 12r00r00         [24] 1928 	lcall	__gptrput
      000419 A3               [24] 1929 	inc	dptr
      00041A AF 82            [24] 1930 	mov	r7,dpl
      00041C AE 83            [24] 1931 	mov	r6,dph
                                   1932 ;	../../../../core/dev/slip.c:232: for(i = 0; i < pkt_end; i++) {
      00041E 0B               [12] 1933 	inc	r3
      00041F BB 00 C7         [24] 1934 	cjne	r3,#0x00,00129$
      000422 0C               [12] 1935 	inc	r4
      000423 80 C4            [24] 1936 	sjmp	00129$
      000425                       1937 00118$:
                                   1938 ;	../../../../core/dev/slip.c:239: begin = pkt_end;
      000425 90r01r05         [24] 1939 	mov	dptr,#_pkt_end
      000428 E0               [24] 1940 	movx	a,@dptr
      000429 FE               [12] 1941 	mov	r6,a
      00042A A3               [24] 1942 	inc	dptr
      00042B E0               [24] 1943 	movx	a,@dptr
      00042C FF               [12] 1944 	mov	r7,a
      00042D 90r00r01         [24] 1945 	mov	dptr,#_begin
      000430 EE               [12] 1946 	mov	a,r6
      000431 F0               [24] 1947 	movx	@dptr,a
      000432 EF               [12] 1948 	mov	a,r7
      000433 A3               [24] 1949 	inc	dptr
      000434 F0               [24] 1950 	movx	@dptr,a
                                   1951 ;	../../../../core/dev/slip.c:240: if(state == STATE_TWOPACKETS) {
      000435 90r00r0A         [24] 1952 	mov	dptr,#_state
      000438 E0               [24] 1953 	movx	a,@dptr
      000439 FF               [12] 1954 	mov	r7,a
      00043A 70 25            [24] 1955 	jnz	00120$
                                   1956 ;	../../../../core/dev/slip.c:241: pkt_end = end;
      00043C 90r00r03         [24] 1957 	mov	dptr,#_end
      00043F E0               [24] 1958 	movx	a,@dptr
      000440 FE               [12] 1959 	mov	r6,a
      000441 A3               [24] 1960 	inc	dptr
      000442 E0               [24] 1961 	movx	a,@dptr
      000443 FF               [12] 1962 	mov	r7,a
      000444 90r01r05         [24] 1963 	mov	dptr,#_pkt_end
      000447 EE               [12] 1964 	mov	a,r6
      000448 F0               [24] 1965 	movx	@dptr,a
      000449 EF               [12] 1966 	mov	a,r7
      00044A A3               [24] 1967 	inc	dptr
      00044B F0               [24] 1968 	movx	@dptr,a
                                   1969 ;	../../../../core/dev/slip.c:242: state = STATE_OK;		/* Assume no bytes where lost! */
      00044C 90r00r0A         [24] 1970 	mov	dptr,#_state
      00044F 74 01            [12] 1971 	mov	a,#0x01
      000451 F0               [24] 1972 	movx	@dptr,a
                                   1973 ;	../../../../core/dev/slip.c:245: process_poll(&slip_process);
      000452 90r00r00         [24] 1974 	mov	dptr,#_slip_process
      000455 75 F0 00         [24] 1975 	mov	b,#0x00
      000458 78r00            [12] 1976 	mov	r0,#_process_poll
      00045A 79s00            [12] 1977 	mov	r1,#(_process_poll >> 8)
      00045C 7As00            [12] 1978 	mov	r2,#(_process_poll >> 16)
      00045E 12r00r00         [24] 1979 	lcall	__sdcc_banked_call
      000461                       1980 00120$:
                                   1981 ;	../../../../core/dev/slip.c:247: return len;
      000461 A8 81            [24] 1982 	mov	r0,sp
      000463 18               [12] 1983 	dec	r0
      000464 86 82            [24] 1984 	mov	dpl,@r0
      000466 08               [12] 1985 	inc	r0
      000467 86 83            [24] 1986 	mov	dph,@r0
      000469 80 03            [24] 1987 	sjmp	00131$
      00046B                       1988 00122$:
                                   1989 ;	../../../../core/dev/slip.c:250: return 0;
      00046B 90 00 00         [24] 1990 	mov	dptr,#0x0000
      00046E                       1991 00131$:
      00046E E5 81            [12] 1992 	mov	a,sp
      000470 24 FB            [12] 1993 	add	a,#0xFB
      000472 F5 81            [12] 1994 	mov	sp,a
      000474 02r00r00         [24] 1995 	ljmp	__sdcc_banked_ret
                                   1996 ;------------------------------------------------------------
                                   1997 ;Allocation info for local variables in function 'process_thread_slip_process'
                                   1998 ;------------------------------------------------------------
                                   1999 ;ev                        Allocated to stack - sp -3
                                   2000 ;data                      Allocated to stack - sp -6
                                   2001 ;process_pt                Allocated to registers r5 r6 r7 
                                   2002 ;PT_YIELD_FLAG             Allocated to registers r4 
                                   2003 ;------------------------------------------------------------
                                   2004 ;	../../../../core/dev/slip.c:253: PROCESS_THREAD(slip_process, ev, data)
                                   2005 ;	-----------------------------------------
                                   2006 ;	 function process_thread_slip_process
                                   2007 ;	-----------------------------------------
      000477                       2008 _process_thread_slip_process:
                                   2009 ;	../../../../core/dev/slip.c:255: PROCESS_BEGIN();
      000477 AD 82            [24] 2010 	mov	r5,dpl
      000479 AE 83            [24] 2011 	mov	r6,dph
      00047B AF F0            [24] 2012 	mov	r7,b
      00047D 7C 01            [12] 2013 	mov	r4,#0x01
      00047F 12r00r00         [24] 2014 	lcall	__gptrget
      000482 FA               [12] 2015 	mov	r2,a
      000483 A3               [24] 2016 	inc	dptr
      000484 12r00r00         [24] 2017 	lcall	__gptrget
      000487 FB               [12] 2018 	mov	r3,a
      000488 BA 00 05         [24] 2019 	cjne	r2,#0x00,00137$
      00048B BB 00 02         [24] 2020 	cjne	r3,#0x00,00137$
      00048E 80 0B            [24] 2021 	sjmp	00101$
      000490                       2022 00137$:
      000490 BA 04 05         [24] 2023 	cjne	r2,#0x04,00138$
      000493 BB 01 02         [24] 2024 	cjne	r3,#0x01,00138$
      000496 80 2B            [24] 2025 	sjmp	00102$
      000498                       2026 00138$:
      000498 02r05r5C         [24] 2027 	ljmp	00116$
      00049B                       2028 00101$:
                                   2029 ;	../../../../core/dev/slip.c:257: rxbuf_init();
      00049B C0 07            [24] 2030 	push	ar7
      00049D C0 06            [24] 2031 	push	ar6
      00049F C0 05            [24] 2032 	push	ar5
      0004A1 78rCF            [12] 2033 	mov	r0,#_rxbuf_init
      0004A3 79s01            [12] 2034 	mov	r1,#(_rxbuf_init >> 8)
      0004A5 7As00            [12] 2035 	mov	r2,#(_rxbuf_init >> 16)
      0004A7 12r00r00         [24] 2036 	lcall	__sdcc_banked_call
      0004AA D0 05            [24] 2037 	pop	ar5
      0004AC D0 06            [24] 2038 	pop	ar6
      0004AE D0 07            [24] 2039 	pop	ar7
                                   2040 ;	../../../../core/dev/slip.c:259: while(1) {
      0004B0                       2041 00114$:
                                   2042 ;	../../../../core/dev/slip.c:260: PROCESS_YIELD_UNTIL(ev == PROCESS_EVENT_POLL);
      0004B0 7C 00            [12] 2043 	mov	r4,#0x00
      0004B2 8D 82            [24] 2044 	mov	dpl,r5
      0004B4 8E 83            [24] 2045 	mov	dph,r6
      0004B6 8F F0            [24] 2046 	mov	b,r7
      0004B8 74 04            [12] 2047 	mov	a,#0x04
      0004BA 12r00r00         [24] 2048 	lcall	__gptrput
      0004BD A3               [24] 2049 	inc	dptr
      0004BE 74 01            [12] 2050 	mov	a,#0x01
      0004C0 12r00r00         [24] 2051 	lcall	__gptrput
      0004C3                       2052 00102$:
      0004C3 EC               [12] 2053 	mov	a,r4
      0004C4 60 0A            [24] 2054 	jz	00103$
      0004C6 E5 81            [12] 2055 	mov	a,sp
      0004C8 24 FD            [12] 2056 	add	a,#0xfd
      0004CA F8               [12] 2057 	mov	r0,a
      0004CB B6 82 02         [24] 2058 	cjne	@r0,#0x82,00140$
      0004CE 80 06            [24] 2059 	sjmp	00107$
      0004D0                       2060 00140$:
      0004D0                       2061 00103$:
      0004D0 75 82 01         [24] 2062 	mov	dpl,#0x01
      0004D3 02r05r6E         [24] 2063 	ljmp	00117$
      0004D6                       2064 00107$:
                                   2065 ;	../../../../core/dev/slip.c:262: slip_active = 1;
      0004D6 90r00r00         [24] 2066 	mov	dptr,#_slip_active
      0004D9 74 01            [12] 2067 	mov	a,#0x01
      0004DB F0               [24] 2068 	movx	@dptr,a
                                   2069 ;	../../../../core/dev/slip.c:265: uip_len = slip_poll_handler(&uip_buf[UIP_LLH_LEN],
      0004DC C0 07            [24] 2070 	push	ar7
      0004DE C0 06            [24] 2071 	push	ar6
      0004E0 C0 05            [24] 2072 	push	ar5
      0004E2 74 F0            [12] 2073 	mov	a,#0xF0
      0004E4 C0 E0            [24] 2074 	push	acc
      0004E6 E4               [12] 2075 	clr	a
      0004E7 C0 E0            [24] 2076 	push	acc
      0004E9 90r00r00         [24] 2077 	mov	dptr,#_uip_aligned_buf
      0004EC 75 F0 00         [24] 2078 	mov	b,#0x00
      0004EF 78rF0            [12] 2079 	mov	r0,#_slip_poll_handler
      0004F1 79s01            [12] 2080 	mov	r1,#(_slip_poll_handler >> 8)
      0004F3 7As00            [12] 2081 	mov	r2,#(_slip_poll_handler >> 16)
      0004F5 12r00r00         [24] 2082 	lcall	__sdcc_banked_call
      0004F8 AB 82            [24] 2083 	mov	r3,dpl
      0004FA AC 83            [24] 2084 	mov	r4,dph
      0004FC 15 81            [12] 2085 	dec	sp
      0004FE 15 81            [12] 2086 	dec	sp
      000500 D0 05            [24] 2087 	pop	ar5
      000502 D0 06            [24] 2088 	pop	ar6
      000504 D0 07            [24] 2089 	pop	ar7
      000506 90r00r00         [24] 2090 	mov	dptr,#_uip_len
      000509 EB               [12] 2091 	mov	a,r3
      00050A F0               [24] 2092 	movx	@dptr,a
      00050B EC               [12] 2093 	mov	a,r4
      00050C A3               [24] 2094 	inc	dptr
      00050D F0               [24] 2095 	movx	@dptr,a
                                   2096 ;	../../../../core/dev/slip.c:302: if(uip_len > 0) {
      00050E EB               [12] 2097 	mov	a,r3
      00050F 4C               [12] 2098 	orl	a,r4
      000510 60 9E            [24] 2099 	jz	00114$
                                   2100 ;	../../../../core/dev/slip.c:303: if(input_callback) {
      000512 90r00r0B         [24] 2101 	mov	dptr,#_input_callback
      000515 E0               [24] 2102 	movx	a,@dptr
      000516 FA               [12] 2103 	mov	r2,a
      000517 A3               [24] 2104 	inc	dptr
      000518 E0               [24] 2105 	movx	a,@dptr
      000519 FB               [12] 2106 	mov	r3,a
      00051A A3               [24] 2107 	inc	dptr
      00051B E0               [24] 2108 	movx	a,@dptr
      00051C FC               [12] 2109 	mov	r4,a
      00051D EA               [12] 2110 	mov	a,r2
      00051E 4B               [12] 2111 	orl	a,r3
      00051F 60 23            [24] 2112 	jz	00110$
                                   2113 ;	../../../../core/dev/slip.c:304: input_callback();
      000521 C0 07            [24] 2114 	push	ar7
      000523 C0 06            [24] 2115 	push	ar6
      000525 C0 05            [24] 2116 	push	ar5
      000527 90r00r0B         [24] 2117 	mov	dptr,#_input_callback
      00052A E0               [24] 2118 	movx	a,@dptr
      00052B C0 E0            [24] 2119 	push	acc
      00052D A3               [24] 2120 	inc	dptr
      00052E E0               [24] 2121 	movx	a,@dptr
      00052F C0 E0            [24] 2122 	push	acc
      000531 A3               [24] 2123 	inc	dptr
      000532 E0               [24] 2124 	movx	a,@dptr
      000533 C0 E0            [24] 2125 	push	acc
      000535 D0 02            [24] 2126 	pop	ar2
      000537 D0 01            [24] 2127 	pop	ar1
      000539 D0 00            [24] 2128 	pop	ar0
      00053B 12r00r00         [24] 2129 	lcall	__sdcc_banked_call
      00053E D0 05            [24] 2130 	pop	ar5
      000540 D0 06            [24] 2131 	pop	ar6
      000542 D0 07            [24] 2132 	pop	ar7
      000544                       2133 00110$:
                                   2134 ;	../../../../core/dev/slip.c:309: tcpip_input();
      000544 C0 07            [24] 2135 	push	ar7
      000546 C0 06            [24] 2136 	push	ar6
      000548 C0 05            [24] 2137 	push	ar5
      00054A 78r00            [12] 2138 	mov	r0,#_tcpip_input
      00054C 79s00            [12] 2139 	mov	r1,#(_tcpip_input >> 8)
      00054E 7As00            [12] 2140 	mov	r2,#(_tcpip_input >> 16)
      000550 12r00r00         [24] 2141 	lcall	__sdcc_banked_call
      000553 D0 05            [24] 2142 	pop	ar5
      000555 D0 06            [24] 2143 	pop	ar6
      000557 D0 07            [24] 2144 	pop	ar7
      000559 02r04rB0         [24] 2145 	ljmp	00114$
                                   2146 ;	../../../../core/dev/slip.c:315: PROCESS_END();
      00055C                       2147 00116$:
      00055C 8D 82            [24] 2148 	mov	dpl,r5
      00055E 8E 83            [24] 2149 	mov	dph,r6
      000560 8F F0            [24] 2150 	mov	b,r7
      000562 E4               [12] 2151 	clr	a
      000563 12r00r00         [24] 2152 	lcall	__gptrput
      000566 A3               [24] 2153 	inc	dptr
      000567 E4               [12] 2154 	clr	a
      000568 12r00r00         [24] 2155 	lcall	__gptrput
      00056B 75 82 03         [24] 2156 	mov	dpl,#0x03
      00056E                       2157 00117$:
      00056E 02r00r00         [24] 2158 	ljmp	__sdcc_banked_ret
                                   2159 ;------------------------------------------------------------
                                   2160 ;Allocation info for local variables in function 'slip_input_byte'
                                   2161 ;------------------------------------------------------------
                                   2162 ;c                         Allocated to registers r7 
                                   2163 ;next                      Allocated to registers r3 r4 
                                   2164 ;sloc0                     Allocated to stack - sp -1
                                   2165 ;------------------------------------------------------------
                                   2166 ;	../../../../core/dev/slip.c:319: slip_input_byte(unsigned char c)
                                   2167 ;	-----------------------------------------
                                   2168 ;	 function slip_input_byte
                                   2169 ;	-----------------------------------------
      000571                       2170 _slip_input_byte:
      000571 05 81            [12] 2171 	inc	sp
      000573 05 81            [12] 2172 	inc	sp
      000575 AF 82            [24] 2173 	mov	r7,dpl
                                   2174 ;	../../../../core/dev/slip.c:321: switch(state) {
      000577 90r00r0A         [24] 2175 	mov	dptr,#_state
      00057A E0               [24] 2176 	movx	a,@dptr
      00057B FE               [12] 2177 	mov  r6,a
      00057C 24 FC            [12] 2178 	add	a,#0xff - 0x03
      00057E 50 03            [24] 2179 	jnc	00169$
      000580 02r06r51         [24] 2180 	ljmp	00123$
      000583                       2181 00169$:
      000583 EE               [12] 2182 	mov	a,r6
      000584 2E               [12] 2183 	add	a,r6
      000585 2E               [12] 2184 	add	a,r6
      000586 90r05r8A         [24] 2185 	mov	dptr,#00170$
      000589 73               [24] 2186 	jmp	@a+dptr
      00058A                       2187 00170$:
      00058A 02r05rA2         [24] 2188 	ljmp	00104$
      00058D 02r05rDB         [24] 2189 	ljmp	00112$
      000590 02r05rA8         [24] 2190 	ljmp	00105$
                                   2191 ;	../../../../core/dev/slip.c:322: case STATE_RUBBISH:
                                   2192 ;	../../../../core/dev/slip.c:323: if(c == SLIP_END) {
      000593 BF C0 06         [24] 2193 	cjne	r7,#0xC0,00103$
                                   2194 ;	../../../../core/dev/slip.c:324: state = STATE_OK;
      000596 90r00r0A         [24] 2195 	mov	dptr,#_state
      000599 74 01            [12] 2196 	mov	a,#0x01
      00059B F0               [24] 2197 	movx	@dptr,a
      00059C                       2198 00103$:
                                   2199 ;	../../../../core/dev/slip.c:326: return 0;
      00059C 90 00 00         [24] 2200 	mov	dptr,#0x0000
      00059F 02r06rF2         [24] 2201 	ljmp	00131$
                                   2202 ;	../../../../core/dev/slip.c:328: case STATE_TWOPACKETS:       /* Two packets are already buffered! */
      0005A2                       2203 00104$:
                                   2204 ;	../../../../core/dev/slip.c:329: return 0;
      0005A2 90 00 00         [24] 2205 	mov	dptr,#0x0000
      0005A5 02r06rF2         [24] 2206 	ljmp	00131$
                                   2207 ;	../../../../core/dev/slip.c:331: case STATE_ESC:
      0005A8                       2208 00105$:
                                   2209 ;	../../../../core/dev/slip.c:332: if(c == SLIP_ESC_END) {
      0005A8 BF DC 04         [24] 2210 	cjne	r7,#0xDC,00110$
                                   2211 ;	../../../../core/dev/slip.c:333: c = SLIP_END;
      0005AB 7F C0            [12] 2212 	mov	r7,#0xC0
      0005AD 80 23            [24] 2213 	sjmp	00111$
      0005AF                       2214 00110$:
                                   2215 ;	../../../../core/dev/slip.c:334: } else if(c == SLIP_ESC_ESC) {
      0005AF BF DD 04         [24] 2216 	cjne	r7,#0xDD,00107$
                                   2217 ;	../../../../core/dev/slip.c:335: c = SLIP_ESC;
      0005B2 7F DB            [12] 2218 	mov	r7,#0xDB
      0005B4 80 1C            [24] 2219 	sjmp	00111$
      0005B6                       2220 00107$:
                                   2221 ;	../../../../core/dev/slip.c:337: state = STATE_RUBBISH;
      0005B6 90r00r0A         [24] 2222 	mov	dptr,#_state
      0005B9 74 03            [12] 2223 	mov	a,#0x03
      0005BB F0               [24] 2224 	movx	@dptr,a
                                   2225 ;	../../../../core/dev/slip.c:339: end = pkt_end;		/* remove rubbish */
      0005BC 90r01r05         [24] 2226 	mov	dptr,#_pkt_end
      0005BF E0               [24] 2227 	movx	a,@dptr
      0005C0 FD               [12] 2228 	mov	r5,a
      0005C1 A3               [24] 2229 	inc	dptr
      0005C2 E0               [24] 2230 	movx	a,@dptr
      0005C3 FE               [12] 2231 	mov	r6,a
      0005C4 90r00r03         [24] 2232 	mov	dptr,#_end
      0005C7 ED               [12] 2233 	mov	a,r5
      0005C8 F0               [24] 2234 	movx	@dptr,a
      0005C9 EE               [12] 2235 	mov	a,r6
      0005CA A3               [24] 2236 	inc	dptr
      0005CB F0               [24] 2237 	movx	@dptr,a
                                   2238 ;	../../../../core/dev/slip.c:340: return 0;
      0005CC 90 00 00         [24] 2239 	mov	dptr,#0x0000
      0005CF 02r06rF2         [24] 2240 	ljmp	00131$
      0005D2                       2241 00111$:
                                   2242 ;	../../../../core/dev/slip.c:342: state = STATE_OK;
      0005D2 90r00r0A         [24] 2243 	mov	dptr,#_state
      0005D5 74 01            [12] 2244 	mov	a,#0x01
      0005D7 F0               [24] 2245 	movx	@dptr,a
                                   2246 ;	../../../../core/dev/slip.c:343: break;
      0005D8 02r06r51         [24] 2247 	ljmp	00123$
                                   2248 ;	../../../../core/dev/slip.c:345: case STATE_OK:
      0005DB                       2249 00112$:
                                   2250 ;	../../../../core/dev/slip.c:346: if(c == SLIP_ESC) {
      0005DB BF DB 0C         [24] 2251 	cjne	r7,#0xDB,00121$
                                   2252 ;	../../../../core/dev/slip.c:347: state = STATE_ESC;
      0005DE 90r00r0A         [24] 2253 	mov	dptr,#_state
      0005E1 74 02            [12] 2254 	mov	a,#0x02
      0005E3 F0               [24] 2255 	movx	@dptr,a
                                   2256 ;	../../../../core/dev/slip.c:348: return 0;
      0005E4 90 00 00         [24] 2257 	mov	dptr,#0x0000
      0005E7 02r06rF2         [24] 2258 	ljmp	00131$
      0005EA                       2259 00121$:
                                   2260 ;	../../../../core/dev/slip.c:349: } else if(c == SLIP_END) {
      0005EA BF C0 64         [24] 2261 	cjne	r7,#0xC0,00123$
                                   2262 ;	../../../../core/dev/slip.c:355: if(end != pkt_end) {	/* Non zero length. */
      0005ED 90r00r03         [24] 2263 	mov	dptr,#_end
      0005F0 E0               [24] 2264 	movx	a,@dptr
      0005F1 FD               [12] 2265 	mov	r5,a
      0005F2 A3               [24] 2266 	inc	dptr
      0005F3 E0               [24] 2267 	movx	a,@dptr
      0005F4 FE               [12] 2268 	mov	r6,a
      0005F5 90r01r05         [24] 2269 	mov	dptr,#_pkt_end
      0005F8 E0               [24] 2270 	movx	a,@dptr
      0005F9 FB               [12] 2271 	mov	r3,a
      0005FA A3               [24] 2272 	inc	dptr
      0005FB E0               [24] 2273 	movx	a,@dptr
      0005FC FC               [12] 2274 	mov	r4,a
      0005FD ED               [12] 2275 	mov	a,r5
      0005FE B5 03 06         [24] 2276 	cjne	a,ar3,00181$
      000601 EE               [12] 2277 	mov	a,r6
      000602 B5 04 02         [24] 2278 	cjne	a,ar4,00181$
      000605 80 44            [24] 2279 	sjmp	00117$
      000607                       2280 00181$:
                                   2281 ;	../../../../core/dev/slip.c:356: if(begin == pkt_end) {	/* None buffered. */
      000607 C0 05            [24] 2282 	push	ar5
      000609 C0 06            [24] 2283 	push	ar6
      00060B 90r00r01         [24] 2284 	mov	dptr,#_begin
      00060E E0               [24] 2285 	movx	a,@dptr
      00060F FA               [12] 2286 	mov	r2,a
      000610 A3               [24] 2287 	inc	dptr
      000611 E0               [24] 2288 	movx	a,@dptr
      000612 FE               [12] 2289 	mov	r6,a
      000613 EA               [12] 2290 	mov	a,r2
      000614 B5 03 06         [24] 2291 	cjne	a,ar3,00182$
      000617 EE               [12] 2292 	mov	a,r6
      000618 B5 04 02         [24] 2293 	cjne	a,ar4,00182$
      00061B 80 06            [24] 2294 	sjmp	00183$
      00061D                       2295 00182$:
      00061D D0 06            [24] 2296 	pop	ar6
      00061F D0 05            [24] 2297 	pop	ar5
      000621 80 0E            [24] 2298 	sjmp	00114$
      000623                       2299 00183$:
      000623 D0 06            [24] 2300 	pop	ar6
      000625 D0 05            [24] 2301 	pop	ar5
                                   2302 ;	../../../../core/dev/slip.c:357: pkt_end = end;
      000627 90r01r05         [24] 2303 	mov	dptr,#_pkt_end
      00062A ED               [12] 2304 	mov	a,r5
      00062B F0               [24] 2305 	movx	@dptr,a
      00062C EE               [12] 2306 	mov	a,r6
      00062D A3               [24] 2307 	inc	dptr
      00062E F0               [24] 2308 	movx	@dptr,a
      00062F 80 05            [24] 2309 	sjmp	00115$
      000631                       2310 00114$:
                                   2311 ;	../../../../core/dev/slip.c:359: state = STATE_TWOPACKETS;
      000631 90r00r0A         [24] 2312 	mov	dptr,#_state
      000634 E4               [12] 2313 	clr	a
      000635 F0               [24] 2314 	movx	@dptr,a
      000636                       2315 00115$:
                                   2316 ;	../../../../core/dev/slip.c:362: process_poll(&slip_process);
      000636 90r00r00         [24] 2317 	mov	dptr,#_slip_process
      000639 75 F0 00         [24] 2318 	mov	b,#0x00
      00063C 78r00            [12] 2319 	mov	r0,#_process_poll
      00063E 79s00            [12] 2320 	mov	r1,#(_process_poll >> 8)
      000640 7As00            [12] 2321 	mov	r2,#(_process_poll >> 16)
      000642 12r00r00         [24] 2322 	lcall	__sdcc_banked_call
                                   2323 ;	../../../../core/dev/slip.c:363: return 1;
      000645 90 00 01         [24] 2324 	mov	dptr,#0x0001
      000648 02r06rF2         [24] 2325 	ljmp	00131$
      00064B                       2326 00117$:
                                   2327 ;	../../../../core/dev/slip.c:365: return 0;
      00064B 90 00 00         [24] 2328 	mov	dptr,#0x0000
      00064E 02r06rF2         [24] 2329 	ljmp	00131$
                                   2330 ;	../../../../core/dev/slip.c:368: }
      000651                       2331 00123$:
                                   2332 ;	../../../../core/dev/slip.c:373: next = end + 1;
      000651 90r00r03         [24] 2333 	mov	dptr,#_end
      000654 E0               [24] 2334 	movx	a,@dptr
      000655 FD               [12] 2335 	mov	r5,a
      000656 A3               [24] 2336 	inc	dptr
      000657 E0               [24] 2337 	movx	a,@dptr
      000658 FE               [12] 2338 	mov	r6,a
      000659 74 01            [12] 2339 	mov	a,#0x01
      00065B 2D               [12] 2340 	add	a,r5
      00065C FB               [12] 2341 	mov	r3,a
      00065D E4               [12] 2342 	clr	a
      00065E 3E               [12] 2343 	addc	a,r6
      00065F FC               [12] 2344 	mov	r4,a
                                   2345 ;	../../../../core/dev/slip.c:374: if(next == RX_BUFSIZE) {
      000660 BB 00 07         [24] 2346 	cjne	r3,#0x00,00125$
      000663 BC 01 04         [24] 2347 	cjne	r4,#0x01,00125$
                                   2348 ;	../../../../core/dev/slip.c:375: next = 0;
      000666 7B 00            [12] 2349 	mov	r3,#0x00
      000668 7C 00            [12] 2350 	mov	r4,#0x00
      00066A                       2351 00125$:
                                   2352 ;	../../../../core/dev/slip.c:377: if(next == begin) {		/* rxbuf is full */
      00066A C0 05            [24] 2353 	push	ar5
      00066C C0 06            [24] 2354 	push	ar6
      00066E 90r00r01         [24] 2355 	mov	dptr,#_begin
      000671 E0               [24] 2356 	movx	a,@dptr
      000672 FA               [12] 2357 	mov	r2,a
      000673 A3               [24] 2358 	inc	dptr
      000674 E0               [24] 2359 	movx	a,@dptr
      000675 FE               [12] 2360 	mov	r6,a
      000676 EB               [12] 2361 	mov	a,r3
      000677 B5 02 06         [24] 2362 	cjne	a,ar2,00186$
      00067A EC               [12] 2363 	mov	a,r4
      00067B B5 06 02         [24] 2364 	cjne	a,ar6,00186$
      00067E 80 06            [24] 2365 	sjmp	00187$
      000680                       2366 00186$:
      000680 D0 06            [24] 2367 	pop	ar6
      000682 D0 05            [24] 2368 	pop	ar5
      000684 80 27            [24] 2369 	sjmp	00127$
      000686                       2370 00187$:
      000686 D0 06            [24] 2371 	pop	ar6
      000688 D0 05            [24] 2372 	pop	ar5
                                   2373 ;	../../../../core/dev/slip.c:378: state = STATE_RUBBISH;
      00068A 90r00r0A         [24] 2374 	mov	dptr,#_state
      00068D 74 03            [12] 2375 	mov	a,#0x03
      00068F F0               [24] 2376 	movx	@dptr,a
                                   2377 ;	../../../../core/dev/slip.c:380: end = pkt_end;		/* remove rubbish */
      000690 90r01r05         [24] 2378 	mov	dptr,#_pkt_end
      000693 A8 81            [24] 2379 	mov	r0,sp
      000695 18               [12] 2380 	dec	r0
      000696 E0               [24] 2381 	movx	a,@dptr
      000697 F6               [12] 2382 	mov	@r0,a
      000698 A3               [24] 2383 	inc	dptr
      000699 E0               [24] 2384 	movx	a,@dptr
      00069A 08               [12] 2385 	inc	r0
      00069B F6               [12] 2386 	mov	@r0,a
      00069C A8 81            [24] 2387 	mov	r0,sp
      00069E 18               [12] 2388 	dec	r0
      00069F 90r00r03         [24] 2389 	mov	dptr,#_end
      0006A2 E6               [12] 2390 	mov	a,@r0
      0006A3 F0               [24] 2391 	movx	@dptr,a
      0006A4 08               [12] 2392 	inc	r0
      0006A5 E6               [12] 2393 	mov	a,@r0
      0006A6 A3               [24] 2394 	inc	dptr
      0006A7 F0               [24] 2395 	movx	@dptr,a
                                   2396 ;	../../../../core/dev/slip.c:381: return 0;
      0006A8 90 00 00         [24] 2397 	mov	dptr,#0x0000
      0006AB 80 45            [24] 2398 	sjmp	00131$
      0006AD                       2399 00127$:
                                   2400 ;	../../../../core/dev/slip.c:383: rxbuf[end] = c;
      0006AD ED               [12] 2401 	mov	a,r5
      0006AE 24r05            [12] 2402 	add	a,#_rxbuf
      0006B0 F5 82            [12] 2403 	mov	dpl,a
      0006B2 EE               [12] 2404 	mov	a,r6
      0006B3 34s00            [12] 2405 	addc	a,#(_rxbuf >> 8)
      0006B5 F5 83            [12] 2406 	mov	dph,a
      0006B7 EF               [12] 2407 	mov	a,r7
      0006B8 F0               [24] 2408 	movx	@dptr,a
                                   2409 ;	../../../../core/dev/slip.c:384: end = next;
      0006B9 90r00r03         [24] 2410 	mov	dptr,#_end
      0006BC EB               [12] 2411 	mov	a,r3
      0006BD F0               [24] 2412 	movx	@dptr,a
      0006BE EC               [12] 2413 	mov	a,r4
      0006BF A3               [24] 2414 	inc	dptr
      0006C0 F0               [24] 2415 	movx	@dptr,a
                                   2416 ;	../../../../core/dev/slip.c:388: if(c == 'T' && rxbuf[begin] == 'C') {
      0006C1 BF 54 2B         [24] 2417 	cjne	r7,#0x54,00129$
      0006C4 90r00r01         [24] 2418 	mov	dptr,#_begin
      0006C7 E0               [24] 2419 	movx	a,@dptr
      0006C8 FE               [12] 2420 	mov	r6,a
      0006C9 A3               [24] 2421 	inc	dptr
      0006CA E0               [24] 2422 	movx	a,@dptr
      0006CB FF               [12] 2423 	mov	r7,a
      0006CC EE               [12] 2424 	mov	a,r6
      0006CD 24r05            [12] 2425 	add	a,#_rxbuf
      0006CF F5 82            [12] 2426 	mov	dpl,a
      0006D1 EF               [12] 2427 	mov	a,r7
      0006D2 34s00            [12] 2428 	addc	a,#(_rxbuf >> 8)
      0006D4 F5 83            [12] 2429 	mov	dph,a
      0006D6 E0               [24] 2430 	movx	a,@dptr
      0006D7 FF               [12] 2431 	mov	r7,a
      0006D8 BF 43 14         [24] 2432 	cjne	r7,#0x43,00129$
                                   2433 ;	../../../../core/dev/slip.c:389: process_poll(&slip_process);
      0006DB 90r00r00         [24] 2434 	mov	dptr,#_slip_process
      0006DE 75 F0 00         [24] 2435 	mov	b,#0x00
      0006E1 78r00            [12] 2436 	mov	r0,#_process_poll
      0006E3 79s00            [12] 2437 	mov	r1,#(_process_poll >> 8)
      0006E5 7As00            [12] 2438 	mov	r2,#(_process_poll >> 16)
      0006E7 12r00r00         [24] 2439 	lcall	__sdcc_banked_call
                                   2440 ;	../../../../core/dev/slip.c:390: return 1;
      0006EA 90 00 01         [24] 2441 	mov	dptr,#0x0001
      0006ED 80 03            [24] 2442 	sjmp	00131$
      0006EF                       2443 00129$:
                                   2444 ;	../../../../core/dev/slip.c:393: return 0;
      0006EF 90 00 00         [24] 2445 	mov	dptr,#0x0000
      0006F2                       2446 00131$:
      0006F2 15 81            [12] 2447 	dec	sp
      0006F4 15 81            [12] 2448 	dec	sp
      0006F6 02r00r00         [24] 2449 	ljmp	__sdcc_banked_ret
                                   2450 	.area CSEG    (CODE)
                                   2451 	.area CONST   (CODE)
      000000                       2452 __str_0:
      000000 43 4C 49 45 4E 54     2453 	.ascii "CLIENT"
      000006 00                    2454 	.db 0x00
      000007                       2455 __str_1:
      000007 43 4C 49 45 4E 54 53  2456 	.ascii "CLIENTSERVER"
             45 52 56 45 52
      000013 C0                    2457 	.db 0xC0
      000014 00                    2458 	.db 0x00
                                   2459 	.area XINIT   (CODE)
      000000                       2460 __xinit__slip_process:
                                   2461 ; generic printIvalPtr
      000000 00 00 00              2462 	.byte #0x00,#0x00,#0x00
      000003r77s04s00              2463 	.byte _process_thread_slip_process,(_process_thread_slip_process >> 8),(_process_thread_slip_process >> 16)
      000006 00 00                 2464 	.byte #0x00,#0x00	; 0
      000008 00                    2465 	.db #0x00	; 0
      000009 00                    2466 	.db #0x00	; 0
      00000A                       2467 __xinit__state:
      00000A 00                    2468 	.db #0x00	; 0
      00000B                       2469 __xinit__input_callback:
      00000B 00 00 00              2470 	.byte #0x00,#0x00,#0x00
                                   2471 	.area CABS    (ABS,CODE)
