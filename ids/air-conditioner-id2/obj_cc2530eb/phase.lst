                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8804 (Aug  6 2013) (Linux)
                                      4 ; This file was generated Mon Aug 25 04:16:22 2014
                                      5 ;--------------------------------------------------------
                                      6 	.module phase
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _find_neighbor
                                     13 	.globl _queuebuf_free
                                     14 	.globl _queuebuf_to_packetbuf
                                     15 	.globl _queuebuf_new_from_packetbuf
                                     16 	.globl _ctimer_set
                                     17 	.globl _memb_free
                                     18 	.globl _memb_alloc
                                     19 	.globl _memb_init
                                     20 	.globl _list_item_next
                                     21 	.globl _list_remove
                                     22 	.globl _list_chop
                                     23 	.globl _list_push
                                     24 	.globl _list_head
                                     25 	.globl _list_init
                                     26 	.globl _timer_expired
                                     27 	.globl _timer_set
                                     28 	.globl _rimeaddr_cmp
                                     29 	.globl _rimeaddr_copy
                                     30 	.globl _ACTIVE
                                     31 	.globl _TX_BYTE
                                     32 	.globl _RX_BYTE
                                     33 	.globl _ERR
                                     34 	.globl _FE
                                     35 	.globl _SLAVE
                                     36 	.globl _RE
                                     37 	.globl _MODE
                                     38 	.globl _T3OVFIF
                                     39 	.globl _T3CH0IF
                                     40 	.globl _T3CH1IF
                                     41 	.globl _T4OVFIF
                                     42 	.globl _T4CH0IF
                                     43 	.globl _T4CH1IF
                                     44 	.globl _OVFIM
                                     45 	.globl _B_0
                                     46 	.globl _B_1
                                     47 	.globl _B_2
                                     48 	.globl _B_3
                                     49 	.globl _B_4
                                     50 	.globl _B_5
                                     51 	.globl _B_6
                                     52 	.globl _B_7
                                     53 	.globl _P2IF
                                     54 	.globl _UTX0IF
                                     55 	.globl _UTX1IF
                                     56 	.globl _P1IF
                                     57 	.globl _WDTIF
                                     58 	.globl _ACC_0
                                     59 	.globl _ACC_1
                                     60 	.globl _ACC_2
                                     61 	.globl _ACC_3
                                     62 	.globl _ACC_4
                                     63 	.globl _ACC_5
                                     64 	.globl _ACC_6
                                     65 	.globl _ACC_7
                                     66 	.globl _P
                                     67 	.globl _F1
                                     68 	.globl _OV
                                     69 	.globl _RS0
                                     70 	.globl _RS1
                                     71 	.globl _F0
                                     72 	.globl _AC
                                     73 	.globl _CY
                                     74 	.globl _DMAIF
                                     75 	.globl _T1IF
                                     76 	.globl _T2IF
                                     77 	.globl _T3IF
                                     78 	.globl _T4IF
                                     79 	.globl _P0IF
                                     80 	.globl _STIF
                                     81 	.globl _DMAIE
                                     82 	.globl _T1IE
                                     83 	.globl _T2IE
                                     84 	.globl _T3IE
                                     85 	.globl _T4IE
                                     86 	.globl _P0IE
                                     87 	.globl _RFERRIE
                                     88 	.globl _ADCIE
                                     89 	.globl _URX0IE
                                     90 	.globl _URX1IE
                                     91 	.globl _ENCIE
                                     92 	.globl _STIE
                                     93 	.globl _EA
                                     94 	.globl _P2_0
                                     95 	.globl _P2_1
                                     96 	.globl _P2_2
                                     97 	.globl _P2_3
                                     98 	.globl _P2_4
                                     99 	.globl _P2_5
                                    100 	.globl _P2_6
                                    101 	.globl _P2_7
                                    102 	.globl _ENCIF_0
                                    103 	.globl _ENCIF_1
                                    104 	.globl _P1_0
                                    105 	.globl _P1_1
                                    106 	.globl _P1_2
                                    107 	.globl _P1_3
                                    108 	.globl _P1_4
                                    109 	.globl _P1_5
                                    110 	.globl _P1_6
                                    111 	.globl _P1_7
                                    112 	.globl _IT0
                                    113 	.globl _RFERRIF
                                    114 	.globl _IT1
                                    115 	.globl _URX0IF
                                    116 	.globl _ADCIF
                                    117 	.globl _URX1IF
                                    118 	.globl _P0_0
                                    119 	.globl _P0_1
                                    120 	.globl _P0_2
                                    121 	.globl _P0_3
                                    122 	.globl _P0_4
                                    123 	.globl _P0_5
                                    124 	.globl _P0_6
                                    125 	.globl _P0_7
                                    126 	.globl _WDCTL
                                    127 	.globl _U1GCR
                                    128 	.globl _U1UCR
                                    129 	.globl _U1BAUD
                                    130 	.globl _U1DBUF
                                    131 	.globl _U1CSR
                                    132 	.globl _U0GCR
                                    133 	.globl _U0UCR
                                    134 	.globl _U0BAUD
                                    135 	.globl _U0DBUF
                                    136 	.globl _U0CSR
                                    137 	.globl _TIMIF
                                    138 	.globl _T4CC1
                                    139 	.globl _T4CCTL1
                                    140 	.globl _T4CC0
                                    141 	.globl _T4CCTL0
                                    142 	.globl _T4CTL
                                    143 	.globl _T4CNT
                                    144 	.globl _T3CC1
                                    145 	.globl _T3CCTL1
                                    146 	.globl _T3CC0
                                    147 	.globl _T3CCTL0
                                    148 	.globl _T3CTL
                                    149 	.globl _T3CNT
                                    150 	.globl _T2MSEL
                                    151 	.globl _T2IRQM
                                    152 	.globl _T2MOVF2
                                    153 	.globl _T2MOVF1
                                    154 	.globl _T2MOVF0
                                    155 	.globl _T2M1
                                    156 	.globl _T2M0
                                    157 	.globl _T2IRQF
                                    158 	.globl _T2EVTCFG
                                    159 	.globl _T2CTRL
                                    160 	.globl _T1STAT
                                    161 	.globl _T1CCTL2
                                    162 	.globl _T1CCTL1
                                    163 	.globl _T1CCTL0
                                    164 	.globl _T1CTL
                                    165 	.globl _T1CNTH
                                    166 	.globl _T1CNTL
                                    167 	.globl _T1CC2H
                                    168 	.globl _T1CC2L
                                    169 	.globl _T1CC1H
                                    170 	.globl _T1CC1L
                                    171 	.globl _T1CC0H
                                    172 	.globl _T1CC0L
                                    173 	.globl _CLKCONSTA
                                    174 	.globl _CLKCONCMD
                                    175 	.globl _SLEEPSTA
                                    176 	.globl _SLEEPCMD
                                    177 	.globl _STLOAD
                                    178 	.globl _ST2
                                    179 	.globl _ST1
                                    180 	.globl _ST0
                                    181 	.globl _RFERRF
                                    182 	.globl _RFIRQF0
                                    183 	.globl _RFST
                                    184 	.globl _RFD
                                    185 	.globl _RFIRQF1
                                    186 	.globl _PSBANK
                                    187 	.globl _FMAP
                                    188 	.globl _MEMCTR
                                    189 	.globl __XPAGE
                                    190 	.globl _MPAGE
                                    191 	.globl _PMUX
                                    192 	.globl _P2DIR
                                    193 	.globl _P1DIR
                                    194 	.globl _P0DIR
                                    195 	.globl _P2INP
                                    196 	.globl _P1INP
                                    197 	.globl _P2SEL
                                    198 	.globl _P1SEL
                                    199 	.globl _P0SEL
                                    200 	.globl _APCFG
                                    201 	.globl _PERCFG
                                    202 	.globl _P0INP
                                    203 	.globl _P2IEN
                                    204 	.globl _P1IEN
                                    205 	.globl _P0IEN
                                    206 	.globl _PICTL
                                    207 	.globl _P2IFG
                                    208 	.globl _P1IFG
                                    209 	.globl _P0IFG
                                    210 	.globl _DMAREQ
                                    211 	.globl _DMAARM
                                    212 	.globl _DMA0CFGH
                                    213 	.globl _DMA0CFGL
                                    214 	.globl _DMA1CFGH
                                    215 	.globl _DMA1CFGL
                                    216 	.globl _DMAIRQ
                                    217 	.globl _ENCCS
                                    218 	.globl _ENCDO
                                    219 	.globl _ENCDI
                                    220 	.globl _RNDH
                                    221 	.globl _RNDL
                                    222 	.globl _ADCH
                                    223 	.globl _ADCL
                                    224 	.globl _ADCCON3
                                    225 	.globl _ADCCON2
                                    226 	.globl _ADCCON1
                                    227 	.globl _B
                                    228 	.globl _IRCON2
                                    229 	.globl _ACC
                                    230 	.globl _PSW
                                    231 	.globl _IRCON
                                    232 	.globl _IP1
                                    233 	.globl _IEN1
                                    234 	.globl _IP0
                                    235 	.globl _IEN0
                                    236 	.globl _P2
                                    237 	.globl _S1CON
                                    238 	.globl _IEN2
                                    239 	.globl _S0CON
                                    240 	.globl _DPS
                                    241 	.globl _P1
                                    242 	.globl _TCON
                                    243 	.globl _PCON
                                    244 	.globl _DPH1
                                    245 	.globl _DPL1
                                    246 	.globl _DPH0
                                    247 	.globl _DPL0
                                    248 	.globl _SP
                                    249 	.globl _P0
                                    250 	.globl _X_IEEE_ADDR
                                    251 	.globl _X_INFOPAGE
                                    252 	.globl _X_P2DIR
                                    253 	.globl _X_P1DIR
                                    254 	.globl _X_P0DIR
                                    255 	.globl _X_U1GCR
                                    256 	.globl _X_U1UCR
                                    257 	.globl _X_U1BAUD
                                    258 	.globl _X_U1DBUF
                                    259 	.globl _X_U1CSR
                                    260 	.globl _X_P2INP
                                    261 	.globl _X_P1INP
                                    262 	.globl _X_P2SEL
                                    263 	.globl _X_P1SEL
                                    264 	.globl _X_P0SEL
                                    265 	.globl _X_APCFG
                                    266 	.globl _X_PERCFG
                                    267 	.globl _X_T4CC1
                                    268 	.globl _X_T4CCTL1
                                    269 	.globl _X_T4CC0
                                    270 	.globl _X_T4CCTL0
                                    271 	.globl _X_T4CTL
                                    272 	.globl _X_T4CNT
                                    273 	.globl _X_RFIRQF0
                                    274 	.globl _X_T1CCTL2
                                    275 	.globl _X_T1CCTL1
                                    276 	.globl _X_T1CCTL0
                                    277 	.globl _X_T1CTL
                                    278 	.globl _X_T1CNTH
                                    279 	.globl _X_T1CNTL
                                    280 	.globl _X_RFST
                                    281 	.globl _X_T1CC2H
                                    282 	.globl _X_T1CC2L
                                    283 	.globl _X_T1CC1H
                                    284 	.globl _X_T1CC1L
                                    285 	.globl _X_T1CC0H
                                    286 	.globl _X_T1CC0L
                                    287 	.globl _X_RFD
                                    288 	.globl _X_TIMIF
                                    289 	.globl _X_DMAREQ
                                    290 	.globl _X_DMAARM
                                    291 	.globl _X_DMA0CFGH
                                    292 	.globl _X_DMA0CFGL
                                    293 	.globl _X_DMA1CFGH
                                    294 	.globl _X_DMA1CFGL
                                    295 	.globl _X_DMAIRQ
                                    296 	.globl _X_T3CC1
                                    297 	.globl _X_T3CCTL1
                                    298 	.globl _X_T3CC0
                                    299 	.globl _X_T3CCTL0
                                    300 	.globl _X_T3CTL
                                    301 	.globl _X_T3CNT
                                    302 	.globl _X_WDCTL
                                    303 	.globl _X_MEMCTR
                                    304 	.globl _X_CLKCONCMD
                                    305 	.globl _X_U0GCR
                                    306 	.globl _X_U0UCR
                                    307 	.globl _X_T2MSEL
                                    308 	.globl _X_U0BAUD
                                    309 	.globl _X_U0DBUF
                                    310 	.globl _X_RFERRF
                                    311 	.globl _X_SLEEPCMD
                                    312 	.globl _X_RNDH
                                    313 	.globl _X_RNDL
                                    314 	.globl _X_ADCH
                                    315 	.globl _X_ADCL
                                    316 	.globl _X_ADCCON3
                                    317 	.globl _X_ADCCON2
                                    318 	.globl _X_ADCCON1
                                    319 	.globl _X_ENCCS
                                    320 	.globl _X_ENCDO
                                    321 	.globl _X_ENCDI
                                    322 	.globl _X_T1STAT
                                    323 	.globl _X_PMUX
                                    324 	.globl _X_STLOAD
                                    325 	.globl _X_P2IEN
                                    326 	.globl _X_P0IEN
                                    327 	.globl _X_T2IRQM
                                    328 	.globl _X_T2MOVF2
                                    329 	.globl _X_T2MOVF1
                                    330 	.globl _X_T2MOVF0
                                    331 	.globl _X_T2M1
                                    332 	.globl _X_T2M0
                                    333 	.globl _X_T2IRQF
                                    334 	.globl _X_P2
                                    335 	.globl _X_PSBANK
                                    336 	.globl _X_FMAP
                                    337 	.globl _X_CLKCONSTA
                                    338 	.globl _X_SLEEPSTA
                                    339 	.globl _X_T2EVTCFG
                                    340 	.globl _X_ST2
                                    341 	.globl _X_ST1
                                    342 	.globl _X_ST0
                                    343 	.globl _X_T2CTRL
                                    344 	.globl _X__XPAGE
                                    345 	.globl _X_MPAGE
                                    346 	.globl _X_RFIRQF1
                                    347 	.globl _X_P1
                                    348 	.globl _X_P0INP
                                    349 	.globl _X_P1IEN
                                    350 	.globl _X_PICTL
                                    351 	.globl _X_P2IFG
                                    352 	.globl _X_P1IFG
                                    353 	.globl _X_P0IFG
                                    354 	.globl _X_U0CSR
                                    355 	.globl _X_P0
                                    356 	.globl _USBF5
                                    357 	.globl _USBF4
                                    358 	.globl _USBF3
                                    359 	.globl _USBF2
                                    360 	.globl _USBF1
                                    361 	.globl _USBF0
                                    362 	.globl _USBCNTH
                                    363 	.globl _USBCNTL
                                    364 	.globl _USBCNT0
                                    365 	.globl _USBCSOH
                                    366 	.globl _USBCSOL
                                    367 	.globl _USBMAXO
                                    368 	.globl _USBCSIH
                                    369 	.globl _USBCSIL
                                    370 	.globl _USBCS0
                                    371 	.globl _USBMAXI
                                    372 	.globl _USBCTRL
                                    373 	.globl _USBINDEX
                                    374 	.globl _USBFRMH
                                    375 	.globl _USBFRML
                                    376 	.globl _USBCIE
                                    377 	.globl _USBOIE
                                    378 	.globl _USBIIE
                                    379 	.globl _USBCIF
                                    380 	.globl _USBOIF
                                    381 	.globl _USBIIF
                                    382 	.globl _USBPOW
                                    383 	.globl _USBADDR
                                    384 	.globl _CSPT
                                    385 	.globl _CSPZ
                                    386 	.globl _CSPY
                                    387 	.globl _CSPX
                                    388 	.globl _CSPSTAT
                                    389 	.globl _CSPCTRL
                                    390 	.globl _CSPPROG23
                                    391 	.globl _CSPPROG22
                                    392 	.globl _CSPPROG21
                                    393 	.globl _CSPPROG20
                                    394 	.globl _CSPPROG19
                                    395 	.globl _CSPPROG18
                                    396 	.globl _CSPPROG17
                                    397 	.globl _CSPPROG16
                                    398 	.globl _CSPPROG15
                                    399 	.globl _CSPPROG14
                                    400 	.globl _CSPPROG13
                                    401 	.globl _CSPPROG12
                                    402 	.globl _CSPPROG11
                                    403 	.globl _CSPPROG10
                                    404 	.globl _CSPPROG9
                                    405 	.globl _CSPPROG8
                                    406 	.globl _CSPPROG7
                                    407 	.globl _CSPPROG6
                                    408 	.globl _CSPPROG5
                                    409 	.globl _CSPPROG4
                                    410 	.globl _CSPPROG3
                                    411 	.globl _CSPPROG2
                                    412 	.globl _CSPPROG1
                                    413 	.globl _CSPPROG0
                                    414 	.globl _RFC_OBS_CTRL2
                                    415 	.globl _RFC_OBS_CTRL1
                                    416 	.globl _RFC_OBS_CTRL0
                                    417 	.globl _TXFILTCFG
                                    418 	.globl _PTEST1
                                    419 	.globl _PTEST0
                                    420 	.globl _ATEST
                                    421 	.globl _DACTEST2
                                    422 	.globl _DACTEST1
                                    423 	.globl _DACTEST0
                                    424 	.globl _MDMTEST1
                                    425 	.globl _MDMTEST0
                                    426 	.globl _ADCTEST2
                                    427 	.globl _ADCTEST1
                                    428 	.globl _ADCTEST0
                                    429 	.globl _AGCCTRL3
                                    430 	.globl _AGCCTRL2
                                    431 	.globl _AGCCTRL1
                                    432 	.globl _AGCCTRL0
                                    433 	.globl _FSCAL3
                                    434 	.globl _FSCAL2
                                    435 	.globl _FSCAL1
                                    436 	.globl _FSCAL0
                                    437 	.globl _FSCTRL
                                    438 	.globl _RXCTRL
                                    439 	.globl _FREQEST
                                    440 	.globl _MDMCTRL1
                                    441 	.globl _MDMCTRL0
                                    442 	.globl _RFRND
                                    443 	.globl _RFERRM
                                    444 	.globl _RFIRQM1
                                    445 	.globl _RFIRQM0
                                    446 	.globl _TXLAST_PTR
                                    447 	.globl _TXFIRST_PTR
                                    448 	.globl _RXP1_PTR
                                    449 	.globl _RXLAST_PTR
                                    450 	.globl _RXFIRST_PTR
                                    451 	.globl _TXFIFOCNT
                                    452 	.globl _RXFIFOCNT
                                    453 	.globl _RXFIRST
                                    454 	.globl _RSSISTAT
                                    455 	.globl _RSSI
                                    456 	.globl _CCACTRL1
                                    457 	.globl _CCACTRL0
                                    458 	.globl _FSMCTRL
                                    459 	.globl _FIFOPCTRL
                                    460 	.globl _FSMSTAT1
                                    461 	.globl _FSMSTAT0
                                    462 	.globl _TXCTRL
                                    463 	.globl _TXPOWER
                                    464 	.globl _FREQCTRL
                                    465 	.globl _FREQTUNE
                                    466 	.globl _RXMASKCLR
                                    467 	.globl _RXMASKSET
                                    468 	.globl _RXENABLE
                                    469 	.globl _FRMCTRL1
                                    470 	.globl _FRMCTRL0
                                    471 	.globl _SRCEXTEN2
                                    472 	.globl _SRCEXTEN1
                                    473 	.globl _SRCEXTEN0
                                    474 	.globl _SRCSHORTEN2
                                    475 	.globl _SRCSHORTEN1
                                    476 	.globl _SRCSHORTEN0
                                    477 	.globl _SRCMATCH
                                    478 	.globl _FRMFILT1
                                    479 	.globl _FRMFILT0
                                    480 	.globl _SHORT_ADDR1
                                    481 	.globl _SHORT_ADDR0
                                    482 	.globl _PAN_ID1
                                    483 	.globl _PAN_ID0
                                    484 	.globl _EXT_ADDR7
                                    485 	.globl _EXT_ADDR6
                                    486 	.globl _EXT_ADDR5
                                    487 	.globl _EXT_ADDR4
                                    488 	.globl _EXT_ADDR3
                                    489 	.globl _EXT_ADDR2
                                    490 	.globl _EXT_ADDR1
                                    491 	.globl _EXT_ADDR0
                                    492 	.globl _SRCSHORTPENDEN2
                                    493 	.globl _SRCSHORTPENDEN1
                                    494 	.globl _SRCSHORTPENDEN0
                                    495 	.globl _SRCEXTPENDEN2
                                    496 	.globl _SRCEXTPENDEN1
                                    497 	.globl _SRCEXTPENDEN0
                                    498 	.globl _SRCRESINDEX
                                    499 	.globl _SRCRESMASK2
                                    500 	.globl _SRCRESMASK1
                                    501 	.globl _SRCRESMASK0
                                    502 	.globl _SRC_ADDR_TABLE
                                    503 	.globl _TXFIFO
                                    504 	.globl _RXFIFO
                                    505 	.globl _RFCORE_RAM
                                    506 	.globl _CMPCTL
                                    507 	.globl _OPAMPS
                                    508 	.globl _OPAMPC
                                    509 	.globl _STCV2
                                    510 	.globl _STCV1
                                    511 	.globl _STCV0
                                    512 	.globl _STCS
                                    513 	.globl _STCC
                                    514 	.globl _T1CC4H
                                    515 	.globl _T1CC4L
                                    516 	.globl _T1CC3H
                                    517 	.globl _T1CC3L
                                    518 	.globl _XX_T1CC2H
                                    519 	.globl _XX_T1CC2L
                                    520 	.globl _XX_T1CC1H
                                    521 	.globl _XX_T1CC1L
                                    522 	.globl _XX_T1CC0H
                                    523 	.globl _XX_T1CC0L
                                    524 	.globl _T1CCTL4
                                    525 	.globl _T1CCTL3
                                    526 	.globl _XX_T1CCTL2
                                    527 	.globl _XX_T1CCTL1
                                    528 	.globl _XX_T1CCTL0
                                    529 	.globl _CLD
                                    530 	.globl _IRCTL
                                    531 	.globl _CHIPINFO1
                                    532 	.globl _CHIPINFO0
                                    533 	.globl _FWDATA
                                    534 	.globl _FADDRH
                                    535 	.globl _FADDRL
                                    536 	.globl _FCTL
                                    537 	.globl _IVCTRL
                                    538 	.globl _BATTMON
                                    539 	.globl _SRCRC
                                    540 	.globl _DBGDATA
                                    541 	.globl _TESTREG0
                                    542 	.globl _CHIPID
                                    543 	.globl _CHVER
                                    544 	.globl _OBSSEL5
                                    545 	.globl _OBSSEL4
                                    546 	.globl _OBSSEL3
                                    547 	.globl _OBSSEL2
                                    548 	.globl _OBSSEL1
                                    549 	.globl _OBSSEL0
                                    550 	.globl _I2CIO
                                    551 	.globl _I2CWC
                                    552 	.globl _I2CADDR
                                    553 	.globl _I2CDATA
                                    554 	.globl _I2CSTAT
                                    555 	.globl _I2CCFG
                                    556 	.globl _OPAMPMC
                                    557 	.globl _MONMUX
                                    558 	.globl _phase_remove
                                    559 	.globl _phase_update
                                    560 	.globl _phase_wait
                                    561 	.globl _phase_init
                                    562 ;--------------------------------------------------------
                                    563 ; special function registers
                                    564 ;--------------------------------------------------------
                                    565 	.area RSEG    (ABS,DATA)
      000000                        566 	.org 0x0000
                           000080   567 _P0	=	0x0080
                           000081   568 _SP	=	0x0081
                           000082   569 _DPL0	=	0x0082
                           000083   570 _DPH0	=	0x0083
                           000084   571 _DPL1	=	0x0084
                           000085   572 _DPH1	=	0x0085
                           000087   573 _PCON	=	0x0087
                           000088   574 _TCON	=	0x0088
                           000090   575 _P1	=	0x0090
                           000092   576 _DPS	=	0x0092
                           000098   577 _S0CON	=	0x0098
                           00009A   578 _IEN2	=	0x009a
                           00009B   579 _S1CON	=	0x009b
                           0000A0   580 _P2	=	0x00a0
                           0000A8   581 _IEN0	=	0x00a8
                           0000A9   582 _IP0	=	0x00a9
                           0000B8   583 _IEN1	=	0x00b8
                           0000B9   584 _IP1	=	0x00b9
                           0000C0   585 _IRCON	=	0x00c0
                           0000D0   586 _PSW	=	0x00d0
                           0000E0   587 _ACC	=	0x00e0
                           0000E8   588 _IRCON2	=	0x00e8
                           0000F0   589 _B	=	0x00f0
                           0000B4   590 _ADCCON1	=	0x00b4
                           0000B5   591 _ADCCON2	=	0x00b5
                           0000B6   592 _ADCCON3	=	0x00b6
                           0000BA   593 _ADCL	=	0x00ba
                           0000BB   594 _ADCH	=	0x00bb
                           0000BC   595 _RNDL	=	0x00bc
                           0000BD   596 _RNDH	=	0x00bd
                           0000B1   597 _ENCDI	=	0x00b1
                           0000B2   598 _ENCDO	=	0x00b2
                           0000B3   599 _ENCCS	=	0x00b3
                           0000D1   600 _DMAIRQ	=	0x00d1
                           0000D2   601 _DMA1CFGL	=	0x00d2
                           0000D3   602 _DMA1CFGH	=	0x00d3
                           0000D4   603 _DMA0CFGL	=	0x00d4
                           0000D5   604 _DMA0CFGH	=	0x00d5
                           0000D6   605 _DMAARM	=	0x00d6
                           0000D7   606 _DMAREQ	=	0x00d7
                           000089   607 _P0IFG	=	0x0089
                           00008A   608 _P1IFG	=	0x008a
                           00008B   609 _P2IFG	=	0x008b
                           00008C   610 _PICTL	=	0x008c
                           0000AB   611 _P0IEN	=	0x00ab
                           00008D   612 _P1IEN	=	0x008d
                           0000AC   613 _P2IEN	=	0x00ac
                           00008F   614 _P0INP	=	0x008f
                           0000F1   615 _PERCFG	=	0x00f1
                           0000F2   616 _APCFG	=	0x00f2
                           0000F3   617 _P0SEL	=	0x00f3
                           0000F4   618 _P1SEL	=	0x00f4
                           0000F5   619 _P2SEL	=	0x00f5
                           0000F6   620 _P1INP	=	0x00f6
                           0000F7   621 _P2INP	=	0x00f7
                           0000FD   622 _P0DIR	=	0x00fd
                           0000FE   623 _P1DIR	=	0x00fe
                           0000FF   624 _P2DIR	=	0x00ff
                           0000AE   625 _PMUX	=	0x00ae
                           000093   626 _MPAGE	=	0x0093
                           000093   627 __XPAGE	=	0x0093
                           0000C7   628 _MEMCTR	=	0x00c7
                           00009F   629 _FMAP	=	0x009f
                           00009F   630 _PSBANK	=	0x009f
                           000091   631 _RFIRQF1	=	0x0091
                           0000D9   632 _RFD	=	0x00d9
                           0000E1   633 _RFST	=	0x00e1
                           0000E9   634 _RFIRQF0	=	0x00e9
                           0000BF   635 _RFERRF	=	0x00bf
                           000095   636 _ST0	=	0x0095
                           000096   637 _ST1	=	0x0096
                           000097   638 _ST2	=	0x0097
                           0000AD   639 _STLOAD	=	0x00ad
                           0000BE   640 _SLEEPCMD	=	0x00be
                           00009D   641 _SLEEPSTA	=	0x009d
                           0000C6   642 _CLKCONCMD	=	0x00c6
                           00009E   643 _CLKCONSTA	=	0x009e
                           0000DA   644 _T1CC0L	=	0x00da
                           0000DB   645 _T1CC0H	=	0x00db
                           0000DC   646 _T1CC1L	=	0x00dc
                           0000DD   647 _T1CC1H	=	0x00dd
                           0000DE   648 _T1CC2L	=	0x00de
                           0000DF   649 _T1CC2H	=	0x00df
                           0000E2   650 _T1CNTL	=	0x00e2
                           0000E3   651 _T1CNTH	=	0x00e3
                           0000E4   652 _T1CTL	=	0x00e4
                           0000E5   653 _T1CCTL0	=	0x00e5
                           0000E6   654 _T1CCTL1	=	0x00e6
                           0000E7   655 _T1CCTL2	=	0x00e7
                           0000AF   656 _T1STAT	=	0x00af
                           000094   657 _T2CTRL	=	0x0094
                           00009C   658 _T2EVTCFG	=	0x009c
                           0000A1   659 _T2IRQF	=	0x00a1
                           0000A2   660 _T2M0	=	0x00a2
                           0000A3   661 _T2M1	=	0x00a3
                           0000A4   662 _T2MOVF0	=	0x00a4
                           0000A5   663 _T2MOVF1	=	0x00a5
                           0000A6   664 _T2MOVF2	=	0x00a6
                           0000A7   665 _T2IRQM	=	0x00a7
                           0000C3   666 _T2MSEL	=	0x00c3
                           0000CA   667 _T3CNT	=	0x00ca
                           0000CB   668 _T3CTL	=	0x00cb
                           0000CC   669 _T3CCTL0	=	0x00cc
                           0000CD   670 _T3CC0	=	0x00cd
                           0000CE   671 _T3CCTL1	=	0x00ce
                           0000CF   672 _T3CC1	=	0x00cf
                           0000EA   673 _T4CNT	=	0x00ea
                           0000EB   674 _T4CTL	=	0x00eb
                           0000EC   675 _T4CCTL0	=	0x00ec
                           0000ED   676 _T4CC0	=	0x00ed
                           0000EE   677 _T4CCTL1	=	0x00ee
                           0000EF   678 _T4CC1	=	0x00ef
                           0000D8   679 _TIMIF	=	0x00d8
                           000086   680 _U0CSR	=	0x0086
                           0000C1   681 _U0DBUF	=	0x00c1
                           0000C2   682 _U0BAUD	=	0x00c2
                           0000C4   683 _U0UCR	=	0x00c4
                           0000C5   684 _U0GCR	=	0x00c5
                           0000F8   685 _U1CSR	=	0x00f8
                           0000F9   686 _U1DBUF	=	0x00f9
                           0000FA   687 _U1BAUD	=	0x00fa
                           0000FB   688 _U1UCR	=	0x00fb
                           0000FC   689 _U1GCR	=	0x00fc
                           0000C9   690 _WDCTL	=	0x00c9
                                    691 ;--------------------------------------------------------
                                    692 ; special function bits
                                    693 ;--------------------------------------------------------
                                    694 	.area RSEG    (ABS,DATA)
      000000                        695 	.org 0x0000
                           000087   696 _P0_7	=	0x0087
                           000086   697 _P0_6	=	0x0086
                           000085   698 _P0_5	=	0x0085
                           000084   699 _P0_4	=	0x0084
                           000083   700 _P0_3	=	0x0083
                           000082   701 _P0_2	=	0x0082
                           000081   702 _P0_1	=	0x0081
                           000080   703 _P0_0	=	0x0080
                           00008F   704 _URX1IF	=	0x008f
                           00008D   705 _ADCIF	=	0x008d
                           00008B   706 _URX0IF	=	0x008b
                           00008A   707 _IT1	=	0x008a
                           000089   708 _RFERRIF	=	0x0089
                           000088   709 _IT0	=	0x0088
                           000097   710 _P1_7	=	0x0097
                           000096   711 _P1_6	=	0x0096
                           000095   712 _P1_5	=	0x0095
                           000094   713 _P1_4	=	0x0094
                           000093   714 _P1_3	=	0x0093
                           000092   715 _P1_2	=	0x0092
                           000091   716 _P1_1	=	0x0091
                           000090   717 _P1_0	=	0x0090
                           000099   718 _ENCIF_1	=	0x0099
                           000098   719 _ENCIF_0	=	0x0098
                           0000A7   720 _P2_7	=	0x00a7
                           0000A6   721 _P2_6	=	0x00a6
                           0000A5   722 _P2_5	=	0x00a5
                           0000A4   723 _P2_4	=	0x00a4
                           0000A3   724 _P2_3	=	0x00a3
                           0000A2   725 _P2_2	=	0x00a2
                           0000A1   726 _P2_1	=	0x00a1
                           0000A0   727 _P2_0	=	0x00a0
                           0000AF   728 _EA	=	0x00af
                           0000AD   729 _STIE	=	0x00ad
                           0000AC   730 _ENCIE	=	0x00ac
                           0000AB   731 _URX1IE	=	0x00ab
                           0000AA   732 _URX0IE	=	0x00aa
                           0000A9   733 _ADCIE	=	0x00a9
                           0000A8   734 _RFERRIE	=	0x00a8
                           0000BD   735 _P0IE	=	0x00bd
                           0000BC   736 _T4IE	=	0x00bc
                           0000BB   737 _T3IE	=	0x00bb
                           0000BA   738 _T2IE	=	0x00ba
                           0000B9   739 _T1IE	=	0x00b9
                           0000B8   740 _DMAIE	=	0x00b8
                           0000C7   741 _STIF	=	0x00c7
                           0000C5   742 _P0IF	=	0x00c5
                           0000C4   743 _T4IF	=	0x00c4
                           0000C3   744 _T3IF	=	0x00c3
                           0000C2   745 _T2IF	=	0x00c2
                           0000C1   746 _T1IF	=	0x00c1
                           0000C0   747 _DMAIF	=	0x00c0
                           0000D7   748 _CY	=	0x00d7
                           0000D6   749 _AC	=	0x00d6
                           0000D5   750 _F0	=	0x00d5
                           0000D4   751 _RS1	=	0x00d4
                           0000D3   752 _RS0	=	0x00d3
                           0000D2   753 _OV	=	0x00d2
                           0000D1   754 _F1	=	0x00d1
                           0000D0   755 _P	=	0x00d0
                           0000E7   756 _ACC_7	=	0x00e7
                           0000E6   757 _ACC_6	=	0x00e6
                           0000E5   758 _ACC_5	=	0x00e5
                           0000E4   759 _ACC_4	=	0x00e4
                           0000E3   760 _ACC_3	=	0x00e3
                           0000E2   761 _ACC_2	=	0x00e2
                           0000E1   762 _ACC_1	=	0x00e1
                           0000E0   763 _ACC_0	=	0x00e0
                           0000EC   764 _WDTIF	=	0x00ec
                           0000EB   765 _P1IF	=	0x00eb
                           0000EA   766 _UTX1IF	=	0x00ea
                           0000E9   767 _UTX0IF	=	0x00e9
                           0000E8   768 _P2IF	=	0x00e8
                           0000F7   769 _B_7	=	0x00f7
                           0000F6   770 _B_6	=	0x00f6
                           0000F5   771 _B_5	=	0x00f5
                           0000F4   772 _B_4	=	0x00f4
                           0000F3   773 _B_3	=	0x00f3
                           0000F2   774 _B_2	=	0x00f2
                           0000F1   775 _B_1	=	0x00f1
                           0000F0   776 _B_0	=	0x00f0
                           0000DE   777 _OVFIM	=	0x00de
                           0000DD   778 _T4CH1IF	=	0x00dd
                           0000DC   779 _T4CH0IF	=	0x00dc
                           0000DB   780 _T4OVFIF	=	0x00db
                           0000DA   781 _T3CH1IF	=	0x00da
                           0000D9   782 _T3CH0IF	=	0x00d9
                           0000D8   783 _T3OVFIF	=	0x00d8
                           0000FF   784 _MODE	=	0x00ff
                           0000FE   785 _RE	=	0x00fe
                           0000FD   786 _SLAVE	=	0x00fd
                           0000FC   787 _FE	=	0x00fc
                           0000FB   788 _ERR	=	0x00fb
                           0000FA   789 _RX_BYTE	=	0x00fa
                           0000F9   790 _TX_BYTE	=	0x00f9
                           0000F8   791 _ACTIVE	=	0x00f8
                                    792 ;--------------------------------------------------------
                                    793 ; overlayable register banks
                                    794 ;--------------------------------------------------------
                                    795 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        796 	.ds 8
                                    797 ;--------------------------------------------------------
                                    798 ; internal ram data
                                    799 ;--------------------------------------------------------
                                    800 	.area DSEG    (DATA)
                                    801 ;--------------------------------------------------------
                                    802 ; overlayable items in internal ram 
                                    803 ;--------------------------------------------------------
                                    804 ;--------------------------------------------------------
                                    805 ; indirectly addressable internal ram data
                                    806 ;--------------------------------------------------------
                                    807 	.area ISEG    (DATA)
                                    808 ;--------------------------------------------------------
                                    809 ; absolute internal ram data
                                    810 ;--------------------------------------------------------
                                    811 	.area IABS    (ABS,DATA)
                                    812 	.area IABS    (ABS,DATA)
                                    813 ;--------------------------------------------------------
                                    814 ; bit data
                                    815 ;--------------------------------------------------------
                                    816 	.area BSEG    (BIT)
                                    817 ;--------------------------------------------------------
                                    818 ; paged external ram data
                                    819 ;--------------------------------------------------------
                                    820 	.area PSEG    (PAG,XDATA)
                                    821 ;--------------------------------------------------------
                                    822 ; external ram data
                                    823 ;--------------------------------------------------------
                                    824 	.area XSEG    (XDATA)
                           0061A6   825 _MONMUX	=	0x61a6
                           0061A6   826 _OPAMPMC	=	0x61a6
                           006230   827 _I2CCFG	=	0x6230
                           006231   828 _I2CSTAT	=	0x6231
                           006232   829 _I2CDATA	=	0x6232
                           006233   830 _I2CADDR	=	0x6233
                           006234   831 _I2CWC	=	0x6234
                           006235   832 _I2CIO	=	0x6235
                           006243   833 _OBSSEL0	=	0x6243
                           006244   834 _OBSSEL1	=	0x6244
                           006245   835 _OBSSEL2	=	0x6245
                           006246   836 _OBSSEL3	=	0x6246
                           006247   837 _OBSSEL4	=	0x6247
                           006248   838 _OBSSEL5	=	0x6248
                           006249   839 _CHVER	=	0x6249
                           00624A   840 _CHIPID	=	0x624a
                           00624B   841 _TESTREG0	=	0x624b
                           006260   842 _DBGDATA	=	0x6260
                           006262   843 _SRCRC	=	0x6262
                           006264   844 _BATTMON	=	0x6264
                           006265   845 _IVCTRL	=	0x6265
                           006270   846 _FCTL	=	0x6270
                           006271   847 _FADDRL	=	0x6271
                           006272   848 _FADDRH	=	0x6272
                           006273   849 _FWDATA	=	0x6273
                           006276   850 _CHIPINFO0	=	0x6276
                           006277   851 _CHIPINFO1	=	0x6277
                           006281   852 _IRCTL	=	0x6281
                           006290   853 _CLD	=	0x6290
                           0062A0   854 _XX_T1CCTL0	=	0x62a0
                           0062A1   855 _XX_T1CCTL1	=	0x62a1
                           0062A2   856 _XX_T1CCTL2	=	0x62a2
                           0062A3   857 _T1CCTL3	=	0x62a3
                           0062A4   858 _T1CCTL4	=	0x62a4
                           0062A6   859 _XX_T1CC0L	=	0x62a6
                           0062A7   860 _XX_T1CC0H	=	0x62a7
                           0062A8   861 _XX_T1CC1L	=	0x62a8
                           0062A9   862 _XX_T1CC1H	=	0x62a9
                           0062AA   863 _XX_T1CC2L	=	0x62aa
                           0062AB   864 _XX_T1CC2H	=	0x62ab
                           0062AC   865 _T1CC3L	=	0x62ac
                           0062AD   866 _T1CC3H	=	0x62ad
                           0062AE   867 _T1CC4L	=	0x62ae
                           0062AF   868 _T1CC4H	=	0x62af
                           0062B0   869 _STCC	=	0x62b0
                           0062B1   870 _STCS	=	0x62b1
                           0062B2   871 _STCV0	=	0x62b2
                           0062B3   872 _STCV1	=	0x62b3
                           0062B4   873 _STCV2	=	0x62b4
                           0062C0   874 _OPAMPC	=	0x62c0
                           0062C1   875 _OPAMPS	=	0x62c1
                           0062D0   876 _CMPCTL	=	0x62d0
                           006000   877 _RFCORE_RAM	=	0x6000
                           006000   878 _RXFIFO	=	0x6000
                           006080   879 _TXFIFO	=	0x6080
                           006100   880 _SRC_ADDR_TABLE	=	0x6100
                           006160   881 _SRCRESMASK0	=	0x6160
                           006161   882 _SRCRESMASK1	=	0x6161
                           006162   883 _SRCRESMASK2	=	0x6162
                           006163   884 _SRCRESINDEX	=	0x6163
                           006164   885 _SRCEXTPENDEN0	=	0x6164
                           006165   886 _SRCEXTPENDEN1	=	0x6165
                           006166   887 _SRCEXTPENDEN2	=	0x6166
                           006167   888 _SRCSHORTPENDEN0	=	0x6167
                           006168   889 _SRCSHORTPENDEN1	=	0x6168
                           006169   890 _SRCSHORTPENDEN2	=	0x6169
                           00616A   891 _EXT_ADDR0	=	0x616a
                           00616B   892 _EXT_ADDR1	=	0x616b
                           00616C   893 _EXT_ADDR2	=	0x616c
                           00616D   894 _EXT_ADDR3	=	0x616d
                           00616E   895 _EXT_ADDR4	=	0x616e
                           00616F   896 _EXT_ADDR5	=	0x616f
                           006170   897 _EXT_ADDR6	=	0x6170
                           006171   898 _EXT_ADDR7	=	0x6171
                           006172   899 _PAN_ID0	=	0x6172
                           006173   900 _PAN_ID1	=	0x6173
                           006174   901 _SHORT_ADDR0	=	0x6174
                           006175   902 _SHORT_ADDR1	=	0x6175
                           006180   903 _FRMFILT0	=	0x6180
                           006181   904 _FRMFILT1	=	0x6181
                           006182   905 _SRCMATCH	=	0x6182
                           006183   906 _SRCSHORTEN0	=	0x6183
                           006184   907 _SRCSHORTEN1	=	0x6184
                           006185   908 _SRCSHORTEN2	=	0x6185
                           006186   909 _SRCEXTEN0	=	0x6186
                           006187   910 _SRCEXTEN1	=	0x6187
                           006188   911 _SRCEXTEN2	=	0x6188
                           006189   912 _FRMCTRL0	=	0x6189
                           00618A   913 _FRMCTRL1	=	0x618a
                           00618B   914 _RXENABLE	=	0x618b
                           00618C   915 _RXMASKSET	=	0x618c
                           00618D   916 _RXMASKCLR	=	0x618d
                           00618E   917 _FREQTUNE	=	0x618e
                           00618F   918 _FREQCTRL	=	0x618f
                           006190   919 _TXPOWER	=	0x6190
                           006191   920 _TXCTRL	=	0x6191
                           006192   921 _FSMSTAT0	=	0x6192
                           006193   922 _FSMSTAT1	=	0x6193
                           006194   923 _FIFOPCTRL	=	0x6194
                           006195   924 _FSMCTRL	=	0x6195
                           006196   925 _CCACTRL0	=	0x6196
                           006197   926 _CCACTRL1	=	0x6197
                           006198   927 _RSSI	=	0x6198
                           006199   928 _RSSISTAT	=	0x6199
                           00619A   929 _RXFIRST	=	0x619a
                           00619B   930 _RXFIFOCNT	=	0x619b
                           00619C   931 _TXFIFOCNT	=	0x619c
                           00619D   932 _RXFIRST_PTR	=	0x619d
                           00619E   933 _RXLAST_PTR	=	0x619e
                           00619F   934 _RXP1_PTR	=	0x619f
                           0061A1   935 _TXFIRST_PTR	=	0x61a1
                           0061A2   936 _TXLAST_PTR	=	0x61a2
                           0061A3   937 _RFIRQM0	=	0x61a3
                           0061A4   938 _RFIRQM1	=	0x61a4
                           0061A5   939 _RFERRM	=	0x61a5
                           0061A7   940 _RFRND	=	0x61a7
                           0061A8   941 _MDMCTRL0	=	0x61a8
                           0061A9   942 _MDMCTRL1	=	0x61a9
                           0061AA   943 _FREQEST	=	0x61aa
                           0061AB   944 _RXCTRL	=	0x61ab
                           0061AC   945 _FSCTRL	=	0x61ac
                           0061AD   946 _FSCAL0	=	0x61ad
                           0061AE   947 _FSCAL1	=	0x61ae
                           0061AF   948 _FSCAL2	=	0x61af
                           0061B0   949 _FSCAL3	=	0x61b0
                           0061B1   950 _AGCCTRL0	=	0x61b1
                           0061B2   951 _AGCCTRL1	=	0x61b2
                           0061B3   952 _AGCCTRL2	=	0x61b3
                           0061B4   953 _AGCCTRL3	=	0x61b4
                           0061B5   954 _ADCTEST0	=	0x61b5
                           0061B6   955 _ADCTEST1	=	0x61b6
                           0061B7   956 _ADCTEST2	=	0x61b7
                           0061B8   957 _MDMTEST0	=	0x61b8
                           0061B9   958 _MDMTEST1	=	0x61b9
                           0061BA   959 _DACTEST0	=	0x61ba
                           0061BB   960 _DACTEST1	=	0x61bb
                           0061BC   961 _DACTEST2	=	0x61bc
                           0061BD   962 _ATEST	=	0x61bd
                           0061BE   963 _PTEST0	=	0x61be
                           0061BF   964 _PTEST1	=	0x61bf
                           0061FA   965 _TXFILTCFG	=	0x61fa
                           0061EB   966 _RFC_OBS_CTRL0	=	0x61eb
                           0061EC   967 _RFC_OBS_CTRL1	=	0x61ec
                           0061ED   968 _RFC_OBS_CTRL2	=	0x61ed
                           0061C0   969 _CSPPROG0	=	0x61c0
                           0061C1   970 _CSPPROG1	=	0x61c1
                           0061C2   971 _CSPPROG2	=	0x61c2
                           0061C3   972 _CSPPROG3	=	0x61c3
                           0061C4   973 _CSPPROG4	=	0x61c4
                           0061C5   974 _CSPPROG5	=	0x61c5
                           0061C6   975 _CSPPROG6	=	0x61c6
                           0061C7   976 _CSPPROG7	=	0x61c7
                           0061C8   977 _CSPPROG8	=	0x61c8
                           0061C9   978 _CSPPROG9	=	0x61c9
                           0061CA   979 _CSPPROG10	=	0x61ca
                           0061CB   980 _CSPPROG11	=	0x61cb
                           0061CC   981 _CSPPROG12	=	0x61cc
                           0061CD   982 _CSPPROG13	=	0x61cd
                           0061CE   983 _CSPPROG14	=	0x61ce
                           0061CF   984 _CSPPROG15	=	0x61cf
                           0061D0   985 _CSPPROG16	=	0x61d0
                           0061D1   986 _CSPPROG17	=	0x61d1
                           0061D2   987 _CSPPROG18	=	0x61d2
                           0061D3   988 _CSPPROG19	=	0x61d3
                           0061D4   989 _CSPPROG20	=	0x61d4
                           0061D5   990 _CSPPROG21	=	0x61d5
                           0061D6   991 _CSPPROG22	=	0x61d6
                           0061D7   992 _CSPPROG23	=	0x61d7
                           0061E0   993 _CSPCTRL	=	0x61e0
                           0061E1   994 _CSPSTAT	=	0x61e1
                           0061E2   995 _CSPX	=	0x61e2
                           0061E3   996 _CSPY	=	0x61e3
                           0061E4   997 _CSPZ	=	0x61e4
                           0061E5   998 _CSPT	=	0x61e5
                           006200   999 _USBADDR	=	0x6200
                           006201  1000 _USBPOW	=	0x6201
                           006202  1001 _USBIIF	=	0x6202
                           006204  1002 _USBOIF	=	0x6204
                           006206  1003 _USBCIF	=	0x6206
                           006207  1004 _USBIIE	=	0x6207
                           006209  1005 _USBOIE	=	0x6209
                           00620B  1006 _USBCIE	=	0x620b
                           00620C  1007 _USBFRML	=	0x620c
                           00620D  1008 _USBFRMH	=	0x620d
                           00620E  1009 _USBINDEX	=	0x620e
                           00620F  1010 _USBCTRL	=	0x620f
                           006210  1011 _USBMAXI	=	0x6210
                           006211  1012 _USBCS0	=	0x6211
                           006211  1013 _USBCSIL	=	0x6211
                           006212  1014 _USBCSIH	=	0x6212
                           006213  1015 _USBMAXO	=	0x6213
                           006214  1016 _USBCSOL	=	0x6214
                           006215  1017 _USBCSOH	=	0x6215
                           006216  1018 _USBCNT0	=	0x6216
                           006216  1019 _USBCNTL	=	0x6216
                           006217  1020 _USBCNTH	=	0x6217
                           006220  1021 _USBF0	=	0x6220
                           006222  1022 _USBF1	=	0x6222
                           006224  1023 _USBF2	=	0x6224
                           006226  1024 _USBF3	=	0x6226
                           006228  1025 _USBF4	=	0x6228
                           00622A  1026 _USBF5	=	0x622a
                           007080  1027 _X_P0	=	0x7080
                           007086  1028 _X_U0CSR	=	0x7086
                           007089  1029 _X_P0IFG	=	0x7089
                           00708A  1030 _X_P1IFG	=	0x708a
                           00708B  1031 _X_P2IFG	=	0x708b
                           00708C  1032 _X_PICTL	=	0x708c
                           00708D  1033 _X_P1IEN	=	0x708d
                           00708F  1034 _X_P0INP	=	0x708f
                           007090  1035 _X_P1	=	0x7090
                           007091  1036 _X_RFIRQF1	=	0x7091
                           007093  1037 _X_MPAGE	=	0x7093
                           007093  1038 _X__XPAGE	=	0x7093
                           007094  1039 _X_T2CTRL	=	0x7094
                           007095  1040 _X_ST0	=	0x7095
                           007096  1041 _X_ST1	=	0x7096
                           007097  1042 _X_ST2	=	0x7097
                           00709C  1043 _X_T2EVTCFG	=	0x709c
                           00709D  1044 _X_SLEEPSTA	=	0x709d
                           00709E  1045 _X_CLKCONSTA	=	0x709e
                           00709F  1046 _X_FMAP	=	0x709f
                           00709F  1047 _X_PSBANK	=	0x709f
                           0070A0  1048 _X_P2	=	0x70a0
                           0070A1  1049 _X_T2IRQF	=	0x70a1
                           0070A2  1050 _X_T2M0	=	0x70a2
                           0070A3  1051 _X_T2M1	=	0x70a3
                           0070A4  1052 _X_T2MOVF0	=	0x70a4
                           0070A5  1053 _X_T2MOVF1	=	0x70a5
                           0070A6  1054 _X_T2MOVF2	=	0x70a6
                           0070A7  1055 _X_T2IRQM	=	0x70a7
                           0070AB  1056 _X_P0IEN	=	0x70ab
                           0070AC  1057 _X_P2IEN	=	0x70ac
                           0070AD  1058 _X_STLOAD	=	0x70ad
                           0070AE  1059 _X_PMUX	=	0x70ae
                           0070AF  1060 _X_T1STAT	=	0x70af
                           0070B1  1061 _X_ENCDI	=	0x70b1
                           0070B2  1062 _X_ENCDO	=	0x70b2
                           0070B3  1063 _X_ENCCS	=	0x70b3
                           0070B4  1064 _X_ADCCON1	=	0x70b4
                           0070B5  1065 _X_ADCCON2	=	0x70b5
                           0070B6  1066 _X_ADCCON3	=	0x70b6
                           0070BA  1067 _X_ADCL	=	0x70ba
                           0070BB  1068 _X_ADCH	=	0x70bb
                           0070BC  1069 _X_RNDL	=	0x70bc
                           0070BD  1070 _X_RNDH	=	0x70bd
                           0070BE  1071 _X_SLEEPCMD	=	0x70be
                           0070BF  1072 _X_RFERRF	=	0x70bf
                           0070C1  1073 _X_U0DBUF	=	0x70c1
                           0070C2  1074 _X_U0BAUD	=	0x70c2
                           0070C3  1075 _X_T2MSEL	=	0x70c3
                           0070C4  1076 _X_U0UCR	=	0x70c4
                           0070C5  1077 _X_U0GCR	=	0x70c5
                           0070C6  1078 _X_CLKCONCMD	=	0x70c6
                           0070C7  1079 _X_MEMCTR	=	0x70c7
                           0070C9  1080 _X_WDCTL	=	0x70c9
                           0070CA  1081 _X_T3CNT	=	0x70ca
                           0070CB  1082 _X_T3CTL	=	0x70cb
                           0070CC  1083 _X_T3CCTL0	=	0x70cc
                           0070CD  1084 _X_T3CC0	=	0x70cd
                           0070CE  1085 _X_T3CCTL1	=	0x70ce
                           0070CF  1086 _X_T3CC1	=	0x70cf
                           0070D1  1087 _X_DMAIRQ	=	0x70d1
                           0070D2  1088 _X_DMA1CFGL	=	0x70d2
                           0070D3  1089 _X_DMA1CFGH	=	0x70d3
                           0070D4  1090 _X_DMA0CFGL	=	0x70d4
                           0070D5  1091 _X_DMA0CFGH	=	0x70d5
                           0070D6  1092 _X_DMAARM	=	0x70d6
                           0070D7  1093 _X_DMAREQ	=	0x70d7
                           0070D8  1094 _X_TIMIF	=	0x70d8
                           0070D9  1095 _X_RFD	=	0x70d9
                           0070DA  1096 _X_T1CC0L	=	0x70da
                           0070DB  1097 _X_T1CC0H	=	0x70db
                           0070DC  1098 _X_T1CC1L	=	0x70dc
                           0070DD  1099 _X_T1CC1H	=	0x70dd
                           0070DE  1100 _X_T1CC2L	=	0x70de
                           0070DF  1101 _X_T1CC2H	=	0x70df
                           0070E1  1102 _X_RFST	=	0x70e1
                           0070E2  1103 _X_T1CNTL	=	0x70e2
                           0070E3  1104 _X_T1CNTH	=	0x70e3
                           0070E4  1105 _X_T1CTL	=	0x70e4
                           0070E5  1106 _X_T1CCTL0	=	0x70e5
                           0070E6  1107 _X_T1CCTL1	=	0x70e6
                           0070E7  1108 _X_T1CCTL2	=	0x70e7
                           0070E9  1109 _X_RFIRQF0	=	0x70e9
                           0070EA  1110 _X_T4CNT	=	0x70ea
                           0070EB  1111 _X_T4CTL	=	0x70eb
                           0070EC  1112 _X_T4CCTL0	=	0x70ec
                           0070ED  1113 _X_T4CC0	=	0x70ed
                           0070EE  1114 _X_T4CCTL1	=	0x70ee
                           0070EF  1115 _X_T4CC1	=	0x70ef
                           0070F1  1116 _X_PERCFG	=	0x70f1
                           0070F2  1117 _X_APCFG	=	0x70f2
                           0070F3  1118 _X_P0SEL	=	0x70f3
                           0070F4  1119 _X_P1SEL	=	0x70f4
                           0070F5  1120 _X_P2SEL	=	0x70f5
                           0070F6  1121 _X_P1INP	=	0x70f6
                           0070F7  1122 _X_P2INP	=	0x70f7
                           0070F8  1123 _X_U1CSR	=	0x70f8
                           0070F9  1124 _X_U1DBUF	=	0x70f9
                           0070FA  1125 _X_U1BAUD	=	0x70fa
                           0070FB  1126 _X_U1UCR	=	0x70fb
                           0070FC  1127 _X_U1GCR	=	0x70fc
                           0070FD  1128 _X_P0DIR	=	0x70fd
                           0070FE  1129 _X_P1DIR	=	0x70fe
                           0070FF  1130 _X_P2DIR	=	0x70ff
                           007800  1131 _X_INFOPAGE	=	0x7800
                           00780C  1132 _X_IEEE_ADDR	=	0x780c
      000000                       1133 _queued_packets_memb_memb_count:
      000000                       1134 	.ds 8
      000008                       1135 _queued_packets_memb_memb_mem:
      000008                       1136 	.ds 272
                                   1137 ;--------------------------------------------------------
                                   1138 ; absolute external ram data
                                   1139 ;--------------------------------------------------------
                                   1140 	.area XABS    (ABS,XDATA)
                                   1141 ;--------------------------------------------------------
                                   1142 ; external initialized ram data
                                   1143 ;--------------------------------------------------------
                                   1144 	.area XISEG   (XDATA)
      000000                       1145 _queued_packets_memb:
      000000                       1146 	.ds 10
                                   1147 	.area HOME    (CODE)
                                   1148 	.area GSINIT0 (CODE)
                                   1149 	.area GSINIT1 (CODE)
                                   1150 	.area GSINIT2 (CODE)
                                   1151 	.area GSINIT3 (CODE)
                                   1152 	.area GSINIT4 (CODE)
                                   1153 	.area GSINIT5 (CODE)
                                   1154 	.area GSINIT  (CODE)
                                   1155 	.area GSFINAL (CODE)
                                   1156 	.area CSEG    (CODE)
                                   1157 ;--------------------------------------------------------
                                   1158 ; global & static initialisations
                                   1159 ;--------------------------------------------------------
                                   1160 	.area HOME    (CODE)
                                   1161 	.area GSINIT  (CODE)
                                   1162 	.area GSFINAL (CODE)
                                   1163 	.area GSINIT  (CODE)
                                   1164 ;--------------------------------------------------------
                                   1165 ; Home
                                   1166 ;--------------------------------------------------------
                                   1167 	.area HOME    (CODE)
                                   1168 	.area HOME    (CODE)
                                   1169 ;--------------------------------------------------------
                                   1170 ; code
                                   1171 ;--------------------------------------------------------
                                   1172 	.area BANK1   (CODE)
                                   1173 ;------------------------------------------------------------
                                   1174 ;Allocation info for local variables in function 'find_neighbor'
                                   1175 ;------------------------------------------------------------
                                   1176 ;addr                      Allocated to stack - sp -5
                                   1177 ;list                      Allocated to registers r5 r6 r7 
                                   1178 ;e                         Allocated to registers r5 r6 r7 
                                   1179 ;------------------------------------------------------------
                                   1180 ;	../../../../core/net/mac/phase.c:77: find_neighbor(const struct phase_list *list, const rimeaddr_t *addr)
                                   1181 ;	-----------------------------------------
                                   1182 ;	 function find_neighbor
                                   1183 ;	-----------------------------------------
      000000                       1184 _find_neighbor:
                           000007  1185 	ar7 = 0x07
                           000006  1186 	ar6 = 0x06
                           000005  1187 	ar5 = 0x05
                           000004  1188 	ar4 = 0x04
                           000003  1189 	ar3 = 0x03
                           000002  1190 	ar2 = 0x02
                           000001  1191 	ar1 = 0x01
                           000000  1192 	ar0 = 0x00
                                   1193 ;	../../../../core/net/mac/phase.c:80: for(e = list_head(*list->list); e != NULL; e = list_item_next(e)) {
      000000 12r00r00         [24] 1194 	lcall	__gptrget
      000003 FD               [12] 1195 	mov	r5,a
      000004 A3               [24] 1196 	inc	dptr
      000005 12r00r00         [24] 1197 	lcall	__gptrget
      000008 FE               [12] 1198 	mov	r6,a
      000009 A3               [24] 1199 	inc	dptr
      00000A 12r00r00         [24] 1200 	lcall	__gptrget
      00000D FF               [12] 1201 	mov	r7,a
      00000E 8D 82            [24] 1202 	mov	dpl,r5
      000010 8E 83            [24] 1203 	mov	dph,r6
      000012 8F F0            [24] 1204 	mov	b,r7
      000014 12r00r00         [24] 1205 	lcall	__gptrget
      000017 FD               [12] 1206 	mov	r5,a
      000018 A3               [24] 1207 	inc	dptr
      000019 12r00r00         [24] 1208 	lcall	__gptrget
      00001C FE               [12] 1209 	mov	r6,a
      00001D A3               [24] 1210 	inc	dptr
      00001E 12r00r00         [24] 1211 	lcall	__gptrget
      000021 FF               [12] 1212 	mov	r7,a
      000022 8D 82            [24] 1213 	mov	dpl,r5
      000024 8E 83            [24] 1214 	mov	dph,r6
      000026 8F F0            [24] 1215 	mov	b,r7
      000028 78r00            [12] 1216 	mov	r0,#_list_head
      00002A 79s00            [12] 1217 	mov	r1,#(_list_head >> 8)
      00002C 7As00            [12] 1218 	mov	r2,#(_list_head >> 16)
      00002E 12r00r00         [24] 1219 	lcall	__sdcc_banked_call
      000031 AD 82            [24] 1220 	mov	r5,dpl
      000033 AE 83            [24] 1221 	mov	r6,dph
      000035 AF F0            [24] 1222 	mov	r7,b
      000037                       1223 00105$:
      000037 E4               [12] 1224 	clr	a
      000038 C0 E0            [24] 1225 	push	acc
      00003A E4               [12] 1226 	clr	a
      00003B C0 E0            [24] 1227 	push	acc
      00003D E4               [12] 1228 	clr	a
      00003E C0 E0            [24] 1229 	push	acc
      000040 8D 82            [24] 1230 	mov	dpl,r5
      000042 8E 83            [24] 1231 	mov	dph,r6
      000044 8F F0            [24] 1232 	mov	b,r7
      000046 12r00r00         [24] 1233 	lcall	___gptr_cmp
      000049 15 81            [12] 1234 	dec	sp
      00004B 15 81            [12] 1235 	dec	sp
      00004D 15 81            [12] 1236 	dec	sp
      00004F 60 6B            [24] 1237 	jz	00103$
                                   1238 ;	../../../../core/net/mac/phase.c:81: if(rimeaddr_cmp(addr, &e->neighbor)) {
      000051 74 03            [12] 1239 	mov	a,#0x03
      000053 2D               [12] 1240 	add	a,r5
      000054 FA               [12] 1241 	mov	r2,a
      000055 E4               [12] 1242 	clr	a
      000056 3E               [12] 1243 	addc	a,r6
      000057 FB               [12] 1244 	mov	r3,a
      000058 8F 04            [24] 1245 	mov	ar4,r7
      00005A C0 07            [24] 1246 	push	ar7
      00005C C0 06            [24] 1247 	push	ar6
      00005E C0 05            [24] 1248 	push	ar5
      000060 C0 02            [24] 1249 	push	ar2
      000062 C0 03            [24] 1250 	push	ar3
      000064 C0 04            [24] 1251 	push	ar4
      000066 E5 81            [12] 1252 	mov	a,sp
      000068 24 F5            [12] 1253 	add	a,#0xf5
      00006A F8               [12] 1254 	mov	r0,a
      00006B 86 82            [24] 1255 	mov	dpl,@r0
      00006D 08               [12] 1256 	inc	r0
      00006E 86 83            [24] 1257 	mov	dph,@r0
      000070 08               [12] 1258 	inc	r0
      000071 86 F0            [24] 1259 	mov	b,@r0
      000073 78r00            [12] 1260 	mov	r0,#_rimeaddr_cmp
      000075 79s00            [12] 1261 	mov	r1,#(_rimeaddr_cmp >> 8)
      000077 7As00            [12] 1262 	mov	r2,#(_rimeaddr_cmp >> 16)
      000079 12r00r00         [24] 1263 	lcall	__sdcc_banked_call
      00007C AB 82            [24] 1264 	mov	r3,dpl
      00007E AC 83            [24] 1265 	mov	r4,dph
      000080 15 81            [12] 1266 	dec	sp
      000082 15 81            [12] 1267 	dec	sp
      000084 15 81            [12] 1268 	dec	sp
      000086 D0 05            [24] 1269 	pop	ar5
      000088 D0 06            [24] 1270 	pop	ar6
      00008A D0 07            [24] 1271 	pop	ar7
      00008C EB               [12] 1272 	mov	a,r3
      00008D 4C               [12] 1273 	orl	a,r4
      00008E 60 08            [24] 1274 	jz	00106$
                                   1275 ;	../../../../core/net/mac/phase.c:82: return e;
      000090 8D 82            [24] 1276 	mov	dpl,r5
      000092 8E 83            [24] 1277 	mov	dph,r6
      000094 8F F0            [24] 1278 	mov	b,r7
      000096 80 2A            [24] 1279 	sjmp	00107$
      000098                       1280 00106$:
                                   1281 ;	../../../../core/net/mac/phase.c:80: for(e = list_head(*list->list); e != NULL; e = list_item_next(e)) {
      000098 8D 02            [24] 1282 	mov	ar2,r5
      00009A 8E 03            [24] 1283 	mov	ar3,r6
      00009C 8F 04            [24] 1284 	mov	ar4,r7
      00009E 8A 82            [24] 1285 	mov	dpl,r2
      0000A0 8B 83            [24] 1286 	mov	dph,r3
      0000A2 8C F0            [24] 1287 	mov	b,r4
      0000A4 78r00            [12] 1288 	mov	r0,#_list_item_next
      0000A6 79s00            [12] 1289 	mov	r1,#(_list_item_next >> 8)
      0000A8 7As00            [12] 1290 	mov	r2,#(_list_item_next >> 16)
      0000AA 12r00r00         [24] 1291 	lcall	__sdcc_banked_call
      0000AD AA 82            [24] 1292 	mov	r2,dpl
      0000AF AB 83            [24] 1293 	mov	r3,dph
      0000B1 AC F0            [24] 1294 	mov	r4,b
      0000B3 8A 05            [24] 1295 	mov	ar5,r2
      0000B5 8B 06            [24] 1296 	mov	ar6,r3
      0000B7 8C 07            [24] 1297 	mov	ar7,r4
      0000B9 02r00r37         [24] 1298 	ljmp	00105$
      0000BC                       1299 00103$:
                                   1300 ;	../../../../core/net/mac/phase.c:85: return NULL;
      0000BC 90 00 00         [24] 1301 	mov	dptr,#0x0000
      0000BF 75 F0 00         [24] 1302 	mov	b,#0x00
      0000C2                       1303 00107$:
      0000C2 02r00r00         [24] 1304 	ljmp	__sdcc_banked_ret
                                   1305 ;------------------------------------------------------------
                                   1306 ;Allocation info for local variables in function 'phase_remove'
                                   1307 ;------------------------------------------------------------
                                   1308 ;neighbor                  Allocated to stack - sp -11
                                   1309 ;list                      Allocated to stack - sp -5
                                   1310 ;e                         Allocated to stack - sp -2
                                   1311 ;------------------------------------------------------------
                                   1312 ;	../../../../core/net/mac/phase.c:89: phase_remove(const struct phase_list *list, const rimeaddr_t *neighbor)
                                   1313 ;	-----------------------------------------
                                   1314 ;	 function phase_remove
                                   1315 ;	-----------------------------------------
      0000C5                       1316 _phase_remove:
      0000C5 C0 82            [24] 1317 	push	dpl
      0000C7 C0 83            [24] 1318 	push	dph
      0000C9 C0 F0            [24] 1319 	push	b
      0000CB 05 81            [12] 1320 	inc	sp
      0000CD 05 81            [12] 1321 	inc	sp
      0000CF 05 81            [12] 1322 	inc	sp
                                   1323 ;	../../../../core/net/mac/phase.c:92: e = find_neighbor(list, neighbor);
      0000D1 E5 81            [12] 1324 	mov	a,sp
      0000D3 24 F5            [12] 1325 	add	a,#0xf5
      0000D5 F8               [12] 1326 	mov	r0,a
      0000D6 E6               [12] 1327 	mov	a,@r0
      0000D7 C0 E0            [24] 1328 	push	acc
      0000D9 08               [12] 1329 	inc	r0
      0000DA E6               [12] 1330 	mov	a,@r0
      0000DB C0 E0            [24] 1331 	push	acc
      0000DD 08               [12] 1332 	inc	r0
      0000DE E6               [12] 1333 	mov	a,@r0
      0000DF C0 E0            [24] 1334 	push	acc
      0000E1 E5 81            [12] 1335 	mov	a,sp
      0000E3 24 F8            [12] 1336 	add	a,#0xf8
      0000E5 F8               [12] 1337 	mov	r0,a
      0000E6 86 82            [24] 1338 	mov	dpl,@r0
      0000E8 08               [12] 1339 	inc	r0
      0000E9 86 83            [24] 1340 	mov	dph,@r0
      0000EB 08               [12] 1341 	inc	r0
      0000EC 86 F0            [24] 1342 	mov	b,@r0
      0000EE 78r00            [12] 1343 	mov	r0,#_find_neighbor
      0000F0 79s00            [12] 1344 	mov	r1,#(_find_neighbor >> 8)
      0000F2 7As00            [12] 1345 	mov	r2,#(_find_neighbor >> 16)
      0000F4 12r00r00         [24] 1346 	lcall	__sdcc_banked_call
      0000F7 AA 82            [24] 1347 	mov	r2,dpl
      0000F9 AB 83            [24] 1348 	mov	r3,dph
      0000FB AC F0            [24] 1349 	mov	r4,b
      0000FD 15 81            [12] 1350 	dec	sp
      0000FF 15 81            [12] 1351 	dec	sp
      000101 15 81            [12] 1352 	dec	sp
      000103 A8 81            [24] 1353 	mov	r0,sp
      000105 18               [12] 1354 	dec	r0
      000106 18               [12] 1355 	dec	r0
      000107 A6 02            [24] 1356 	mov	@r0,ar2
      000109 08               [12] 1357 	inc	r0
      00010A A6 03            [24] 1358 	mov	@r0,ar3
      00010C 08               [12] 1359 	inc	r0
      00010D A6 04            [24] 1360 	mov	@r0,ar4
                                   1361 ;	../../../../core/net/mac/phase.c:93: if(e != NULL) {
      00010F A8 81            [24] 1362 	mov	r0,sp
      000111 18               [12] 1363 	dec	r0
      000112 18               [12] 1364 	dec	r0
      000113 E6               [12] 1365 	mov	a,@r0
      000114 08               [12] 1366 	inc	r0
      000115 46               [12] 1367 	orl	a,@r0
      000116 70 03            [24] 1368 	jnz	00108$
      000118 02r01rBC         [24] 1369 	ljmp	00103$
      00011B                       1370 00108$:
                                   1371 ;	../../../../core/net/mac/phase.c:94: list_remove(*list->list, e);
      00011B A8 81            [24] 1372 	mov	r0,sp
      00011D 18               [12] 1373 	dec	r0
      00011E 18               [12] 1374 	dec	r0
      00011F 86 02            [24] 1375 	mov	ar2,@r0
      000121 08               [12] 1376 	inc	r0
      000122 86 03            [24] 1377 	mov	ar3,@r0
      000124 08               [12] 1378 	inc	r0
      000125 86 04            [24] 1379 	mov	ar4,@r0
      000127 E5 81            [12] 1380 	mov	a,sp
      000129 24 FB            [12] 1381 	add	a,#0xfb
      00012B F8               [12] 1382 	mov	r0,a
      00012C 86 82            [24] 1383 	mov	dpl,@r0
      00012E 08               [12] 1384 	inc	r0
      00012F 86 83            [24] 1385 	mov	dph,@r0
      000131 08               [12] 1386 	inc	r0
      000132 86 F0            [24] 1387 	mov	b,@r0
      000134 12r00r00         [24] 1388 	lcall	__gptrget
      000137 FD               [12] 1389 	mov	r5,a
      000138 A3               [24] 1390 	inc	dptr
      000139 12r00r00         [24] 1391 	lcall	__gptrget
      00013C FE               [12] 1392 	mov	r6,a
      00013D A3               [24] 1393 	inc	dptr
      00013E 12r00r00         [24] 1394 	lcall	__gptrget
      000141 FF               [12] 1395 	mov	r7,a
      000142 8D 82            [24] 1396 	mov	dpl,r5
      000144 8E 83            [24] 1397 	mov	dph,r6
      000146 8F F0            [24] 1398 	mov	b,r7
      000148 12r00r00         [24] 1399 	lcall	__gptrget
      00014B FD               [12] 1400 	mov	r5,a
      00014C A3               [24] 1401 	inc	dptr
      00014D 12r00r00         [24] 1402 	lcall	__gptrget
      000150 FE               [12] 1403 	mov	r6,a
      000151 A3               [24] 1404 	inc	dptr
      000152 12r00r00         [24] 1405 	lcall	__gptrget
      000155 FF               [12] 1406 	mov	r7,a
      000156 C0 02            [24] 1407 	push	ar2
      000158 C0 03            [24] 1408 	push	ar3
      00015A C0 04            [24] 1409 	push	ar4
      00015C 8D 82            [24] 1410 	mov	dpl,r5
      00015E 8E 83            [24] 1411 	mov	dph,r6
      000160 8F F0            [24] 1412 	mov	b,r7
      000162 78r00            [12] 1413 	mov	r0,#_list_remove
      000164 79s00            [12] 1414 	mov	r1,#(_list_remove >> 8)
      000166 7As00            [12] 1415 	mov	r2,#(_list_remove >> 16)
      000168 12r00r00         [24] 1416 	lcall	__sdcc_banked_call
      00016B 15 81            [12] 1417 	dec	sp
      00016D 15 81            [12] 1418 	dec	sp
      00016F 15 81            [12] 1419 	dec	sp
                                   1420 ;	../../../../core/net/mac/phase.c:95: memb_free(list->memb, e);
      000171 A8 81            [24] 1421 	mov	r0,sp
      000173 18               [12] 1422 	dec	r0
      000174 18               [12] 1423 	dec	r0
      000175 86 02            [24] 1424 	mov	ar2,@r0
      000177 08               [12] 1425 	inc	r0
      000178 86 03            [24] 1426 	mov	ar3,@r0
      00017A 08               [12] 1427 	inc	r0
      00017B 86 04            [24] 1428 	mov	ar4,@r0
      00017D E5 81            [12] 1429 	mov	a,sp
      00017F 24 FB            [12] 1430 	add	a,#0xfb
      000181 F8               [12] 1431 	mov	r0,a
      000182 74 03            [12] 1432 	mov	a,#0x03
      000184 26               [12] 1433 	add	a,@r0
      000185 FD               [12] 1434 	mov	r5,a
      000186 E4               [12] 1435 	clr	a
      000187 08               [12] 1436 	inc	r0
      000188 36               [12] 1437 	addc	a,@r0
      000189 FE               [12] 1438 	mov	r6,a
      00018A 08               [12] 1439 	inc	r0
      00018B 86 07            [24] 1440 	mov	ar7,@r0
      00018D 8D 82            [24] 1441 	mov	dpl,r5
      00018F 8E 83            [24] 1442 	mov	dph,r6
      000191 8F F0            [24] 1443 	mov	b,r7
      000193 12r00r00         [24] 1444 	lcall	__gptrget
      000196 FD               [12] 1445 	mov	r5,a
      000197 A3               [24] 1446 	inc	dptr
      000198 12r00r00         [24] 1447 	lcall	__gptrget
      00019B FE               [12] 1448 	mov	r6,a
      00019C A3               [24] 1449 	inc	dptr
      00019D 12r00r00         [24] 1450 	lcall	__gptrget
      0001A0 FF               [12] 1451 	mov	r7,a
      0001A1 C0 02            [24] 1452 	push	ar2
      0001A3 C0 03            [24] 1453 	push	ar3
      0001A5 C0 04            [24] 1454 	push	ar4
      0001A7 8D 82            [24] 1455 	mov	dpl,r5
      0001A9 8E 83            [24] 1456 	mov	dph,r6
      0001AB 8F F0            [24] 1457 	mov	b,r7
      0001AD 78r00            [12] 1458 	mov	r0,#_memb_free
      0001AF 79s00            [12] 1459 	mov	r1,#(_memb_free >> 8)
      0001B1 7As00            [12] 1460 	mov	r2,#(_memb_free >> 16)
      0001B3 12r00r00         [24] 1461 	lcall	__sdcc_banked_call
      0001B6 15 81            [12] 1462 	dec	sp
      0001B8 15 81            [12] 1463 	dec	sp
      0001BA 15 81            [12] 1464 	dec	sp
      0001BC                       1465 00103$:
      0001BC E5 81            [12] 1466 	mov	a,sp
      0001BE 24 FA            [12] 1467 	add	a,#0xFA
      0001C0 F5 81            [12] 1468 	mov	sp,a
      0001C2 02r00r00         [24] 1469 	ljmp	__sdcc_banked_ret
                                   1470 ;------------------------------------------------------------
                                   1471 ;Allocation info for local variables in function 'phase_update'
                                   1472 ;------------------------------------------------------------
                                   1473 ;neighbor                  Allocated to stack - sp -11
                                   1474 ;time                      Allocated to stack - sp -13
                                   1475 ;mac_status                Allocated to stack - sp -15
                                   1476 ;list                      Allocated to stack - sp -5
                                   1477 ;e                         Allocated to stack - sp -2
                                   1478 ;------------------------------------------------------------
                                   1479 ;	../../../../core/net/mac/phase.c:100: phase_update(const struct phase_list *list,
                                   1480 ;	-----------------------------------------
                                   1481 ;	 function phase_update
                                   1482 ;	-----------------------------------------
      0001C5                       1483 _phase_update:
      0001C5 C0 82            [24] 1484 	push	dpl
      0001C7 C0 83            [24] 1485 	push	dph
      0001C9 C0 F0            [24] 1486 	push	b
      0001CB 05 81            [12] 1487 	inc	sp
      0001CD 05 81            [12] 1488 	inc	sp
      0001CF 05 81            [12] 1489 	inc	sp
                                   1490 ;	../../../../core/net/mac/phase.c:107: e = find_neighbor(list, neighbor);
      0001D1 E5 81            [12] 1491 	mov	a,sp
      0001D3 24 F5            [12] 1492 	add	a,#0xf5
      0001D5 F8               [12] 1493 	mov	r0,a
      0001D6 E6               [12] 1494 	mov	a,@r0
      0001D7 C0 E0            [24] 1495 	push	acc
      0001D9 08               [12] 1496 	inc	r0
      0001DA E6               [12] 1497 	mov	a,@r0
      0001DB C0 E0            [24] 1498 	push	acc
      0001DD 08               [12] 1499 	inc	r0
      0001DE E6               [12] 1500 	mov	a,@r0
      0001DF C0 E0            [24] 1501 	push	acc
      0001E1 E5 81            [12] 1502 	mov	a,sp
      0001E3 24 F8            [12] 1503 	add	a,#0xf8
      0001E5 F8               [12] 1504 	mov	r0,a
      0001E6 86 82            [24] 1505 	mov	dpl,@r0
      0001E8 08               [12] 1506 	inc	r0
      0001E9 86 83            [24] 1507 	mov	dph,@r0
      0001EB 08               [12] 1508 	inc	r0
      0001EC 86 F0            [24] 1509 	mov	b,@r0
      0001EE 78r00            [12] 1510 	mov	r0,#_find_neighbor
      0001F0 79s00            [12] 1511 	mov	r1,#(_find_neighbor >> 8)
      0001F2 7As00            [12] 1512 	mov	r2,#(_find_neighbor >> 16)
      0001F4 12r00r00         [24] 1513 	lcall	__sdcc_banked_call
      0001F7 AA 82            [24] 1514 	mov	r2,dpl
      0001F9 AB 83            [24] 1515 	mov	r3,dph
      0001FB AC F0            [24] 1516 	mov	r4,b
      0001FD 15 81            [12] 1517 	dec	sp
      0001FF 15 81            [12] 1518 	dec	sp
      000201 15 81            [12] 1519 	dec	sp
      000203 A8 81            [24] 1520 	mov	r0,sp
      000205 18               [12] 1521 	dec	r0
      000206 18               [12] 1522 	dec	r0
      000207 A6 02            [24] 1523 	mov	@r0,ar2
      000209 08               [12] 1524 	inc	r0
      00020A A6 03            [24] 1525 	mov	@r0,ar3
      00020C 08               [12] 1526 	inc	r0
      00020D A6 04            [24] 1527 	mov	@r0,ar4
                                   1528 ;	../../../../core/net/mac/phase.c:108: if(e != NULL) {
      00020F A8 81            [24] 1529 	mov	r0,sp
      000211 18               [12] 1530 	dec	r0
      000212 18               [12] 1531 	dec	r0
      000213 E6               [12] 1532 	mov	a,@r0
      000214 08               [12] 1533 	inc	r0
      000215 46               [12] 1534 	orl	a,@r0
      000216 70 03            [24] 1535 	jnz	00150$
      000218 02r03rC9         [24] 1536 	ljmp	00119$
      00021B                       1537 00150$:
                                   1538 ;	../../../../core/net/mac/phase.c:109: if(mac_status == MAC_TX_OK) {
      00021B E5 81            [12] 1539 	mov	a,sp
      00021D 24 F1            [12] 1540 	add	a,#0xf1
      00021F F8               [12] 1541 	mov	r0,a
      000220 E6               [12] 1542 	mov	a,@r0
      000221 08               [12] 1543 	inc	r0
      000222 46               [12] 1544 	orl	a,@r0
      000223 70 24            [24] 1545 	jnz	00102$
                                   1546 ;	../../../../core/net/mac/phase.c:113: e->time = time;
      000225 A8 81            [24] 1547 	mov	r0,sp
      000227 18               [12] 1548 	dec	r0
      000228 18               [12] 1549 	dec	r0
      000229 74 0B            [12] 1550 	mov	a,#0x0B
      00022B 26               [12] 1551 	add	a,@r0
      00022C FA               [12] 1552 	mov	r2,a
      00022D E4               [12] 1553 	clr	a
      00022E 08               [12] 1554 	inc	r0
      00022F 36               [12] 1555 	addc	a,@r0
      000230 FB               [12] 1556 	mov	r3,a
      000231 08               [12] 1557 	inc	r0
      000232 86 04            [24] 1558 	mov	ar4,@r0
      000234 8A 82            [24] 1559 	mov	dpl,r2
      000236 8B 83            [24] 1560 	mov	dph,r3
      000238 8C F0            [24] 1561 	mov	b,r4
      00023A E5 81            [12] 1562 	mov	a,sp
      00023C 24 F3            [12] 1563 	add	a,#0xf3
      00023E F8               [12] 1564 	mov	r0,a
      00023F E6               [12] 1565 	mov	a,@r0
      000240 12r00r00         [24] 1566 	lcall	__gptrput
      000243 A3               [24] 1567 	inc	dptr
      000244 08               [12] 1568 	inc	r0
      000245 E6               [12] 1569 	mov	a,@r0
      000246 12r00r00         [24] 1570 	lcall	__gptrput
      000249                       1571 00102$:
                                   1572 ;	../../../../core/net/mac/phase.c:118: if(mac_status == MAC_TX_NOACK) {
      000249 E5 81            [12] 1573 	mov	a,sp
      00024B 24 F1            [12] 1574 	add	a,#0xf1
      00024D F8               [12] 1575 	mov	r0,a
      00024E B6 02 06         [24] 1576 	cjne	@r0,#0x02,00152$
      000251 08               [12] 1577 	inc	r0
      000252 B6 00 02         [24] 1578 	cjne	@r0,#0x00,00152$
      000255 80 03            [24] 1579 	sjmp	00153$
      000257                       1580 00152$:
      000257 02r03rA0         [24] 1581 	ljmp	00111$
      00025A                       1582 00153$:
                                   1583 ;	../../../../core/net/mac/phase.c:120: e->noacks++;
      00025A A8 81            [24] 1584 	mov	r0,sp
      00025C 18               [12] 1585 	dec	r0
      00025D 18               [12] 1586 	dec	r0
      00025E 74 0D            [12] 1587 	mov	a,#0x0D
      000260 26               [12] 1588 	add	a,@r0
      000261 FA               [12] 1589 	mov	r2,a
      000262 E4               [12] 1590 	clr	a
      000263 08               [12] 1591 	inc	r0
      000264 36               [12] 1592 	addc	a,@r0
      000265 FB               [12] 1593 	mov	r3,a
      000266 08               [12] 1594 	inc	r0
      000267 86 04            [24] 1595 	mov	ar4,@r0
      000269 8A 82            [24] 1596 	mov	dpl,r2
      00026B 8B 83            [24] 1597 	mov	dph,r3
      00026D 8C F0            [24] 1598 	mov	b,r4
      00026F 12r00r00         [24] 1599 	lcall	__gptrget
      000272 FF               [12] 1600 	mov	r7,a
      000273 0F               [12] 1601 	inc	r7
      000274 8A 82            [24] 1602 	mov	dpl,r2
      000276 8B 83            [24] 1603 	mov	dph,r3
      000278 8C F0            [24] 1604 	mov	b,r4
      00027A EF               [12] 1605 	mov	a,r7
      00027B 12r00r00         [24] 1606 	lcall	__gptrput
                                   1607 ;	../../../../core/net/mac/phase.c:121: if(e->noacks == 1) {
      00027E BF 01 42         [24] 1608 	cjne	r7,#0x01,00104$
                                   1609 ;	../../../../core/net/mac/phase.c:122: timer_set(&e->noacks_timer, MAX_NOACKS_TIME);
      000281 C0 02            [24] 1610 	push	ar2
      000283 C0 03            [24] 1611 	push	ar3
      000285 C0 04            [24] 1612 	push	ar4
      000287 E5 81            [12] 1613 	mov	a,sp
      000289 24 FB            [12] 1614 	add	a,#0xfb
      00028B F8               [12] 1615 	mov	r0,a
      00028C 74 0E            [12] 1616 	mov	a,#0x0E
      00028E 26               [12] 1617 	add	a,@r0
      00028F FA               [12] 1618 	mov	r2,a
      000290 E4               [12] 1619 	clr	a
      000291 08               [12] 1620 	inc	r0
      000292 36               [12] 1621 	addc	a,@r0
      000293 FB               [12] 1622 	mov	r3,a
      000294 08               [12] 1623 	inc	r0
      000295 86 04            [24] 1624 	mov	ar4,@r0
      000297 C0 04            [24] 1625 	push	ar4
      000299 C0 03            [24] 1626 	push	ar3
      00029B C0 02            [24] 1627 	push	ar2
      00029D E4               [12] 1628 	clr	a
      00029E C0 E0            [24] 1629 	push	acc
      0002A0 74 0F            [12] 1630 	mov	a,#0x0F
      0002A2 C0 E0            [24] 1631 	push	acc
      0002A4 8A 82            [24] 1632 	mov	dpl,r2
      0002A6 8B 83            [24] 1633 	mov	dph,r3
      0002A8 8C F0            [24] 1634 	mov	b,r4
      0002AA 78r00            [12] 1635 	mov	r0,#_timer_set
      0002AC 79s00            [12] 1636 	mov	r1,#(_timer_set >> 8)
      0002AE 7As00            [12] 1637 	mov	r2,#(_timer_set >> 16)
      0002B0 12r00r00         [24] 1638 	lcall	__sdcc_banked_call
      0002B3 15 81            [12] 1639 	dec	sp
      0002B5 15 81            [12] 1640 	dec	sp
      0002B7 D0 02            [24] 1641 	pop	ar2
      0002B9 D0 03            [24] 1642 	pop	ar3
      0002BB D0 04            [24] 1643 	pop	ar4
                                   1644 ;	../../../../core/net/mac/phase.c:149: list_push(*list->list, e);
      0002BD D0 04            [24] 1645 	pop	ar4
      0002BF D0 03            [24] 1646 	pop	ar3
      0002C1 D0 02            [24] 1647 	pop	ar2
                                   1648 ;	../../../../core/net/mac/phase.c:122: timer_set(&e->noacks_timer, MAX_NOACKS_TIME);
      0002C3                       1649 00104$:
                                   1650 ;	../../../../core/net/mac/phase.c:124: if(e->noacks >= MAX_NOACKS || timer_expired(&e->noacks_timer)) {
      0002C3 8A 82            [24] 1651 	mov	dpl,r2
      0002C5 8B 83            [24] 1652 	mov	dph,r3
      0002C7 8C F0            [24] 1653 	mov	b,r4
      0002C9 12r00r00         [24] 1654 	lcall	__gptrget
      0002CC FA               [12] 1655 	mov	r2,a
      0002CD BA 10 00         [24] 1656 	cjne	r2,#0x10,00156$
      0002D0                       1657 00156$:
      0002D0 50 2A            [24] 1658 	jnc	00105$
      0002D2 A8 81            [24] 1659 	mov	r0,sp
      0002D4 18               [12] 1660 	dec	r0
      0002D5 18               [12] 1661 	dec	r0
      0002D6 74 0E            [12] 1662 	mov	a,#0x0E
      0002D8 26               [12] 1663 	add	a,@r0
      0002D9 FA               [12] 1664 	mov	r2,a
      0002DA E4               [12] 1665 	clr	a
      0002DB 08               [12] 1666 	inc	r0
      0002DC 36               [12] 1667 	addc	a,@r0
      0002DD FB               [12] 1668 	mov	r3,a
      0002DE 08               [12] 1669 	inc	r0
      0002DF 86 04            [24] 1670 	mov	ar4,@r0
      0002E1 8A 82            [24] 1671 	mov	dpl,r2
      0002E3 8B 83            [24] 1672 	mov	dph,r3
      0002E5 8C F0            [24] 1673 	mov	b,r4
      0002E7 78r00            [12] 1674 	mov	r0,#_timer_expired
      0002E9 79s00            [12] 1675 	mov	r1,#(_timer_expired >> 8)
      0002EB 7As00            [12] 1676 	mov	r2,#(_timer_expired >> 16)
      0002ED 12r00r00         [24] 1677 	lcall	__sdcc_banked_call
      0002F0 E5 82            [12] 1678 	mov	a,dpl
      0002F2 85 83 F0         [24] 1679 	mov	b,dph
      0002F5 45 F0            [12] 1680 	orl	a,b
      0002F7 70 03            [24] 1681 	jnz	00158$
      0002F9 02r05r47         [24] 1682 	ljmp	00121$
      0002FC                       1683 00158$:
      0002FC                       1684 00105$:
                                   1685 ;	../../../../core/net/mac/phase.c:126: list_remove(*list->list, e);
      0002FC A8 81            [24] 1686 	mov	r0,sp
      0002FE 18               [12] 1687 	dec	r0
      0002FF 18               [12] 1688 	dec	r0
      000300 86 02            [24] 1689 	mov	ar2,@r0
      000302 08               [12] 1690 	inc	r0
      000303 86 03            [24] 1691 	mov	ar3,@r0
      000305 08               [12] 1692 	inc	r0
      000306 86 04            [24] 1693 	mov	ar4,@r0
      000308 E5 81            [12] 1694 	mov	a,sp
      00030A 24 FB            [12] 1695 	add	a,#0xfb
      00030C F8               [12] 1696 	mov	r0,a
      00030D 86 82            [24] 1697 	mov	dpl,@r0
      00030F 08               [12] 1698 	inc	r0
      000310 86 83            [24] 1699 	mov	dph,@r0
      000312 08               [12] 1700 	inc	r0
      000313 86 F0            [24] 1701 	mov	b,@r0
      000315 12r00r00         [24] 1702 	lcall	__gptrget
      000318 FD               [12] 1703 	mov	r5,a
      000319 A3               [24] 1704 	inc	dptr
      00031A 12r00r00         [24] 1705 	lcall	__gptrget
      00031D FE               [12] 1706 	mov	r6,a
      00031E A3               [24] 1707 	inc	dptr
      00031F 12r00r00         [24] 1708 	lcall	__gptrget
      000322 FF               [12] 1709 	mov	r7,a
      000323 8D 82            [24] 1710 	mov	dpl,r5
      000325 8E 83            [24] 1711 	mov	dph,r6
      000327 8F F0            [24] 1712 	mov	b,r7
      000329 12r00r00         [24] 1713 	lcall	__gptrget
      00032C FD               [12] 1714 	mov	r5,a
      00032D A3               [24] 1715 	inc	dptr
      00032E 12r00r00         [24] 1716 	lcall	__gptrget
      000331 FE               [12] 1717 	mov	r6,a
      000332 A3               [24] 1718 	inc	dptr
      000333 12r00r00         [24] 1719 	lcall	__gptrget
      000336 FF               [12] 1720 	mov	r7,a
      000337 C0 02            [24] 1721 	push	ar2
      000339 C0 03            [24] 1722 	push	ar3
      00033B C0 04            [24] 1723 	push	ar4
      00033D 8D 82            [24] 1724 	mov	dpl,r5
      00033F 8E 83            [24] 1725 	mov	dph,r6
      000341 8F F0            [24] 1726 	mov	b,r7
      000343 78r00            [12] 1727 	mov	r0,#_list_remove
      000345 79s00            [12] 1728 	mov	r1,#(_list_remove >> 8)
      000347 7As00            [12] 1729 	mov	r2,#(_list_remove >> 16)
      000349 12r00r00         [24] 1730 	lcall	__sdcc_banked_call
      00034C 15 81            [12] 1731 	dec	sp
      00034E 15 81            [12] 1732 	dec	sp
      000350 15 81            [12] 1733 	dec	sp
                                   1734 ;	../../../../core/net/mac/phase.c:127: memb_free(list->memb, e);
      000352 A8 81            [24] 1735 	mov	r0,sp
      000354 18               [12] 1736 	dec	r0
      000355 18               [12] 1737 	dec	r0
      000356 86 02            [24] 1738 	mov	ar2,@r0
      000358 08               [12] 1739 	inc	r0
      000359 86 03            [24] 1740 	mov	ar3,@r0
      00035B 08               [12] 1741 	inc	r0
      00035C 86 04            [24] 1742 	mov	ar4,@r0
      00035E E5 81            [12] 1743 	mov	a,sp
      000360 24 FB            [12] 1744 	add	a,#0xfb
      000362 F8               [12] 1745 	mov	r0,a
      000363 74 03            [12] 1746 	mov	a,#0x03
      000365 26               [12] 1747 	add	a,@r0
      000366 FD               [12] 1748 	mov	r5,a
      000367 E4               [12] 1749 	clr	a
      000368 08               [12] 1750 	inc	r0
      000369 36               [12] 1751 	addc	a,@r0
      00036A FE               [12] 1752 	mov	r6,a
      00036B 08               [12] 1753 	inc	r0
      00036C 86 07            [24] 1754 	mov	ar7,@r0
      00036E 8D 82            [24] 1755 	mov	dpl,r5
      000370 8E 83            [24] 1756 	mov	dph,r6
      000372 8F F0            [24] 1757 	mov	b,r7
      000374 12r00r00         [24] 1758 	lcall	__gptrget
      000377 FD               [12] 1759 	mov	r5,a
      000378 A3               [24] 1760 	inc	dptr
      000379 12r00r00         [24] 1761 	lcall	__gptrget
      00037C FE               [12] 1762 	mov	r6,a
      00037D A3               [24] 1763 	inc	dptr
      00037E 12r00r00         [24] 1764 	lcall	__gptrget
      000381 FF               [12] 1765 	mov	r7,a
      000382 C0 02            [24] 1766 	push	ar2
      000384 C0 03            [24] 1767 	push	ar3
      000386 C0 04            [24] 1768 	push	ar4
      000388 8D 82            [24] 1769 	mov	dpl,r5
      00038A 8E 83            [24] 1770 	mov	dph,r6
      00038C 8F F0            [24] 1771 	mov	b,r7
      00038E 78r00            [12] 1772 	mov	r0,#_memb_free
      000390 79s00            [12] 1773 	mov	r1,#(_memb_free >> 8)
      000392 7As00            [12] 1774 	mov	r2,#(_memb_free >> 16)
      000394 12r00r00         [24] 1775 	lcall	__sdcc_banked_call
      000397 15 81            [12] 1776 	dec	sp
      000399 15 81            [12] 1777 	dec	sp
      00039B 15 81            [12] 1778 	dec	sp
                                   1779 ;	../../../../core/net/mac/phase.c:128: return;
      00039D 02r05r47         [24] 1780 	ljmp	00121$
      0003A0                       1781 00111$:
                                   1782 ;	../../../../core/net/mac/phase.c:130: } else if(mac_status == MAC_TX_OK) {
      0003A0 E5 81            [12] 1783 	mov	a,sp
      0003A2 24 F1            [12] 1784 	add	a,#0xf1
      0003A4 F8               [12] 1785 	mov	r0,a
      0003A5 E6               [12] 1786 	mov	a,@r0
      0003A6 08               [12] 1787 	inc	r0
      0003A7 46               [12] 1788 	orl	a,@r0
      0003A8 60 03            [24] 1789 	jz	00159$
      0003AA 02r05r47         [24] 1790 	ljmp	00121$
      0003AD                       1791 00159$:
                                   1792 ;	../../../../core/net/mac/phase.c:131: e->noacks = 0;
      0003AD A8 81            [24] 1793 	mov	r0,sp
      0003AF 18               [12] 1794 	dec	r0
      0003B0 18               [12] 1795 	dec	r0
      0003B1 74 0D            [12] 1796 	mov	a,#0x0D
      0003B3 26               [12] 1797 	add	a,@r0
      0003B4 FD               [12] 1798 	mov	r5,a
      0003B5 E4               [12] 1799 	clr	a
      0003B6 08               [12] 1800 	inc	r0
      0003B7 36               [12] 1801 	addc	a,@r0
      0003B8 FE               [12] 1802 	mov	r6,a
      0003B9 08               [12] 1803 	inc	r0
      0003BA 86 07            [24] 1804 	mov	ar7,@r0
      0003BC 8D 82            [24] 1805 	mov	dpl,r5
      0003BE 8E 83            [24] 1806 	mov	dph,r6
      0003C0 8F F0            [24] 1807 	mov	b,r7
      0003C2 E4               [12] 1808 	clr	a
      0003C3 12r00r00         [24] 1809 	lcall	__gptrput
      0003C6 02r05r47         [24] 1810 	ljmp	00121$
      0003C9                       1811 00119$:
                                   1812 ;	../../../../core/net/mac/phase.c:135: if(mac_status == MAC_TX_OK && e == NULL) {
      0003C9 E5 81            [12] 1813 	mov	a,sp
      0003CB 24 F1            [12] 1814 	add	a,#0xf1
      0003CD F8               [12] 1815 	mov	r0,a
      0003CE E6               [12] 1816 	mov	a,@r0
      0003CF 08               [12] 1817 	inc	r0
      0003D0 46               [12] 1818 	orl	a,@r0
      0003D1 60 03            [24] 1819 	jz	00160$
      0003D3 02r05r47         [24] 1820 	ljmp	00121$
      0003D6                       1821 00160$:
      0003D6 A8 81            [24] 1822 	mov	r0,sp
      0003D8 18               [12] 1823 	dec	r0
      0003D9 18               [12] 1824 	dec	r0
      0003DA E6               [12] 1825 	mov	a,@r0
      0003DB 08               [12] 1826 	inc	r0
      0003DC 46               [12] 1827 	orl	a,@r0
      0003DD 60 03            [24] 1828 	jz	00161$
      0003DF 02r05r47         [24] 1829 	ljmp	00121$
      0003E2                       1830 00161$:
                                   1831 ;	../../../../core/net/mac/phase.c:136: e = memb_alloc(list->memb);
      0003E2 E5 81            [12] 1832 	mov	a,sp
      0003E4 24 FB            [12] 1833 	add	a,#0xfb
      0003E6 F8               [12] 1834 	mov	r0,a
      0003E7 74 03            [12] 1835 	mov	a,#0x03
      0003E9 26               [12] 1836 	add	a,@r0
      0003EA FD               [12] 1837 	mov	r5,a
      0003EB E4               [12] 1838 	clr	a
      0003EC 08               [12] 1839 	inc	r0
      0003ED 36               [12] 1840 	addc	a,@r0
      0003EE FE               [12] 1841 	mov	r6,a
      0003EF 08               [12] 1842 	inc	r0
      0003F0 86 07            [24] 1843 	mov	ar7,@r0
      0003F2 8D 82            [24] 1844 	mov	dpl,r5
      0003F4 8E 83            [24] 1845 	mov	dph,r6
      0003F6 8F F0            [24] 1846 	mov	b,r7
      0003F8 12r00r00         [24] 1847 	lcall	__gptrget
      0003FB FD               [12] 1848 	mov	r5,a
      0003FC A3               [24] 1849 	inc	dptr
      0003FD 12r00r00         [24] 1850 	lcall	__gptrget
      000400 FE               [12] 1851 	mov	r6,a
      000401 A3               [24] 1852 	inc	dptr
      000402 12r00r00         [24] 1853 	lcall	__gptrget
      000405 FF               [12] 1854 	mov	r7,a
      000406 8D 82            [24] 1855 	mov	dpl,r5
      000408 8E 83            [24] 1856 	mov	dph,r6
      00040A 8F F0            [24] 1857 	mov	b,r7
      00040C 78r00            [12] 1858 	mov	r0,#_memb_alloc
      00040E 79s00            [12] 1859 	mov	r1,#(_memb_alloc >> 8)
      000410 7As00            [12] 1860 	mov	r2,#(_memb_alloc >> 16)
      000412 12r00r00         [24] 1861 	lcall	__sdcc_banked_call
      000415 AD 82            [24] 1862 	mov	r5,dpl
      000417 AE 83            [24] 1863 	mov	r6,dph
      000419 AF F0            [24] 1864 	mov	r7,b
      00041B A8 81            [24] 1865 	mov	r0,sp
      00041D 18               [12] 1866 	dec	r0
      00041E 18               [12] 1867 	dec	r0
      00041F A6 05            [24] 1868 	mov	@r0,ar5
      000421 08               [12] 1869 	inc	r0
      000422 A6 06            [24] 1870 	mov	@r0,ar6
      000424 08               [12] 1871 	inc	r0
      000425 A6 07            [24] 1872 	mov	@r0,ar7
                                   1873 ;	../../../../core/net/mac/phase.c:137: if(e == NULL) {
      000427 A8 81            [24] 1874 	mov	r0,sp
      000429 18               [12] 1875 	dec	r0
      00042A 18               [12] 1876 	dec	r0
      00042B E6               [12] 1877 	mov	a,@r0
      00042C 08               [12] 1878 	inc	r0
      00042D 46               [12] 1879 	orl	a,@r0
      00042E 70 50            [24] 1880 	jnz	00114$
                                   1881 ;	../../../../core/net/mac/phase.c:141: e = list_chop(*list->list);
      000430 E5 81            [12] 1882 	mov	a,sp
      000432 24 FB            [12] 1883 	add	a,#0xfb
      000434 F8               [12] 1884 	mov	r0,a
      000435 86 82            [24] 1885 	mov	dpl,@r0
      000437 08               [12] 1886 	inc	r0
      000438 86 83            [24] 1887 	mov	dph,@r0
      00043A 08               [12] 1888 	inc	r0
      00043B 86 F0            [24] 1889 	mov	b,@r0
      00043D 12r00r00         [24] 1890 	lcall	__gptrget
      000440 FD               [12] 1891 	mov	r5,a
      000441 A3               [24] 1892 	inc	dptr
      000442 12r00r00         [24] 1893 	lcall	__gptrget
      000445 FE               [12] 1894 	mov	r6,a
      000446 A3               [24] 1895 	inc	dptr
      000447 12r00r00         [24] 1896 	lcall	__gptrget
      00044A FF               [12] 1897 	mov	r7,a
      00044B 8D 82            [24] 1898 	mov	dpl,r5
      00044D 8E 83            [24] 1899 	mov	dph,r6
      00044F 8F F0            [24] 1900 	mov	b,r7
      000451 12r00r00         [24] 1901 	lcall	__gptrget
      000454 FD               [12] 1902 	mov	r5,a
      000455 A3               [24] 1903 	inc	dptr
      000456 12r00r00         [24] 1904 	lcall	__gptrget
      000459 FE               [12] 1905 	mov	r6,a
      00045A A3               [24] 1906 	inc	dptr
      00045B 12r00r00         [24] 1907 	lcall	__gptrget
      00045E FF               [12] 1908 	mov	r7,a
      00045F 8D 82            [24] 1909 	mov	dpl,r5
      000461 8E 83            [24] 1910 	mov	dph,r6
      000463 8F F0            [24] 1911 	mov	b,r7
      000465 78r00            [12] 1912 	mov	r0,#_list_chop
      000467 79s00            [12] 1913 	mov	r1,#(_list_chop >> 8)
      000469 7As00            [12] 1914 	mov	r2,#(_list_chop >> 16)
      00046B 12r00r00         [24] 1915 	lcall	__sdcc_banked_call
      00046E AD 82            [24] 1916 	mov	r5,dpl
      000470 AE 83            [24] 1917 	mov	r6,dph
      000472 AF F0            [24] 1918 	mov	r7,b
      000474 A8 81            [24] 1919 	mov	r0,sp
      000476 18               [12] 1920 	dec	r0
      000477 18               [12] 1921 	dec	r0
      000478 A6 05            [24] 1922 	mov	@r0,ar5
      00047A 08               [12] 1923 	inc	r0
      00047B A6 06            [24] 1924 	mov	@r0,ar6
      00047D 08               [12] 1925 	inc	r0
      00047E A6 07            [24] 1926 	mov	@r0,ar7
      000480                       1927 00114$:
                                   1928 ;	../../../../core/net/mac/phase.c:143: rimeaddr_copy(&e->neighbor, neighbor);
      000480 A8 81            [24] 1929 	mov	r0,sp
      000482 18               [12] 1930 	dec	r0
      000483 18               [12] 1931 	dec	r0
      000484 74 03            [12] 1932 	mov	a,#0x03
      000486 26               [12] 1933 	add	a,@r0
      000487 FD               [12] 1934 	mov	r5,a
      000488 E4               [12] 1935 	clr	a
      000489 08               [12] 1936 	inc	r0
      00048A 36               [12] 1937 	addc	a,@r0
      00048B FE               [12] 1938 	mov	r6,a
      00048C 08               [12] 1939 	inc	r0
      00048D 86 07            [24] 1940 	mov	ar7,@r0
      00048F E5 81            [12] 1941 	mov	a,sp
      000491 24 F5            [12] 1942 	add	a,#0xf5
      000493 F8               [12] 1943 	mov	r0,a
      000494 E6               [12] 1944 	mov	a,@r0
      000495 C0 E0            [24] 1945 	push	acc
      000497 08               [12] 1946 	inc	r0
      000498 E6               [12] 1947 	mov	a,@r0
      000499 C0 E0            [24] 1948 	push	acc
      00049B 08               [12] 1949 	inc	r0
      00049C E6               [12] 1950 	mov	a,@r0
      00049D C0 E0            [24] 1951 	push	acc
      00049F 8D 82            [24] 1952 	mov	dpl,r5
      0004A1 8E 83            [24] 1953 	mov	dph,r6
      0004A3 8F F0            [24] 1954 	mov	b,r7
      0004A5 78r00            [12] 1955 	mov	r0,#_rimeaddr_copy
      0004A7 79s00            [12] 1956 	mov	r1,#(_rimeaddr_copy >> 8)
      0004A9 7As00            [12] 1957 	mov	r2,#(_rimeaddr_copy >> 16)
      0004AB 12r00r00         [24] 1958 	lcall	__sdcc_banked_call
      0004AE 15 81            [12] 1959 	dec	sp
      0004B0 15 81            [12] 1960 	dec	sp
      0004B2 15 81            [12] 1961 	dec	sp
                                   1962 ;	../../../../core/net/mac/phase.c:144: e->time = time;
      0004B4 A8 81            [24] 1963 	mov	r0,sp
      0004B6 18               [12] 1964 	dec	r0
      0004B7 18               [12] 1965 	dec	r0
      0004B8 74 0B            [12] 1966 	mov	a,#0x0B
      0004BA 26               [12] 1967 	add	a,@r0
      0004BB FD               [12] 1968 	mov	r5,a
      0004BC E4               [12] 1969 	clr	a
      0004BD 08               [12] 1970 	inc	r0
      0004BE 36               [12] 1971 	addc	a,@r0
      0004BF FE               [12] 1972 	mov	r6,a
      0004C0 08               [12] 1973 	inc	r0
      0004C1 86 07            [24] 1974 	mov	ar7,@r0
      0004C3 8D 82            [24] 1975 	mov	dpl,r5
      0004C5 8E 83            [24] 1976 	mov	dph,r6
      0004C7 8F F0            [24] 1977 	mov	b,r7
      0004C9 E5 81            [12] 1978 	mov	a,sp
      0004CB 24 F3            [12] 1979 	add	a,#0xf3
      0004CD F8               [12] 1980 	mov	r0,a
      0004CE E6               [12] 1981 	mov	a,@r0
      0004CF 12r00r00         [24] 1982 	lcall	__gptrput
      0004D2 A3               [24] 1983 	inc	dptr
      0004D3 08               [12] 1984 	inc	r0
      0004D4 E6               [12] 1985 	mov	a,@r0
      0004D5 12r00r00         [24] 1986 	lcall	__gptrput
                                   1987 ;	../../../../core/net/mac/phase.c:148: e->noacks = 0;
      0004D8 A8 81            [24] 1988 	mov	r0,sp
      0004DA 18               [12] 1989 	dec	r0
      0004DB 18               [12] 1990 	dec	r0
      0004DC 74 0D            [12] 1991 	mov	a,#0x0D
      0004DE 26               [12] 1992 	add	a,@r0
      0004DF FD               [12] 1993 	mov	r5,a
      0004E0 E4               [12] 1994 	clr	a
      0004E1 08               [12] 1995 	inc	r0
      0004E2 36               [12] 1996 	addc	a,@r0
      0004E3 FE               [12] 1997 	mov	r6,a
      0004E4 08               [12] 1998 	inc	r0
      0004E5 86 07            [24] 1999 	mov	ar7,@r0
      0004E7 8D 82            [24] 2000 	mov	dpl,r5
      0004E9 8E 83            [24] 2001 	mov	dph,r6
      0004EB 8F F0            [24] 2002 	mov	b,r7
      0004ED E4               [12] 2003 	clr	a
      0004EE 12r00r00         [24] 2004 	lcall	__gptrput
                                   2005 ;	../../../../core/net/mac/phase.c:149: list_push(*list->list, e);
      0004F1 A8 81            [24] 2006 	mov	r0,sp
      0004F3 18               [12] 2007 	dec	r0
      0004F4 18               [12] 2008 	dec	r0
      0004F5 86 02            [24] 2009 	mov	ar2,@r0
      0004F7 08               [12] 2010 	inc	r0
      0004F8 86 03            [24] 2011 	mov	ar3,@r0
      0004FA 08               [12] 2012 	inc	r0
      0004FB 86 04            [24] 2013 	mov	ar4,@r0
      0004FD E5 81            [12] 2014 	mov	a,sp
      0004FF 24 FB            [12] 2015 	add	a,#0xfb
      000501 F8               [12] 2016 	mov	r0,a
      000502 86 82            [24] 2017 	mov	dpl,@r0
      000504 08               [12] 2018 	inc	r0
      000505 86 83            [24] 2019 	mov	dph,@r0
      000507 08               [12] 2020 	inc	r0
      000508 86 F0            [24] 2021 	mov	b,@r0
      00050A 12r00r00         [24] 2022 	lcall	__gptrget
      00050D FD               [12] 2023 	mov	r5,a
      00050E A3               [24] 2024 	inc	dptr
      00050F 12r00r00         [24] 2025 	lcall	__gptrget
      000512 FE               [12] 2026 	mov	r6,a
      000513 A3               [24] 2027 	inc	dptr
      000514 12r00r00         [24] 2028 	lcall	__gptrget
      000517 FF               [12] 2029 	mov	r7,a
      000518 8D 82            [24] 2030 	mov	dpl,r5
      00051A 8E 83            [24] 2031 	mov	dph,r6
      00051C 8F F0            [24] 2032 	mov	b,r7
      00051E 12r00r00         [24] 2033 	lcall	__gptrget
      000521 FD               [12] 2034 	mov	r5,a
      000522 A3               [24] 2035 	inc	dptr
      000523 12r00r00         [24] 2036 	lcall	__gptrget
      000526 FE               [12] 2037 	mov	r6,a
      000527 A3               [24] 2038 	inc	dptr
      000528 12r00r00         [24] 2039 	lcall	__gptrget
      00052B FF               [12] 2040 	mov	r7,a
      00052C C0 02            [24] 2041 	push	ar2
      00052E C0 03            [24] 2042 	push	ar3
      000530 C0 04            [24] 2043 	push	ar4
      000532 8D 82            [24] 2044 	mov	dpl,r5
      000534 8E 83            [24] 2045 	mov	dph,r6
      000536 8F F0            [24] 2046 	mov	b,r7
      000538 78r00            [12] 2047 	mov	r0,#_list_push
      00053A 79s00            [12] 2048 	mov	r1,#(_list_push >> 8)
      00053C 7As00            [12] 2049 	mov	r2,#(_list_push >> 16)
      00053E 12r00r00         [24] 2050 	lcall	__sdcc_banked_call
      000541 15 81            [12] 2051 	dec	sp
      000543 15 81            [12] 2052 	dec	sp
      000545 15 81            [12] 2053 	dec	sp
      000547                       2054 00121$:
      000547 E5 81            [12] 2055 	mov	a,sp
      000549 24 FA            [12] 2056 	add	a,#0xFA
      00054B F5 81            [12] 2057 	mov	sp,a
      00054D 02r00r00         [24] 2058 	ljmp	__sdcc_banked_ret
                                   2059 ;------------------------------------------------------------
                                   2060 ;Allocation info for local variables in function 'send_packet'
                                   2061 ;------------------------------------------------------------
                                   2062 ;ptr                       Allocated to registers r5 r6 r7 
                                   2063 ;p                         Allocated to stack - sp -2
                                   2064 ;sloc0                     Allocated to stack - sp -8
                                   2065 ;sloc1                     Allocated to stack - sp -5
                                   2066 ;------------------------------------------------------------
                                   2067 ;	../../../../core/net/mac/phase.c:155: send_packet(void *ptr)
                                   2068 ;	-----------------------------------------
                                   2069 ;	 function send_packet
                                   2070 ;	-----------------------------------------
      000550                       2071 _send_packet:
      000550 E5 81            [12] 2072 	mov	a,sp
      000552 24 09            [12] 2073 	add	a,#0x09
      000554 F5 81            [12] 2074 	mov	sp,a
      000556 AD 82            [24] 2075 	mov	r5,dpl
      000558 AE 83            [24] 2076 	mov	r6,dph
      00055A AF F0            [24] 2077 	mov	r7,b
                                   2078 ;	../../../../core/net/mac/phase.c:157: struct phase_queueitem *p = ptr;
      00055C A8 81            [24] 2079 	mov	r0,sp
      00055E 18               [12] 2080 	dec	r0
      00055F 18               [12] 2081 	dec	r0
      000560 A6 05            [24] 2082 	mov	@r0,ar5
      000562 08               [12] 2083 	inc	r0
      000563 A6 06            [24] 2084 	mov	@r0,ar6
      000565 08               [12] 2085 	inc	r0
      000566 A6 07            [24] 2086 	mov	@r0,ar7
                                   2087 ;	../../../../core/net/mac/phase.c:159: if(p->buf_list == NULL) {
      000568 A8 81            [24] 2088 	mov	r0,sp
      00056A 18               [12] 2089 	dec	r0
      00056B 18               [12] 2090 	dec	r0
      00056C 74 1F            [12] 2091 	mov	a,#0x1F
      00056E 26               [12] 2092 	add	a,@r0
      00056F FA               [12] 2093 	mov	r2,a
      000570 E4               [12] 2094 	clr	a
      000571 08               [12] 2095 	inc	r0
      000572 36               [12] 2096 	addc	a,@r0
      000573 FB               [12] 2097 	mov	r3,a
      000574 08               [12] 2098 	inc	r0
      000575 86 04            [24] 2099 	mov	ar4,@r0
      000577 8A 82            [24] 2100 	mov	dpl,r2
      000579 8B 83            [24] 2101 	mov	dph,r3
      00057B 8C F0            [24] 2102 	mov	b,r4
      00057D 12r00r00         [24] 2103 	lcall	__gptrget
      000580 FA               [12] 2104 	mov	r2,a
      000581 A3               [24] 2105 	inc	dptr
      000582 12r00r00         [24] 2106 	lcall	__gptrget
      000585 FB               [12] 2107 	mov	r3,a
      000586 A3               [24] 2108 	inc	dptr
      000587 12r00r00         [24] 2109 	lcall	__gptrget
      00058A FC               [12] 2110 	mov	r4,a
      00058B EA               [12] 2111 	mov	a,r2
      00058C 4B               [12] 2112 	orl	a,r3
      00058D 60 03            [24] 2113 	jz	00109$
      00058F 02r06r88         [24] 2114 	ljmp	00102$
      000592                       2115 00109$:
                                   2116 ;	../../../../core/net/mac/phase.c:160: queuebuf_to_packetbuf(p->q);
      000592 A8 81            [24] 2117 	mov	r0,sp
      000594 18               [12] 2118 	dec	r0
      000595 18               [12] 2119 	dec	r0
      000596 74 1C            [12] 2120 	mov	a,#0x1C
      000598 26               [12] 2121 	add	a,@r0
      000599 FC               [12] 2122 	mov	r4,a
      00059A E4               [12] 2123 	clr	a
      00059B 08               [12] 2124 	inc	r0
      00059C 36               [12] 2125 	addc	a,@r0
      00059D FB               [12] 2126 	mov	r3,a
      00059E 08               [12] 2127 	inc	r0
      00059F 86 02            [24] 2128 	mov	ar2,@r0
      0005A1 8C 82            [24] 2129 	mov	dpl,r4
      0005A3 8B 83            [24] 2130 	mov	dph,r3
      0005A5 8A F0            [24] 2131 	mov	b,r2
      0005A7 12r00r00         [24] 2132 	lcall	__gptrget
      0005AA FD               [12] 2133 	mov	r5,a
      0005AB A3               [24] 2134 	inc	dptr
      0005AC 12r00r00         [24] 2135 	lcall	__gptrget
      0005AF FE               [12] 2136 	mov	r6,a
      0005B0 A3               [24] 2137 	inc	dptr
      0005B1 12r00r00         [24] 2138 	lcall	__gptrget
      0005B4 FF               [12] 2139 	mov	r7,a
      0005B5 8D 82            [24] 2140 	mov	dpl,r5
      0005B7 8E 83            [24] 2141 	mov	dph,r6
      0005B9 8F F0            [24] 2142 	mov	b,r7
      0005BB C0 04            [24] 2143 	push	ar4
      0005BD C0 03            [24] 2144 	push	ar3
      0005BF C0 02            [24] 2145 	push	ar2
      0005C1 78r00            [12] 2146 	mov	r0,#_queuebuf_to_packetbuf
      0005C3 79s00            [12] 2147 	mov	r1,#(_queuebuf_to_packetbuf >> 8)
      0005C5 7As00            [12] 2148 	mov	r2,#(_queuebuf_to_packetbuf >> 16)
      0005C7 12r00r00         [24] 2149 	lcall	__sdcc_banked_call
      0005CA D0 02            [24] 2150 	pop	ar2
      0005CC D0 03            [24] 2151 	pop	ar3
      0005CE D0 04            [24] 2152 	pop	ar4
                                   2153 ;	../../../../core/net/mac/phase.c:161: queuebuf_free(p->q);
      0005D0 8C 82            [24] 2154 	mov	dpl,r4
      0005D2 8B 83            [24] 2155 	mov	dph,r3
      0005D4 8A F0            [24] 2156 	mov	b,r2
      0005D6 12r00r00         [24] 2157 	lcall	__gptrget
      0005D9 FD               [12] 2158 	mov	r5,a
      0005DA A3               [24] 2159 	inc	dptr
      0005DB 12r00r00         [24] 2160 	lcall	__gptrget
      0005DE FE               [12] 2161 	mov	r6,a
      0005DF A3               [24] 2162 	inc	dptr
      0005E0 12r00r00         [24] 2163 	lcall	__gptrget
      0005E3 FF               [12] 2164 	mov	r7,a
      0005E4 8D 82            [24] 2165 	mov	dpl,r5
      0005E6 8E 83            [24] 2166 	mov	dph,r6
      0005E8 8F F0            [24] 2167 	mov	b,r7
      0005EA 78r00            [12] 2168 	mov	r0,#_queuebuf_free
      0005EC 79s00            [12] 2169 	mov	r1,#(_queuebuf_free >> 8)
      0005EE 7As00            [12] 2170 	mov	r2,#(_queuebuf_free >> 16)
      0005F0 12r00r00         [24] 2171 	lcall	__sdcc_banked_call
                                   2172 ;	../../../../core/net/mac/phase.c:162: NETSTACK_RDC.send(p->mac_callback, p->mac_callback_ptr);
      0005F3 90r00r06         [24] 2173 	mov	dptr,#(_nullrdc_driver + 0x0006)
      0005F6 E4               [12] 2174 	clr	a
      0005F7 93               [24] 2175 	movc	a,@a+dptr
      0005F8 FC               [12] 2176 	mov	r4,a
      0005F9 A3               [24] 2177 	inc	dptr
      0005FA E4               [12] 2178 	clr	a
      0005FB 93               [24] 2179 	movc	a,@a+dptr
      0005FC FB               [12] 2180 	mov	r3,a
      0005FD A3               [24] 2181 	inc	dptr
      0005FE E4               [12] 2182 	clr	a
      0005FF 93               [24] 2183 	movc	a,@a+dptr
      000600 FA               [12] 2184 	mov	r2,a
      000601 A8 81            [24] 2185 	mov	r0,sp
      000603 18               [12] 2186 	dec	r0
      000604 18               [12] 2187 	dec	r0
      000605 74 19            [12] 2188 	mov	a,#0x19
      000607 26               [12] 2189 	add	a,@r0
      000608 FD               [12] 2190 	mov	r5,a
      000609 E4               [12] 2191 	clr	a
      00060A 08               [12] 2192 	inc	r0
      00060B 36               [12] 2193 	addc	a,@r0
      00060C FE               [12] 2194 	mov	r6,a
      00060D 08               [12] 2195 	inc	r0
      00060E 86 07            [24] 2196 	mov	ar7,@r0
      000610 8D 82            [24] 2197 	mov	dpl,r5
      000612 8E 83            [24] 2198 	mov	dph,r6
      000614 8F F0            [24] 2199 	mov	b,r7
      000616 E5 81            [12] 2200 	mov	a,sp
      000618 24 FB            [12] 2201 	add	a,#0xfb
      00061A F8               [12] 2202 	mov	r0,a
      00061B 12r00r00         [24] 2203 	lcall	__gptrget
      00061E F6               [12] 2204 	mov	@r0,a
      00061F A3               [24] 2205 	inc	dptr
      000620 12r00r00         [24] 2206 	lcall	__gptrget
      000623 08               [12] 2207 	inc	r0
      000624 F6               [12] 2208 	mov	@r0,a
      000625 A3               [24] 2209 	inc	dptr
      000626 12r00r00         [24] 2210 	lcall	__gptrget
      000629 08               [12] 2211 	inc	r0
      00062A F6               [12] 2212 	mov	@r0,a
      00062B A8 81            [24] 2213 	mov	r0,sp
      00062D 18               [12] 2214 	dec	r0
      00062E 18               [12] 2215 	dec	r0
      00062F 74 16            [12] 2216 	mov	a,#0x16
      000631 26               [12] 2217 	add	a,@r0
      000632 FD               [12] 2218 	mov	r5,a
      000633 E4               [12] 2219 	clr	a
      000634 08               [12] 2220 	inc	r0
      000635 36               [12] 2221 	addc	a,@r0
      000636 FE               [12] 2222 	mov	r6,a
      000637 08               [12] 2223 	inc	r0
      000638 86 07            [24] 2224 	mov	ar7,@r0
      00063A 8D 82            [24] 2225 	mov	dpl,r5
      00063C 8E 83            [24] 2226 	mov	dph,r6
      00063E 8F F0            [24] 2227 	mov	b,r7
      000640 12r00r00         [24] 2228 	lcall	__gptrget
      000643 FD               [12] 2229 	mov	r5,a
      000644 A3               [24] 2230 	inc	dptr
      000645 12r00r00         [24] 2231 	lcall	__gptrget
      000648 FE               [12] 2232 	mov	r6,a
      000649 A3               [24] 2233 	inc	dptr
      00064A 12r00r00         [24] 2234 	lcall	__gptrget
      00064D FF               [12] 2235 	mov	r7,a
      00064E C0 04            [24] 2236 	push	ar4
      000650 C0 03            [24] 2237 	push	ar3
      000652 C0 02            [24] 2238 	push	ar2
      000654 E5 81            [12] 2239 	mov	a,sp
      000656 24 F8            [12] 2240 	add	a,#0xf8
      000658 F8               [12] 2241 	mov	r0,a
      000659 E6               [12] 2242 	mov	a,@r0
      00065A C0 E0            [24] 2243 	push	acc
      00065C 08               [12] 2244 	inc	r0
      00065D E6               [12] 2245 	mov	a,@r0
      00065E C0 E0            [24] 2246 	push	acc
      000660 08               [12] 2247 	inc	r0
      000661 E6               [12] 2248 	mov	a,@r0
      000662 C0 E0            [24] 2249 	push	acc
      000664 C0 04            [24] 2250 	push	ar4
      000666 C0 03            [24] 2251 	push	ar3
      000668 C0 02            [24] 2252 	push	ar2
      00066A 8D 82            [24] 2253 	mov	dpl,r5
      00066C 8E 83            [24] 2254 	mov	dph,r6
      00066E 8F F0            [24] 2255 	mov	b,r7
      000670 D0 02            [24] 2256 	pop	ar2
      000672 D0 01            [24] 2257 	pop	ar1
      000674 D0 00            [24] 2258 	pop	ar0
      000676 12r00r00         [24] 2259 	lcall	__sdcc_banked_call
      000679 15 81            [12] 2260 	dec	sp
      00067B 15 81            [12] 2261 	dec	sp
      00067D 15 81            [12] 2262 	dec	sp
      00067F D0 02            [24] 2263 	pop	ar2
      000681 D0 03            [24] 2264 	pop	ar3
      000683 D0 04            [24] 2265 	pop	ar4
      000685 02r07r25         [24] 2266 	ljmp	00103$
      000688                       2267 00102$:
                                   2268 ;	../../../../core/net/mac/phase.c:164: NETSTACK_RDC.send_list(p->mac_callback, p->mac_callback_ptr, p->buf_list);
      000688 90r00r09         [24] 2269 	mov	dptr,#(_nullrdc_driver + 0x0009)
      00068B E5 81            [12] 2270 	mov	a,sp
      00068D 24 FB            [12] 2271 	add	a,#0xfb
      00068F F8               [12] 2272 	mov	r0,a
      000690 E4               [12] 2273 	clr	a
      000691 93               [24] 2274 	movc	a,@a+dptr
      000692 F6               [12] 2275 	mov	@r0,a
      000693 A3               [24] 2276 	inc	dptr
      000694 E4               [12] 2277 	clr	a
      000695 93               [24] 2278 	movc	a,@a+dptr
      000696 08               [12] 2279 	inc	r0
      000697 F6               [12] 2280 	mov	@r0,a
      000698 A3               [24] 2281 	inc	dptr
      000699 E4               [12] 2282 	clr	a
      00069A 93               [24] 2283 	movc	a,@a+dptr
      00069B 08               [12] 2284 	inc	r0
      00069C F6               [12] 2285 	mov	@r0,a
      00069D A8 81            [24] 2286 	mov	r0,sp
      00069F 18               [12] 2287 	dec	r0
      0006A0 18               [12] 2288 	dec	r0
      0006A1 74 19            [12] 2289 	mov	a,#0x19
      0006A3 26               [12] 2290 	add	a,@r0
      0006A4 FD               [12] 2291 	mov	r5,a
      0006A5 E4               [12] 2292 	clr	a
      0006A6 08               [12] 2293 	inc	r0
      0006A7 36               [12] 2294 	addc	a,@r0
      0006A8 FE               [12] 2295 	mov	r6,a
      0006A9 08               [12] 2296 	inc	r0
      0006AA 86 07            [24] 2297 	mov	ar7,@r0
      0006AC 8D 82            [24] 2298 	mov	dpl,r5
      0006AE 8E 83            [24] 2299 	mov	dph,r6
      0006B0 8F F0            [24] 2300 	mov	b,r7
      0006B2 E5 81            [12] 2301 	mov	a,sp
      0006B4 24 F8            [12] 2302 	add	a,#0xf8
      0006B6 F8               [12] 2303 	mov	r0,a
      0006B7 12r00r00         [24] 2304 	lcall	__gptrget
      0006BA F6               [12] 2305 	mov	@r0,a
      0006BB A3               [24] 2306 	inc	dptr
      0006BC 12r00r00         [24] 2307 	lcall	__gptrget
      0006BF 08               [12] 2308 	inc	r0
      0006C0 F6               [12] 2309 	mov	@r0,a
      0006C1 A3               [24] 2310 	inc	dptr
      0006C2 12r00r00         [24] 2311 	lcall	__gptrget
      0006C5 08               [12] 2312 	inc	r0
      0006C6 F6               [12] 2313 	mov	@r0,a
      0006C7 A8 81            [24] 2314 	mov	r0,sp
      0006C9 18               [12] 2315 	dec	r0
      0006CA 18               [12] 2316 	dec	r0
      0006CB 74 16            [12] 2317 	mov	a,#0x16
      0006CD 26               [12] 2318 	add	a,@r0
      0006CE FD               [12] 2319 	mov	r5,a
      0006CF E4               [12] 2320 	clr	a
      0006D0 08               [12] 2321 	inc	r0
      0006D1 36               [12] 2322 	addc	a,@r0
      0006D2 FE               [12] 2323 	mov	r6,a
      0006D3 08               [12] 2324 	inc	r0
      0006D4 86 07            [24] 2325 	mov	ar7,@r0
      0006D6 8D 82            [24] 2326 	mov	dpl,r5
      0006D8 8E 83            [24] 2327 	mov	dph,r6
      0006DA 8F F0            [24] 2328 	mov	b,r7
      0006DC 12r00r00         [24] 2329 	lcall	__gptrget
      0006DF FD               [12] 2330 	mov	r5,a
      0006E0 A3               [24] 2331 	inc	dptr
      0006E1 12r00r00         [24] 2332 	lcall	__gptrget
      0006E4 FE               [12] 2333 	mov	r6,a
      0006E5 A3               [24] 2334 	inc	dptr
      0006E6 12r00r00         [24] 2335 	lcall	__gptrget
      0006E9 FF               [12] 2336 	mov	r7,a
      0006EA C0 02            [24] 2337 	push	ar2
      0006EC C0 03            [24] 2338 	push	ar3
      0006EE C0 04            [24] 2339 	push	ar4
      0006F0 E5 81            [12] 2340 	mov	a,sp
      0006F2 24 F5            [12] 2341 	add	a,#0xf5
      0006F4 F8               [12] 2342 	mov	r0,a
      0006F5 E6               [12] 2343 	mov	a,@r0
      0006F6 C0 E0            [24] 2344 	push	acc
      0006F8 08               [12] 2345 	inc	r0
      0006F9 E6               [12] 2346 	mov	a,@r0
      0006FA C0 E0            [24] 2347 	push	acc
      0006FC 08               [12] 2348 	inc	r0
      0006FD E6               [12] 2349 	mov	a,@r0
      0006FE C0 E0            [24] 2350 	push	acc
      000700 E5 81            [12] 2351 	mov	a,sp
      000702 24 F5            [12] 2352 	add	a,#0xf5
      000704 F8               [12] 2353 	mov	r0,a
      000705 E6               [12] 2354 	mov	a,@r0
      000706 C0 E0            [24] 2355 	push	acc
      000708 08               [12] 2356 	inc	r0
      000709 E6               [12] 2357 	mov	a,@r0
      00070A C0 E0            [24] 2358 	push	acc
      00070C 08               [12] 2359 	inc	r0
      00070D E6               [12] 2360 	mov	a,@r0
      00070E C0 E0            [24] 2361 	push	acc
      000710 8D 82            [24] 2362 	mov	dpl,r5
      000712 8E 83            [24] 2363 	mov	dph,r6
      000714 8F F0            [24] 2364 	mov	b,r7
      000716 D0 02            [24] 2365 	pop	ar2
      000718 D0 01            [24] 2366 	pop	ar1
      00071A D0 00            [24] 2367 	pop	ar0
      00071C 12r00r00         [24] 2368 	lcall	__sdcc_banked_call
      00071F E5 81            [12] 2369 	mov	a,sp
      000721 24 FA            [12] 2370 	add	a,#0xfa
      000723 F5 81            [12] 2371 	mov	sp,a
      000725                       2372 00103$:
                                   2373 ;	../../../../core/net/mac/phase.c:167: memb_free(&queued_packets_memb, p);
      000725 A8 81            [24] 2374 	mov	r0,sp
      000727 18               [12] 2375 	dec	r0
      000728 18               [12] 2376 	dec	r0
      000729 86 05            [24] 2377 	mov	ar5,@r0
      00072B 08               [12] 2378 	inc	r0
      00072C 86 06            [24] 2379 	mov	ar6,@r0
      00072E 08               [12] 2380 	inc	r0
      00072F 86 07            [24] 2381 	mov	ar7,@r0
      000731 C0 05            [24] 2382 	push	ar5
      000733 C0 06            [24] 2383 	push	ar6
      000735 C0 07            [24] 2384 	push	ar7
      000737 90r00r00         [24] 2385 	mov	dptr,#_queued_packets_memb
      00073A 75 F0 00         [24] 2386 	mov	b,#0x00
      00073D 78r00            [12] 2387 	mov	r0,#_memb_free
      00073F 79s00            [12] 2388 	mov	r1,#(_memb_free >> 8)
      000741 7As00            [12] 2389 	mov	r2,#(_memb_free >> 16)
      000743 12r00r00         [24] 2390 	lcall	__sdcc_banked_call
      000746 15 81            [12] 2391 	dec	sp
      000748 15 81            [12] 2392 	dec	sp
      00074A 15 81            [12] 2393 	dec	sp
      00074C E5 81            [12] 2394 	mov	a,sp
      00074E 24 F7            [12] 2395 	add	a,#0xF7
      000750 F5 81            [12] 2396 	mov	sp,a
      000752 02r00r00         [24] 2397 	ljmp	__sdcc_banked_ret
                                   2398 ;------------------------------------------------------------
                                   2399 ;Allocation info for local variables in function 'phase_wait'
                                   2400 ;------------------------------------------------------------
                                   2401 ;neighbor                  Allocated to stack - sp -15
                                   2402 ;cycle_time                Allocated to stack - sp -17
                                   2403 ;guard_time                Allocated to stack - sp -19
                                   2404 ;mac_callback              Allocated to stack - sp -22
                                   2405 ;mac_callback_ptr          Allocated to stack - sp -25
                                   2406 ;buf_list                  Allocated to stack - sp -28
                                   2407 ;list                      Allocated to registers r5 r6 r7 
                                   2408 ;e                         Allocated to stack - sp -9
                                   2409 ;wait                      Allocated to registers r4 r5 
                                   2410 ;now                       Allocated to stack - sp -6
                                   2411 ;expected                  Allocated to registers r6 r7 
                                   2412 ;sync                      Allocated to registers r6 r7 
                                   2413 ;ctimewait                 Allocated to stack - sp -4
                                   2414 ;p                         Allocated to stack - sp -2
                                   2415 ;sloc0                     Allocated to stack - sp +10
                                   2416 ;------------------------------------------------------------
                                   2417 ;	../../../../core/net/mac/phase.c:171: phase_wait(struct phase_list *list,
                                   2418 ;	-----------------------------------------
                                   2419 ;	 function phase_wait
                                   2420 ;	-----------------------------------------
      000755                       2421 _phase_wait:
      000755 E5 81            [12] 2422 	mov	a,sp
      000757 24 0A            [12] 2423 	add	a,#0x0A
      000759 F5 81            [12] 2424 	mov	sp,a
      00075B AD 82            [24] 2425 	mov	r5,dpl
      00075D AE 83            [24] 2426 	mov	r6,dph
      00075F AF F0            [24] 2427 	mov	r7,b
                                   2428 ;	../../../../core/net/mac/phase.c:183: e = find_neighbor(list, neighbor);
      000761 E5 81            [12] 2429 	mov	a,sp
      000763 24 F1            [12] 2430 	add	a,#0xf1
      000765 F8               [12] 2431 	mov	r0,a
      000766 E6               [12] 2432 	mov	a,@r0
      000767 C0 E0            [24] 2433 	push	acc
      000769 08               [12] 2434 	inc	r0
      00076A E6               [12] 2435 	mov	a,@r0
      00076B C0 E0            [24] 2436 	push	acc
      00076D 08               [12] 2437 	inc	r0
      00076E E6               [12] 2438 	mov	a,@r0
      00076F C0 E0            [24] 2439 	push	acc
      000771 8D 82            [24] 2440 	mov	dpl,r5
      000773 8E 83            [24] 2441 	mov	dph,r6
      000775 8F F0            [24] 2442 	mov	b,r7
      000777 78r00            [12] 2443 	mov	r0,#_find_neighbor
      000779 79s00            [12] 2444 	mov	r1,#(_find_neighbor >> 8)
      00077B 7As00            [12] 2445 	mov	r2,#(_find_neighbor >> 16)
      00077D 12r00r00         [24] 2446 	lcall	__sdcc_banked_call
      000780 AD 82            [24] 2447 	mov	r5,dpl
      000782 AE 83            [24] 2448 	mov	r6,dph
      000784 AF F0            [24] 2449 	mov	r7,b
      000786 15 81            [12] 2450 	dec	sp
      000788 15 81            [12] 2451 	dec	sp
      00078A 15 81            [12] 2452 	dec	sp
      00078C E5 81            [12] 2453 	mov	a,sp
      00078E 24 F7            [12] 2454 	add	a,#0xf7
      000790 F8               [12] 2455 	mov	r0,a
      000791 A6 05            [24] 2456 	mov	@r0,ar5
      000793 08               [12] 2457 	inc	r0
      000794 A6 06            [24] 2458 	mov	@r0,ar6
      000796 08               [12] 2459 	inc	r0
      000797 A6 07            [24] 2460 	mov	@r0,ar7
                                   2461 ;	../../../../core/net/mac/phase.c:184: if(e != NULL) {
      000799 E5 81            [12] 2462 	mov	a,sp
      00079B 24 F7            [12] 2463 	add	a,#0xf7
      00079D F8               [12] 2464 	mov	r0,a
      00079E E6               [12] 2465 	mov	a,@r0
      00079F 08               [12] 2466 	inc	r0
      0007A0 46               [12] 2467 	orl	a,@r0
      0007A1 70 03            [24] 2468 	jnz	00148$
      0007A3 02r0ArA2         [24] 2469 	ljmp	00119$
      0007A6                       2470 00148$:
                                   2471 ;	../../../../core/net/mac/phase.c:202: now = RTIMER_NOW();
      0007A6 AB E2            [24] 2472 	mov	r3,_T1CNTL
      0007A8 7C 00            [12] 2473 	mov	r4,#0x00
      0007AA AA E3            [24] 2474 	mov	r2,_T1CNTH
      0007AC 8A 07            [24] 2475 	mov	ar7,r2
      0007AE E4               [12] 2476 	clr	a
      0007AF FA               [12] 2477 	mov	r2,a
      0007B0 2B               [12] 2478 	add	a,r3
      0007B1 FB               [12] 2479 	mov	r3,a
      0007B2 EF               [12] 2480 	mov	a,r7
      0007B3 3C               [12] 2481 	addc	a,r4
      0007B4 FC               [12] 2482 	mov	r4,a
      0007B5 E5 81            [12] 2483 	mov	a,sp
      0007B7 24 FA            [12] 2484 	add	a,#0xfa
      0007B9 F8               [12] 2485 	mov	r0,a
      0007BA A6 03            [24] 2486 	mov	@r0,ar3
      0007BC 08               [12] 2487 	inc	r0
      0007BD A6 04            [24] 2488 	mov	@r0,ar4
                                   2489 ;	../../../../core/net/mac/phase.c:204: sync = (e == NULL) ? now : e->time;
      0007BF E5 81            [12] 2490 	mov	a,sp
      0007C1 24 F7            [12] 2491 	add	a,#0xf7
      0007C3 F8               [12] 2492 	mov	r0,a
      0007C4 E6               [12] 2493 	mov	a,@r0
      0007C5 08               [12] 2494 	inc	r0
      0007C6 46               [12] 2495 	orl	a,@r0
      0007C7 B4 01 00         [24] 2496 	cjne	a,#0x01,00149$
      0007CA                       2497 00149$:
      0007CA E4               [12] 2498 	clr	a
      0007CB 33               [12] 2499 	rlc	a
      0007CC FD               [12] 2500 	mov	r5,a
      0007CD 60 0C            [24] 2501 	jz	00122$
      0007CF E5 81            [12] 2502 	mov	a,sp
      0007D1 24 FA            [12] 2503 	add	a,#0xfa
      0007D3 F8               [12] 2504 	mov	r0,a
      0007D4 86 04            [24] 2505 	mov	ar4,@r0
      0007D6 08               [12] 2506 	inc	r0
      0007D7 86 05            [24] 2507 	mov	ar5,@r0
      0007D9 80 1F            [24] 2508 	sjmp	00123$
      0007DB                       2509 00122$:
      0007DB E5 81            [12] 2510 	mov	a,sp
      0007DD 24 F7            [12] 2511 	add	a,#0xf7
      0007DF F8               [12] 2512 	mov	r0,a
      0007E0 74 0B            [12] 2513 	mov	a,#0x0B
      0007E2 26               [12] 2514 	add	a,@r0
      0007E3 FA               [12] 2515 	mov	r2,a
      0007E4 E4               [12] 2516 	clr	a
      0007E5 08               [12] 2517 	inc	r0
      0007E6 36               [12] 2518 	addc	a,@r0
      0007E7 FB               [12] 2519 	mov	r3,a
      0007E8 08               [12] 2520 	inc	r0
      0007E9 86 07            [24] 2521 	mov	ar7,@r0
      0007EB 8A 82            [24] 2522 	mov	dpl,r2
      0007ED 8B 83            [24] 2523 	mov	dph,r3
      0007EF 8F F0            [24] 2524 	mov	b,r7
      0007F1 12r00r00         [24] 2525 	lcall	__gptrget
      0007F4 FC               [12] 2526 	mov	r4,a
      0007F5 A3               [24] 2527 	inc	dptr
      0007F6 12r00r00         [24] 2528 	lcall	__gptrget
      0007F9 FD               [12] 2529 	mov	r5,a
      0007FA                       2530 00123$:
      0007FA 8C 06            [24] 2531 	mov	ar6,r4
      0007FC 8D 07            [24] 2532 	mov	ar7,r5
                                   2533 ;	../../../../core/net/mac/phase.c:218: if(!(cycle_time & (cycle_time - 1))) {
      0007FE E5 81            [12] 2534 	mov	a,sp
      000800 24 EF            [12] 2535 	add	a,#0xef
      000802 F8               [12] 2536 	mov	r0,a
      000803 E6               [12] 2537 	mov	a,@r0
      000804 24 FF            [12] 2538 	add	a,#0xFF
      000806 FC               [12] 2539 	mov	r4,a
      000807 08               [12] 2540 	inc	r0
      000808 E6               [12] 2541 	mov	a,@r0
      000809 34 FF            [12] 2542 	addc	a,#0xFF
      00080B FD               [12] 2543 	mov	r5,a
      00080C E5 81            [12] 2544 	mov	a,sp
      00080E 24 EF            [12] 2545 	add	a,#0xef
      000810 F8               [12] 2546 	mov	r0,a
      000811 E6               [12] 2547 	mov	a,@r0
      000812 52 04            [12] 2548 	anl	ar4,a
      000814 08               [12] 2549 	inc	r0
      000815 E6               [12] 2550 	mov	a,@r0
      000816 52 05            [12] 2551 	anl	ar5,a
      000818 EC               [12] 2552 	mov	a,r4
      000819 4D               [12] 2553 	orl	a,r5
      00081A 70 23            [24] 2554 	jnz	00102$
                                   2555 ;	../../../../core/net/mac/phase.c:220: wait = (rtimer_clock_t)((sync - now) & (cycle_time - 1));
      00081C E5 81            [12] 2556 	mov	a,sp
      00081E 24 FA            [12] 2557 	add	a,#0xfa
      000820 F8               [12] 2558 	mov	r0,a
      000821 EE               [12] 2559 	mov	a,r6
      000822 C3               [12] 2560 	clr	c
      000823 96               [12] 2561 	subb	a,@r0
      000824 FC               [12] 2562 	mov	r4,a
      000825 EF               [12] 2563 	mov	a,r7
      000826 08               [12] 2564 	inc	r0
      000827 96               [12] 2565 	subb	a,@r0
      000828 FD               [12] 2566 	mov	r5,a
      000829 E5 81            [12] 2567 	mov	a,sp
      00082B 24 EF            [12] 2568 	add	a,#0xef
      00082D F8               [12] 2569 	mov	r0,a
      00082E E6               [12] 2570 	mov	a,@r0
      00082F 24 FF            [12] 2571 	add	a,#0xFF
      000831 FA               [12] 2572 	mov	r2,a
      000832 08               [12] 2573 	inc	r0
      000833 E6               [12] 2574 	mov	a,@r0
      000834 34 FF            [12] 2575 	addc	a,#0xFF
      000836 FB               [12] 2576 	mov	r3,a
      000837 EA               [12] 2577 	mov	a,r2
      000838 52 04            [12] 2578 	anl	ar4,a
      00083A EB               [12] 2579 	mov	a,r3
      00083B 52 05            [12] 2580 	anl	ar5,a
      00083D 80 39            [24] 2581 	sjmp	00103$
      00083F                       2582 00102$:
                                   2583 ;	../../../../core/net/mac/phase.c:223: wait = cycle_time - (rtimer_clock_t)((now - sync) % cycle_time);
      00083F E5 81            [12] 2584 	mov	a,sp
      000841 24 FA            [12] 2585 	add	a,#0xfa
      000843 F8               [12] 2586 	mov	r0,a
      000844 E6               [12] 2587 	mov	a,@r0
      000845 C3               [12] 2588 	clr	c
      000846 9E               [12] 2589 	subb	a,r6
      000847 FE               [12] 2590 	mov	r6,a
      000848 08               [12] 2591 	inc	r0
      000849 E6               [12] 2592 	mov	a,@r0
      00084A 9F               [12] 2593 	subb	a,r7
      00084B FF               [12] 2594 	mov	r7,a
      00084C E5 81            [12] 2595 	mov	a,sp
      00084E 24 EF            [12] 2596 	add	a,#0xef
      000850 F8               [12] 2597 	mov	r0,a
      000851 E6               [12] 2598 	mov	a,@r0
      000852 C0 E0            [24] 2599 	push	acc
      000854 08               [12] 2600 	inc	r0
      000855 E6               [12] 2601 	mov	a,@r0
      000856 C0 E0            [24] 2602 	push	acc
      000858 8E 82            [24] 2603 	mov	dpl,r6
      00085A 8F 83            [24] 2604 	mov	dph,r7
      00085C 12r00r00         [24] 2605 	lcall	__moduint
      00085F AE 82            [24] 2606 	mov	r6,dpl
      000861 AF 83            [24] 2607 	mov	r7,dph
      000863 15 81            [12] 2608 	dec	sp
      000865 15 81            [12] 2609 	dec	sp
      000867 E5 81            [12] 2610 	mov	a,sp
      000869 24 EF            [12] 2611 	add	a,#0xef
      00086B F8               [12] 2612 	mov	r0,a
      00086C E6               [12] 2613 	mov	a,@r0
      00086D C3               [12] 2614 	clr	c
      00086E 9E               [12] 2615 	subb	a,r6
      00086F FE               [12] 2616 	mov	r6,a
      000870 08               [12] 2617 	inc	r0
      000871 E6               [12] 2618 	mov	a,@r0
      000872 9F               [12] 2619 	subb	a,r7
      000873 FF               [12] 2620 	mov	r7,a
      000874 8E 04            [24] 2621 	mov	ar4,r6
      000876 8F 05            [24] 2622 	mov	ar5,r7
      000878                       2623 00103$:
                                   2624 ;	../../../../core/net/mac/phase.c:226: if(wait < guard_time) {
      000878 E5 81            [12] 2625 	mov	a,sp
      00087A 24 ED            [12] 2626 	add	a,#0xed
      00087C F8               [12] 2627 	mov	r0,a
      00087D C3               [12] 2628 	clr	c
      00087E EC               [12] 2629 	mov	a,r4
      00087F 96               [12] 2630 	subb	a,@r0
      000880 ED               [12] 2631 	mov	a,r5
      000881 08               [12] 2632 	inc	r0
      000882 96               [12] 2633 	subb	a,@r0
      000883 50 0C            [24] 2634 	jnc	00105$
                                   2635 ;	../../../../core/net/mac/phase.c:227: wait += cycle_time;
      000885 E5 81            [12] 2636 	mov	a,sp
      000887 24 EF            [12] 2637 	add	a,#0xef
      000889 F8               [12] 2638 	mov	r0,a
      00088A E6               [12] 2639 	mov	a,@r0
      00088B 2C               [12] 2640 	add	a,r4
      00088C FC               [12] 2641 	mov	r4,a
      00088D 08               [12] 2642 	inc	r0
      00088E E6               [12] 2643 	mov	a,@r0
      00088F 3D               [12] 2644 	addc	a,r5
      000890 FD               [12] 2645 	mov	r5,a
      000891                       2646 00105$:
                                   2647 ;	../../../../core/net/mac/phase.c:230: ctimewait = (CLOCK_SECOND * (wait - guard_time)) / RTIMER_ARCH_SECOND;
      000891 E5 81            [12] 2648 	mov	a,sp
      000893 24 ED            [12] 2649 	add	a,#0xed
      000895 F8               [12] 2650 	mov	r0,a
      000896 EC               [12] 2651 	mov	a,r4
      000897 C3               [12] 2652 	clr	c
      000898 96               [12] 2653 	subb	a,@r0
      000899 FE               [12] 2654 	mov	r6,a
      00089A ED               [12] 2655 	mov	a,r5
      00089B 08               [12] 2656 	inc	r0
      00089C 96               [12] 2657 	subb	a,@r0
      00089D 54 01            [12] 2658 	anl	a,#0x01
      00089F A2 E0            [12] 2659 	mov	c,acc.0
      0008A1 CE               [12] 2660 	xch	a,r6
      0008A2 13               [12] 2661 	rrc	a
      0008A3 CE               [12] 2662 	xch	a,r6
      0008A4 13               [12] 2663 	rrc	a
      0008A5 CE               [12] 2664 	xch	a,r6
      0008A6 FF               [12] 2665 	mov	r7,a
      0008A7 C0 05            [24] 2666 	push	ar5
      0008A9 C0 04            [24] 2667 	push	ar4
      0008AB 74 09            [12] 2668 	mov	a,#0x09
      0008AD C0 E0            [24] 2669 	push	acc
      0008AF 74 3D            [12] 2670 	mov	a,#0x3D
      0008B1 C0 E0            [24] 2671 	push	acc
      0008B3 8E 82            [24] 2672 	mov	dpl,r6
      0008B5 8F 83            [24] 2673 	mov	dph,r7
      0008B7 12r00r00         [24] 2674 	lcall	__divuint
      0008BA AE 82            [24] 2675 	mov	r6,dpl
      0008BC AF 83            [24] 2676 	mov	r7,dph
      0008BE 15 81            [12] 2677 	dec	sp
      0008C0 15 81            [12] 2678 	dec	sp
      0008C2 D0 04            [24] 2679 	pop	ar4
      0008C4 D0 05            [24] 2680 	pop	ar5
      0008C6 E5 81            [12] 2681 	mov	a,sp
      0008C8 24 FC            [12] 2682 	add	a,#0xfc
      0008CA F8               [12] 2683 	mov	r0,a
      0008CB A6 06            [24] 2684 	mov	@r0,ar6
      0008CD 08               [12] 2685 	inc	r0
      0008CE A6 07            [24] 2686 	mov	@r0,ar7
                                   2687 ;	../../../../core/net/mac/phase.c:232: if(ctimewait > PHASE_DEFER_THRESHOLD) {
      0008D0 E5 81            [12] 2688 	mov	a,sp
      0008D2 24 FC            [12] 2689 	add	a,#0xfc
      0008D4 F8               [12] 2690 	mov	r0,a
      0008D5 C3               [12] 2691 	clr	c
      0008D6 74 01            [12] 2692 	mov	a,#0x01
      0008D8 96               [12] 2693 	subb	a,@r0
      0008D9 E4               [12] 2694 	clr	a
      0008DA 08               [12] 2695 	inc	r0
      0008DB 96               [12] 2696 	subb	a,@r0
      0008DC 40 03            [24] 2697 	jc	00153$
      0008DE 02r0Ar57         [24] 2698 	ljmp	00112$
      0008E1                       2699 00153$:
                                   2700 ;	../../../../core/net/mac/phase.c:235: p = memb_alloc(&queued_packets_memb);
      0008E1 90r00r00         [24] 2701 	mov	dptr,#_queued_packets_memb
      0008E4 75 F0 00         [24] 2702 	mov	b,#0x00
      0008E7 C0 05            [24] 2703 	push	ar5
      0008E9 C0 04            [24] 2704 	push	ar4
      0008EB 78r00            [12] 2705 	mov	r0,#_memb_alloc
      0008ED 79s00            [12] 2706 	mov	r1,#(_memb_alloc >> 8)
      0008EF 7As00            [12] 2707 	mov	r2,#(_memb_alloc >> 16)
      0008F1 12r00r00         [24] 2708 	lcall	__sdcc_banked_call
      0008F4 AA 82            [24] 2709 	mov	r2,dpl
      0008F6 AB 83            [24] 2710 	mov	r3,dph
      0008F8 AF F0            [24] 2711 	mov	r7,b
      0008FA D0 04            [24] 2712 	pop	ar4
      0008FC D0 05            [24] 2713 	pop	ar5
      0008FE A8 81            [24] 2714 	mov	r0,sp
      000900 18               [12] 2715 	dec	r0
      000901 18               [12] 2716 	dec	r0
      000902 A6 02            [24] 2717 	mov	@r0,ar2
      000904 08               [12] 2718 	inc	r0
      000905 A6 03            [24] 2719 	mov	@r0,ar3
      000907 08               [12] 2720 	inc	r0
      000908 A6 07            [24] 2721 	mov	@r0,ar7
                                   2722 ;	../../../../core/net/mac/phase.c:236: if(p != NULL) {
      00090A A8 81            [24] 2723 	mov	r0,sp
      00090C 18               [12] 2724 	dec	r0
      00090D 18               [12] 2725 	dec	r0
      00090E E6               [12] 2726 	mov	a,@r0
      00090F 08               [12] 2727 	inc	r0
      000910 46               [12] 2728 	orl	a,@r0
      000911 70 03            [24] 2729 	jnz	00154$
      000913 02r0Ar28         [24] 2730 	ljmp	00109$
      000916                       2731 00154$:
                                   2732 ;	../../../../core/net/mac/phase.c:237: if(buf_list == NULL) {
      000916 E5 81            [12] 2733 	mov	a,sp
      000918 24 E4            [12] 2734 	add	a,#0xe4
      00091A F8               [12] 2735 	mov	r0,a
      00091B E6               [12] 2736 	mov	a,@r0
      00091C 08               [12] 2737 	inc	r0
      00091D 46               [12] 2738 	orl	a,@r0
      00091E 70 3E            [24] 2739 	jnz	00107$
                                   2740 ;	../../../../core/net/mac/phase.c:238: p->q = queuebuf_new_from_packetbuf();
      000920 A8 81            [24] 2741 	mov	r0,sp
      000922 18               [12] 2742 	dec	r0
      000923 18               [12] 2743 	dec	r0
      000924 74 1C            [12] 2744 	mov	a,#0x1C
      000926 26               [12] 2745 	add	a,@r0
      000927 FD               [12] 2746 	mov	r5,a
      000928 E4               [12] 2747 	clr	a
      000929 08               [12] 2748 	inc	r0
      00092A 36               [12] 2749 	addc	a,@r0
      00092B FC               [12] 2750 	mov	r4,a
      00092C 08               [12] 2751 	inc	r0
      00092D 86 02            [24] 2752 	mov	ar2,@r0
      00092F C0 05            [24] 2753 	push	ar5
      000931 C0 04            [24] 2754 	push	ar4
      000933 C0 02            [24] 2755 	push	ar2
      000935 78r00            [12] 2756 	mov	r0,#_queuebuf_new_from_packetbuf
      000937 79s00            [12] 2757 	mov	r1,#(_queuebuf_new_from_packetbuf >> 8)
      000939 7As00            [12] 2758 	mov	r2,#(_queuebuf_new_from_packetbuf >> 16)
      00093B 12r00r00         [24] 2759 	lcall	__sdcc_banked_call
      00093E AB 82            [24] 2760 	mov	r3,dpl
      000940 AE 83            [24] 2761 	mov	r6,dph
      000942 AF F0            [24] 2762 	mov	r7,b
      000944 D0 02            [24] 2763 	pop	ar2
      000946 D0 04            [24] 2764 	pop	ar4
      000948 D0 05            [24] 2765 	pop	ar5
      00094A 8D 82            [24] 2766 	mov	dpl,r5
      00094C 8C 83            [24] 2767 	mov	dph,r4
      00094E 8A F0            [24] 2768 	mov	b,r2
      000950 EB               [12] 2769 	mov	a,r3
      000951 12r00r00         [24] 2770 	lcall	__gptrput
      000954 A3               [24] 2771 	inc	dptr
      000955 EE               [12] 2772 	mov	a,r6
      000956 12r00r00         [24] 2773 	lcall	__gptrput
      000959 A3               [24] 2774 	inc	dptr
      00095A EF               [12] 2775 	mov	a,r7
      00095B 12r00r00         [24] 2776 	lcall	__gptrput
      00095E                       2777 00107$:
                                   2778 ;	../../../../core/net/mac/phase.c:240: p->mac_callback = mac_callback;
      00095E A8 81            [24] 2779 	mov	r0,sp
      000960 18               [12] 2780 	dec	r0
      000961 18               [12] 2781 	dec	r0
      000962 74 16            [12] 2782 	mov	a,#0x16
      000964 26               [12] 2783 	add	a,@r0
      000965 FB               [12] 2784 	mov	r3,a
      000966 E4               [12] 2785 	clr	a
      000967 08               [12] 2786 	inc	r0
      000968 36               [12] 2787 	addc	a,@r0
      000969 FE               [12] 2788 	mov	r6,a
      00096A 08               [12] 2789 	inc	r0
      00096B 86 07            [24] 2790 	mov	ar7,@r0
      00096D 8B 82            [24] 2791 	mov	dpl,r3
      00096F 8E 83            [24] 2792 	mov	dph,r6
      000971 8F F0            [24] 2793 	mov	b,r7
      000973 E5 81            [12] 2794 	mov	a,sp
      000975 24 EA            [12] 2795 	add	a,#0xea
      000977 F8               [12] 2796 	mov	r0,a
      000978 E6               [12] 2797 	mov	a,@r0
      000979 12r00r00         [24] 2798 	lcall	__gptrput
      00097C A3               [24] 2799 	inc	dptr
      00097D 08               [12] 2800 	inc	r0
      00097E E6               [12] 2801 	mov	a,@r0
      00097F 12r00r00         [24] 2802 	lcall	__gptrput
      000982 A3               [24] 2803 	inc	dptr
      000983 08               [12] 2804 	inc	r0
      000984 E6               [12] 2805 	mov	a,@r0
      000985 12r00r00         [24] 2806 	lcall	__gptrput
                                   2807 ;	../../../../core/net/mac/phase.c:241: p->mac_callback_ptr = mac_callback_ptr;
      000988 A8 81            [24] 2808 	mov	r0,sp
      00098A 18               [12] 2809 	dec	r0
      00098B 18               [12] 2810 	dec	r0
      00098C 74 19            [12] 2811 	mov	a,#0x19
      00098E 26               [12] 2812 	add	a,@r0
      00098F FB               [12] 2813 	mov	r3,a
      000990 E4               [12] 2814 	clr	a
      000991 08               [12] 2815 	inc	r0
      000992 36               [12] 2816 	addc	a,@r0
      000993 FE               [12] 2817 	mov	r6,a
      000994 08               [12] 2818 	inc	r0
      000995 86 07            [24] 2819 	mov	ar7,@r0
      000997 8B 82            [24] 2820 	mov	dpl,r3
      000999 8E 83            [24] 2821 	mov	dph,r6
      00099B 8F F0            [24] 2822 	mov	b,r7
      00099D E5 81            [12] 2823 	mov	a,sp
      00099F 24 E7            [12] 2824 	add	a,#0xe7
      0009A1 F8               [12] 2825 	mov	r0,a
      0009A2 E6               [12] 2826 	mov	a,@r0
      0009A3 12r00r00         [24] 2827 	lcall	__gptrput
      0009A6 A3               [24] 2828 	inc	dptr
      0009A7 08               [12] 2829 	inc	r0
      0009A8 E6               [12] 2830 	mov	a,@r0
      0009A9 12r00r00         [24] 2831 	lcall	__gptrput
      0009AC A3               [24] 2832 	inc	dptr
      0009AD 08               [12] 2833 	inc	r0
      0009AE E6               [12] 2834 	mov	a,@r0
      0009AF 12r00r00         [24] 2835 	lcall	__gptrput
                                   2836 ;	../../../../core/net/mac/phase.c:242: p->buf_list = buf_list;
      0009B2 A8 81            [24] 2837 	mov	r0,sp
      0009B4 18               [12] 2838 	dec	r0
      0009B5 18               [12] 2839 	dec	r0
      0009B6 74 1F            [12] 2840 	mov	a,#0x1F
      0009B8 26               [12] 2841 	add	a,@r0
      0009B9 FB               [12] 2842 	mov	r3,a
      0009BA E4               [12] 2843 	clr	a
      0009BB 08               [12] 2844 	inc	r0
      0009BC 36               [12] 2845 	addc	a,@r0
      0009BD FE               [12] 2846 	mov	r6,a
      0009BE 08               [12] 2847 	inc	r0
      0009BF 86 07            [24] 2848 	mov	ar7,@r0
      0009C1 8B 82            [24] 2849 	mov	dpl,r3
      0009C3 8E 83            [24] 2850 	mov	dph,r6
      0009C5 8F F0            [24] 2851 	mov	b,r7
      0009C7 E5 81            [12] 2852 	mov	a,sp
      0009C9 24 E4            [12] 2853 	add	a,#0xe4
      0009CB F8               [12] 2854 	mov	r0,a
      0009CC E6               [12] 2855 	mov	a,@r0
      0009CD 12r00r00         [24] 2856 	lcall	__gptrput
      0009D0 A3               [24] 2857 	inc	dptr
      0009D1 08               [12] 2858 	inc	r0
      0009D2 E6               [12] 2859 	mov	a,@r0
      0009D3 12r00r00         [24] 2860 	lcall	__gptrput
      0009D6 A3               [24] 2861 	inc	dptr
      0009D7 08               [12] 2862 	inc	r0
      0009D8 E6               [12] 2863 	mov	a,@r0
      0009D9 12r00r00         [24] 2864 	lcall	__gptrput
                                   2865 ;	../../../../core/net/mac/phase.c:243: ctimer_set(&p->timer, ctimewait, send_packet, p);
      0009DC A8 81            [24] 2866 	mov	r0,sp
      0009DE 18               [12] 2867 	dec	r0
      0009DF 18               [12] 2868 	dec	r0
      0009E0 86 03            [24] 2869 	mov	ar3,@r0
      0009E2 08               [12] 2870 	inc	r0
      0009E3 86 06            [24] 2871 	mov	ar6,@r0
      0009E5 08               [12] 2872 	inc	r0
      0009E6 86 07            [24] 2873 	mov	ar7,@r0
      0009E8 C0 03            [24] 2874 	push	ar3
      0009EA C0 06            [24] 2875 	push	ar6
      0009EC C0 07            [24] 2876 	push	ar7
      0009EE 74r50            [12] 2877 	mov	a,#_send_packet
      0009F0 C0 E0            [24] 2878 	push	acc
      0009F2 74s05            [12] 2879 	mov	a,#(_send_packet >> 8)
      0009F4 C0 E0            [24] 2880 	push	acc
      0009F6 74s00            [12] 2881 	mov	a,#(_send_packet >> 16)
      0009F8 C0 E0            [24] 2882 	push	acc
      0009FA E5 81            [12] 2883 	mov	a,sp
      0009FC 24 F6            [12] 2884 	add	a,#0xf6
      0009FE F8               [12] 2885 	mov	r0,a
      0009FF E6               [12] 2886 	mov	a,@r0
      000A00 C0 E0            [24] 2887 	push	acc
      000A02 08               [12] 2888 	inc	r0
      000A03 E6               [12] 2889 	mov	a,@r0
      000A04 C0 E0            [24] 2890 	push	acc
      000A06 E5 81            [12] 2891 	mov	a,sp
      000A08 24 F6            [12] 2892 	add	a,#0xf6
      000A0A F8               [12] 2893 	mov	r0,a
      000A0B 86 82            [24] 2894 	mov	dpl,@r0
      000A0D 08               [12] 2895 	inc	r0
      000A0E 86 83            [24] 2896 	mov	dph,@r0
      000A10 08               [12] 2897 	inc	r0
      000A11 86 F0            [24] 2898 	mov	b,@r0
      000A13 78r00            [12] 2899 	mov	r0,#_ctimer_set
      000A15 79s00            [12] 2900 	mov	r1,#(_ctimer_set >> 8)
      000A17 7As00            [12] 2901 	mov	r2,#(_ctimer_set >> 16)
      000A19 12r00r00         [24] 2902 	lcall	__sdcc_banked_call
      000A1C E5 81            [12] 2903 	mov	a,sp
      000A1E 24 F8            [12] 2904 	add	a,#0xf8
      000A20 F5 81            [12] 2905 	mov	sp,a
                                   2906 ;	../../../../core/net/mac/phase.c:244: return PHASE_DEFERRED;
      000A22 75 82 02         [24] 2907 	mov	dpl,#0x02
      000A25 02r0ArA5         [24] 2908 	ljmp	00120$
      000A28                       2909 00109$:
                                   2910 ;	../../../../core/net/mac/phase.c:246: memb_free(&queued_packets_memb, p);
      000A28 A8 81            [24] 2911 	mov	r0,sp
      000A2A 18               [12] 2912 	dec	r0
      000A2B 18               [12] 2913 	dec	r0
      000A2C 86 03            [24] 2914 	mov	ar3,@r0
      000A2E 08               [12] 2915 	inc	r0
      000A2F 86 06            [24] 2916 	mov	ar6,@r0
      000A31 08               [12] 2917 	inc	r0
      000A32 86 07            [24] 2918 	mov	ar7,@r0
      000A34 C0 05            [24] 2919 	push	ar5
      000A36 C0 04            [24] 2920 	push	ar4
      000A38 C0 03            [24] 2921 	push	ar3
      000A3A C0 06            [24] 2922 	push	ar6
      000A3C C0 07            [24] 2923 	push	ar7
      000A3E 90r00r00         [24] 2924 	mov	dptr,#_queued_packets_memb
      000A41 75 F0 00         [24] 2925 	mov	b,#0x00
      000A44 78r00            [12] 2926 	mov	r0,#_memb_free
      000A46 79s00            [12] 2927 	mov	r1,#(_memb_free >> 8)
      000A48 7As00            [12] 2928 	mov	r2,#(_memb_free >> 16)
      000A4A 12r00r00         [24] 2929 	lcall	__sdcc_banked_call
      000A4D 15 81            [12] 2930 	dec	sp
      000A4F 15 81            [12] 2931 	dec	sp
      000A51 15 81            [12] 2932 	dec	sp
      000A53 D0 04            [24] 2933 	pop	ar4
      000A55 D0 05            [24] 2934 	pop	ar5
      000A57                       2935 00112$:
                                   2936 ;	../../../../core/net/mac/phase.c:250: expected = now + wait - guard_time;
      000A57 E5 81            [12] 2937 	mov	a,sp
      000A59 24 FA            [12] 2938 	add	a,#0xfa
      000A5B F8               [12] 2939 	mov	r0,a
      000A5C EC               [12] 2940 	mov	a,r4
      000A5D 26               [12] 2941 	add	a,@r0
      000A5E FC               [12] 2942 	mov	r4,a
      000A5F ED               [12] 2943 	mov	a,r5
      000A60 08               [12] 2944 	inc	r0
      000A61 36               [12] 2945 	addc	a,@r0
      000A62 FD               [12] 2946 	mov	r5,a
      000A63 E5 81            [12] 2947 	mov	a,sp
      000A65 24 ED            [12] 2948 	add	a,#0xed
      000A67 F8               [12] 2949 	mov	r0,a
      000A68 EC               [12] 2950 	mov	a,r4
      000A69 C3               [12] 2951 	clr	c
      000A6A 96               [12] 2952 	subb	a,@r0
      000A6B FC               [12] 2953 	mov	r4,a
      000A6C ED               [12] 2954 	mov	a,r5
      000A6D 08               [12] 2955 	inc	r0
      000A6E 96               [12] 2956 	subb	a,@r0
      000A6F FD               [12] 2957 	mov	r5,a
      000A70 8C 06            [24] 2958 	mov	ar6,r4
      000A72 8D 07            [24] 2959 	mov	ar7,r5
                                   2960 ;	../../../../core/net/mac/phase.c:251: if(!RTIMER_CLOCK_LT(expected, now)) {
      000A74 E5 81            [12] 2961 	mov	a,sp
      000A76 24 FA            [12] 2962 	add	a,#0xfa
      000A78 F8               [12] 2963 	mov	r0,a
      000A79 EE               [12] 2964 	mov	a,r6
      000A7A C3               [12] 2965 	clr	c
      000A7B 96               [12] 2966 	subb	a,@r0
      000A7C FC               [12] 2967 	mov	r4,a
      000A7D EF               [12] 2968 	mov	a,r7
      000A7E 08               [12] 2969 	inc	r0
      000A7F 96               [12] 2970 	subb	a,@r0
      000A80 FD               [12] 2971 	mov	r5,a
      000A81 20 E7 19         [24] 2972 	jb	acc.7,00117$
                                   2973 ;	../../../../core/net/mac/phase.c:254: while(RTIMER_CLOCK_LT(RTIMER_NOW(), expected));
      000A84                       2974 00113$:
      000A84 AC E2            [24] 2975 	mov	r4,_T1CNTL
      000A86 7D 00            [12] 2976 	mov	r5,#0x00
      000A88 AA E3            [24] 2977 	mov	r2,_T1CNTH
      000A8A 8A 03            [24] 2978 	mov	ar3,r2
      000A8C E4               [12] 2979 	clr	a
      000A8D FA               [12] 2980 	mov	r2,a
      000A8E 2C               [12] 2981 	add	a,r4
      000A8F FC               [12] 2982 	mov	r4,a
      000A90 EB               [12] 2983 	mov	a,r3
      000A91 3D               [12] 2984 	addc	a,r5
      000A92 FD               [12] 2985 	mov	r5,a
      000A93 EC               [12] 2986 	mov	a,r4
      000A94 C3               [12] 2987 	clr	c
      000A95 9E               [12] 2988 	subb	a,r6
      000A96 FC               [12] 2989 	mov	r4,a
      000A97 ED               [12] 2990 	mov	a,r5
      000A98 9F               [12] 2991 	subb	a,r7
      000A99 FD               [12] 2992 	mov	r5,a
      000A9A 20 E7 E7         [24] 2993 	jb	acc.7,00113$
      000A9D                       2994 00117$:
                                   2995 ;	../../../../core/net/mac/phase.c:256: return PHASE_SEND_NOW;
      000A9D 75 82 01         [24] 2996 	mov	dpl,#0x01
      000AA0 80 03            [24] 2997 	sjmp	00120$
      000AA2                       2998 00119$:
                                   2999 ;	../../../../core/net/mac/phase.c:258: return PHASE_UNKNOWN;
      000AA2 75 82 00         [24] 3000 	mov	dpl,#0x00
      000AA5                       3001 00120$:
      000AA5 E5 81            [12] 3002 	mov	a,sp
      000AA7 24 F6            [12] 3003 	add	a,#0xF6
      000AA9 F5 81            [12] 3004 	mov	sp,a
      000AAB 02r00r00         [24] 3005 	ljmp	__sdcc_banked_ret
                                   3006 ;------------------------------------------------------------
                                   3007 ;Allocation info for local variables in function 'phase_init'
                                   3008 ;------------------------------------------------------------
                                   3009 ;list                      Allocated to registers r5 r6 r7 
                                   3010 ;------------------------------------------------------------
                                   3011 ;	../../../../core/net/mac/phase.c:262: phase_init(struct phase_list *list)
                                   3012 ;	-----------------------------------------
                                   3013 ;	 function phase_init
                                   3014 ;	-----------------------------------------
      000AAE                       3015 _phase_init:
                                   3016 ;	../../../../core/net/mac/phase.c:264: list_init(*list->list);
      000AAE AD 82            [24] 3017 	mov	r5,dpl
      000AB0 AE 83            [24] 3018 	mov	r6,dph
      000AB2 AF F0            [24] 3019 	mov	r7,b
      000AB4 12r00r00         [24] 3020 	lcall	__gptrget
      000AB7 FA               [12] 3021 	mov	r2,a
      000AB8 A3               [24] 3022 	inc	dptr
      000AB9 12r00r00         [24] 3023 	lcall	__gptrget
      000ABC FB               [12] 3024 	mov	r3,a
      000ABD A3               [24] 3025 	inc	dptr
      000ABE 12r00r00         [24] 3026 	lcall	__gptrget
      000AC1 FC               [12] 3027 	mov	r4,a
      000AC2 8A 82            [24] 3028 	mov	dpl,r2
      000AC4 8B 83            [24] 3029 	mov	dph,r3
      000AC6 8C F0            [24] 3030 	mov	b,r4
      000AC8 12r00r00         [24] 3031 	lcall	__gptrget
      000ACB FA               [12] 3032 	mov	r2,a
      000ACC A3               [24] 3033 	inc	dptr
      000ACD 12r00r00         [24] 3034 	lcall	__gptrget
      000AD0 FB               [12] 3035 	mov	r3,a
      000AD1 A3               [24] 3036 	inc	dptr
      000AD2 12r00r00         [24] 3037 	lcall	__gptrget
      000AD5 FC               [12] 3038 	mov	r4,a
      000AD6 8A 82            [24] 3039 	mov	dpl,r2
      000AD8 8B 83            [24] 3040 	mov	dph,r3
      000ADA 8C F0            [24] 3041 	mov	b,r4
      000ADC C0 07            [24] 3042 	push	ar7
      000ADE C0 06            [24] 3043 	push	ar6
      000AE0 C0 05            [24] 3044 	push	ar5
      000AE2 78r00            [12] 3045 	mov	r0,#_list_init
      000AE4 79s00            [12] 3046 	mov	r1,#(_list_init >> 8)
      000AE6 7As00            [12] 3047 	mov	r2,#(_list_init >> 16)
      000AE8 12r00r00         [24] 3048 	lcall	__sdcc_banked_call
      000AEB D0 05            [24] 3049 	pop	ar5
      000AED D0 06            [24] 3050 	pop	ar6
      000AEF D0 07            [24] 3051 	pop	ar7
                                   3052 ;	../../../../core/net/mac/phase.c:265: memb_init(list->memb);
      000AF1 74 03            [12] 3053 	mov	a,#0x03
      000AF3 2D               [12] 3054 	add	a,r5
      000AF4 FD               [12] 3055 	mov	r5,a
      000AF5 E4               [12] 3056 	clr	a
      000AF6 3E               [12] 3057 	addc	a,r6
      000AF7 FE               [12] 3058 	mov	r6,a
      000AF8 8D 82            [24] 3059 	mov	dpl,r5
      000AFA 8E 83            [24] 3060 	mov	dph,r6
      000AFC 8F F0            [24] 3061 	mov	b,r7
      000AFE 12r00r00         [24] 3062 	lcall	__gptrget
      000B01 FD               [12] 3063 	mov	r5,a
      000B02 A3               [24] 3064 	inc	dptr
      000B03 12r00r00         [24] 3065 	lcall	__gptrget
      000B06 FE               [12] 3066 	mov	r6,a
      000B07 A3               [24] 3067 	inc	dptr
      000B08 12r00r00         [24] 3068 	lcall	__gptrget
      000B0B FF               [12] 3069 	mov	r7,a
      000B0C 8D 82            [24] 3070 	mov	dpl,r5
      000B0E 8E 83            [24] 3071 	mov	dph,r6
      000B10 8F F0            [24] 3072 	mov	b,r7
      000B12 78r00            [12] 3073 	mov	r0,#_memb_init
      000B14 79s00            [12] 3074 	mov	r1,#(_memb_init >> 8)
      000B16 7As00            [12] 3075 	mov	r2,#(_memb_init >> 16)
      000B18 12r00r00         [24] 3076 	lcall	__sdcc_banked_call
                                   3077 ;	../../../../core/net/mac/phase.c:266: memb_init(&queued_packets_memb);
      000B1B 90r00r00         [24] 3078 	mov	dptr,#_queued_packets_memb
      000B1E 75 F0 00         [24] 3079 	mov	b,#0x00
      000B21 78r00            [12] 3080 	mov	r0,#_memb_init
      000B23 79s00            [12] 3081 	mov	r1,#(_memb_init >> 8)
      000B25 7As00            [12] 3082 	mov	r2,#(_memb_init >> 16)
      000B27 12r00r00         [24] 3083 	lcall	__sdcc_banked_call
      000B2A 02r00r00         [24] 3084 	ljmp	__sdcc_banked_ret
                                   3085 	.area CSEG    (CODE)
                                   3086 	.area CONST   (CODE)
                                   3087 	.area XINIT   (CODE)
      000000                       3088 __xinit__queued_packets_memb:
      000000 22 00                 3089 	.byte #0x22,#0x00	; 34
      000002 08 00                 3090 	.byte #0x08,#0x00	; 8
      000004r00s00 00              3091 	.byte _queued_packets_memb_memb_count,(_queued_packets_memb_memb_count >> 8),#0x00
      000007r08s00 00              3092 	.byte _queued_packets_memb_memb_mem,(_queued_packets_memb_memb_mem >> 8),#0x00
                                   3093 	.area CABS    (ABS,CODE)
